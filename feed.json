{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakupinera",
    "subtitle": null,
    "icon": "http://sakupinera.github.io/images/favicon.ico",
    "description": "保持你的决心！",
    "home_page_url": "http://sakupinera.github.io",
    "items": [
        {
            "id": "http://sakupinera.github.io/2024/10/23/language/japanese/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E5%8B%89%E5%BC%B7/",
            "url": "http://sakupinera.github.io/2024/10/23/language/japanese/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E5%8B%89%E5%BC%B7/",
            "title": "日本語の勉強",
            "date_published": "2024-10-22T16:00:00.000Z",
            "content_html": "<h1 id=\"日本語の勉強\"><a class=\"anchor\" href=\"#日本語の勉強\">#</a> 日本語の勉強</h1>\n<h2 id=\"输入法\"><a class=\"anchor\" href=\"#输入法\">#</a> 输入法</h2>\n<p>1、汉字、词的变换。不变换汉字、词的时候，请直接按「enter」回车键即可；要变换汉字、词语时，请按「space」空格键，即会出现变换出来的汉字或词的清单，找到想输入的汉字或词时再按「enter」回车键。</p>\n<p>2、长音_输入。片假名里的长音符号 “_”，输入方法是按数字键 0 右方的 -(减号键)。</p>\n<p>3、拨音ん的输入。连续打两个 n。</p>\n<p>4、促音输入。单词中输入促音也就是小っ，方式有两种：① 双重输入后一发音的第一个字母后，会出现促音，比如：切符，きっぷ kippu、学校 がっこう gakkou;② 单独输入小っ的时候可以使用直接输入 ltu 或者 xtu。</p>\n<p>5、小ぁぃぅぇぉ。其他小假名的输入方式和上面②里面说明的相同，只要在前面加上 x 或 l 就可以变成小假名。比如：输入字母 “l” 或 “x”+a、i、u、e、o，输入 la 得到ぁ，输入 xa 也得到ぁ，输入 li 得到ぃ。</p>\n<p>6、平假名、片假名、英数字间的转换。输入罗马字之后，按 F6 转换为平假名，按 F7 转换为全角片假名，按 F8 转换为半角片假名，按 F9 转换为全角英文数字，按 F10 转换为半角英文数字。</p>\n<p><strong>如何在 Markdown 内注音？</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span>ご<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span>飯<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rp</span><span class=\"token punctuation\">></span></span>（<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rp</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span>はん<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rp</span><span class=\"token punctuation\">></span></span>）<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rp</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>&lt;ruby&gt; ご &lt; rt&gt;&lt;/rt &gt; 飯 &lt; rp&gt;（&lt;/rp&gt;&lt;rt &gt; はん &lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;</p>\n<p>现在应该没有不支持 ruby 的浏览器了，所以  <code>rp</code>  的部分写不写无所谓。 <code>rt</code>  的部分就是注音内容了。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span>ご<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span>飯<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span>はん<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>&lt;ruby&gt; ご &lt; rt&gt;&lt;/rt &gt; 飯 &lt; rt &gt; はん &lt;/rt&gt;&lt;/ruby&gt;</p>\n<p>模板：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"单词标注\"><a class=\"anchor\" href=\"#单词标注\">#</a> 单词标注</h2>\n<p>任何国家的语言都有声调。中国话的声调（四声）被认为是最难学的，英语、俄语有重音（有的还有次重音）。那么日语的声调特点是什么呢？就是高音。日语单词后面带圈的数字叫 “音调核”，告诉读者该词读音由高转低的位置。</p>\n<p>首先应该说明，日语单词的发音比较单纯，除了拗音外，每一个假名为一个拍节（注意：这里包括长音、拨音、促音）。在读单词时要一个假名、一个假名地读，不能贪污掉一个，这里同样包括长音、拨音、促音。如：おかあさん是 5 个音节（拍节），这里有长音和拨音；ちょっと是 3 个拍节，这里有拗音和促音。必须正确的发音，这样才能准确地记住。因为发音差一点，意思就有可能发生变化，甚至变成完全不同的单词。那么如何把握调门呢？这就要靠音调核了。</p>\n<p>日语的发音有 2 个特征：一是单峰型，没有多次起伏。二是前 2 个假名音调一定相反：第一个高，第二个就低；相反，第一个低，第二个就高。</p>\n<p>明白了这 2 个特征，加之理解了音调核的含义是：“告诉读者该词读音由高转低的位置”。那么就可以发音读单词了。（由于这里不能用发音示范，只能说明关键问题，其他只好自己领悟了。）</p>\n<p>⓪型：单词不论是几个音节（最少是 1 个音节），从低音入手，第二拍升高，一直到读到最后拍节也不下降。</p>\n<p>①型：单词不论是几个音节（最少是 1 个音节），从高音入手，第二拍下降，一直到读到最后拍节也不上升。</p>\n<p>②型：单词不论是几个音节（最少是 2 个音节），从低音入手，第二拍升高，第三拍下降读到最后拍节也不上升。</p>\n<p>③型：单词不论是几个音节（最少是 3 个音节），从低音入手，第二拍升高，第三拍保持，第四拍下降，读到最后拍节也不上升。</p>\n<p>④型：单词不论是几个音节（最少是 4 个音节），从低音入手，第二拍升高，保持到第四拍，第五拍下降，读到最后拍节也不上升。</p>\n<p>⑤型：单词不论是几个音节（最少是 5 个音节），从低音入手，第二拍升高，保持到第五拍，第六拍下降，读到最后拍节也不上升。</p>\n<p>⑥型：单词不论是几个音节（最少是 6 个音节），从低音入手，第二拍升高，保持到第六拍，第七拍下降，读到最后拍节也不上升。</p>\n<p>…… 顺次类推。</p>\n<p>在实际学习单词的过程中，会出现如下几个问题：</p>\n<ol>\n<li>\n<p>有时一个单词标明 2 个音调核。这说明该词有 2 种读法，一般读前面标记，但是也可以读后面的标记。</p>\n</li>\n<li>\n<p>有时一个单词是复合词，由 2 个单词复合而成。音调核的标记也有 2 个，中间有 “+” 号。这样时会出现双峰型。由于一眼就可以看出是复合词，所以双峰也没有关系。</p>\n</li>\n<li>\n<p>音调核的重要性在于正确发音。但是在说话中掺有各种感情，如：惊讶、愤怒、怀疑、焦急等等，声调会发生变化。在正常情况下，能正常的发出读音就可以了。</p>\n</li>\n<li>\n<p>有几个比较有对比性的发音要特别记住：</p>\n<ul>\n<li>雨①、饴⓪； 桥②、箸①； 帰る①、変える⓪等假名相同而声调不同、代表的含义不同的单词；</li>\n<li>在こそあど系统中，これ、それ、あれ等近、中、远称均是◎、而疑问称どれ是 ①，这不只是物主代词这样，场所代词、方向代词、连体词、副词也相同。</li>\n<li>大部分疑问词都是①，如：なに、だれ、いくつ等等。</li>\n</ul>\n</li>\n<li>\n<p>在学习中会发现这样的情况：假如是 3 个拍节的词，有的标记③，有的标记⓪；当然，4 个拍节的词，有的标记④，而有的标记⓪；甚至一个 3 个拍节的词同时标记③⓪；4 个拍节的词同时标记④⓪。这是怎么回事呢？</p>\n<p>3 个拍节的词标记③，表示当后面添加助词时，助词就要下降；如果标记⓪，则表示当后面添加助词时，助词继续读高，不下降；4 个拍节的词也是同样。几个拍节的词都相同。如果同时有④⓪之类的标记，则表示 2 个读法都可以。</p>\n</li>\n</ol>\n<p>以上简单地说明了日语单词的发音要领，但是由于这里没有声音设备，只能对纸空谈。不过，有了这些知识，再看着单词后面的音调核，听听磁带的发音，我想就可以掌握要领了。至于能否记住，就在于你练习的次数了。</p>\n<h2 id=\"动词变形\"><a class=\"anchor\" href=\"#动词变形\">#</a> 动词变形</h2>\n<p><strong>什么是动词？动词就是表示动作，状态，存在的词</strong></p>\n<p>动作：勉強します、起きます</p>\n<p>状态：死にます</p>\n<p>存在：あります\tいます</p>\n<p>变化：なります</p>\n<p>日语动词<mark>根据变形需要</mark>来分</p>\n<p>一类动词 = 五段活用动词</p>\n<p>二类动词 = 一段活用动词</p>\n<p>三类动词 = カ变动词、サ变动词</p>\n<h3 id=\"动词原形基本形-字典行-辞书形\"><a class=\"anchor\" href=\"#动词原形基本形-字典行-辞书形\">#</a> 动词原形（基本形、字典行、辞书形）</h3>\n<p><strong>三类动词</strong></p>\n<p>一共只有两个，分别是 “くる（来る）” 和 “する”</p>\n<p>其中 “する” 是一个特殊的动词，除了本身是动词之外，它还可以加在某一些名词后面组合成动词，这些名词要求必须是动名词（带有动作意味的名词）。</p>\n<p>勉強（べんきょう）＋する ＝ 勉強<mark>する</mark></p>\n<p>結婚（けっこん）＋する ＝ 結婚<mark>する</mark></p>\n<p>掃除（そうじ）＋する ＝ 掃除<mark>する</mark></p>\n<p><strong>二类动词</strong></p>\n<p>以<mark>る</mark>结尾的动词，并且<mark>る</mark>前面的假名为<mark>い段</mark>和<mark>え段</mark>的假名。</p>\n<p>おきる（起きる）\t\t\t起床</p>\n<p>ねる（寝る）\t\t\t   \t睡觉</p>\n<p>いる\t\t\t\t\t\t\t\t 在</p>\n<p>おしえる（教える）\t\t教</p>\n<p>たりる（足りる）\t\t\t足够</p>\n<p><strong>一类动词</strong></p>\n<p>排除三类动词和二类动词之后，剩下的都是一类动词。</p>\n<p>一类动词以る结尾的动词，る前面的假名为あ、う、お段假名。</p>\n<p>はじまる（始まる）</p>\n<p>とおる（通る）</p>\n<p>おわる（終わる）</p>\n<p>かぶる（被る）</p>\n<p><mark>注意：特殊一类动词</mark></p>\n<p>以<mark>る</mark>结尾，但是<mark>る</mark>前面的假名为<mark>い段</mark>和<mark>え段</mark>的假名，变形遵循一类动词变形。这类动词数量不是很多，我们碰到一个去记一个就可以了。</p>\n<p>かえる（帰る）\t\t\t\t回去，回来</p>\n<p>しる（知る）\t\t\t\t    知道</p>\n<p>すべる（滑る）\t\t\t\t滑</p>\n<p>きる（切る）\t\t\t\t\t切</p>\n<h3 id=\"动词ます形敬体\"><a class=\"anchor\" href=\"#动词ます形敬体\">#</a> 动词ます形（敬体）</h3>\n<p><strong>三类动词</strong></p>\n<p>来（く）る　➡　来（き）ます</p>\n<p>する　➡　します</p>\n<p>結婚する　➡　結婚します</p>\n<p>掃除する　➡　掃除します</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　ます</p>\n<p>起きる　➡　起きます</p>\n<p>寝る　➡　寝ます</p>\n<p>足りる　➡　足ります</p>\n<p>いる　➡　います</p>\n<p><strong>一类动词</strong></p>\n<p><mark>う段</mark>假名变成改行对应的<mark>い段</mark>假名 +<mark> ます</mark>（向前以一个作为假名，即 “u”-&gt;“i”）</p>\n<p>終わる　➡　おわり　➡　終わります</p>\n<p>働く　➡　働き　➡　働きます</p>\n<p>始まる　➡　始まり　➡　始まります</p>\n<p>待つ　➡　待ち　➡　待ちます</p>\n<h3 id=\"动词ない形表否定\"><a class=\"anchor\" href=\"#动词ない形表否定\">#</a> 动词ない形（表否定）</h3>\n<p><strong>三类动词</strong></p>\n<p>来（く）る　➡　来（こ）ない</p>\n<p>する　➡　しない</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　ない</p>\n<p>食べる　➡　食べない</p>\n<p>寝る　➡　寝ない</p>\n<p>借りる　➡　借りない</p>\n<p><strong>一类动词</strong></p>\n<p>う段　➡　あ段　＋　ない</p>\n<p><mark>特殊</mark>：</p>\n<p>ある　➡　ない</p>\n<p>売る　➡　売らない</p>\n<p><mark>う　➡　わ　＋　ない</mark></p>\n<p>買う　➡　買わない</p>\n<p>洗う　➡　洗わない</p>\n<p><strong>ない形・表現①</strong></p>\n<p><mark>動詞（ない形）</mark>&lt;font color = red&gt; ないでください &lt;/font&gt;</p>\n<p>否定请求 请不要...</p>\n<p>例句：</p>\n<ul>\n<li>\n<p>部屋のかぎを <mark>忘れない</mark> でください。</p>\n</li>\n<li>\n<p>この部屋には <mark>入らない</mark> でください。</p>\n</li>\n<li>\n<p>いその品物に <mark>触らない</mark> でください。</p>\n</li>\n</ul>\n<p><strong>ない形・表現②</strong></p>\n<p><mark>動詞（ない形）</mark>&lt;font color=red&gt; なければなりません &lt;/font&gt;</p>\n<p>不得不做某事，必须做某事</p>\n<p>例句：</p>\n<ul>\n<li>\n<p>わたしは今日早く <mark>帰ら</mark> なければなりません。</p>\n</li>\n<li>\n<p>この薬は毎日 <mark>飲ま</mark> なければなりません。</p>\n</li>\n<li>\n<p>すぐに書類を <mark>送ら</mark> ないといけません。</p>\n</li>\n<li>\n<p>李さん、いっしょに食事に行きませんか。- すみません。今日は早く帰って、レポートを <mark>書か</mark> なければなりません。</p>\n</li>\n</ul>\n<p><strong>ない形・表現③</strong></p>\n<p><mark>動詞（ない形）</mark>&lt;font color=red&gt; なくてもいい &lt;/font &gt; です</p>\n<p>不做某事也可以，可以不做某事</p>\n<p>例句：</p>\n<ul>\n<li>\n<p>明日は <mark>残業し</mark> なくてもいい ですよ。</p>\n</li>\n<li>\n<p>先生、もう薬を <mark>飲ま</mark> なくてもいい ですか。- はい、いいですよ。</p>\n</li>\n</ul>\n<h3 id=\"动词て形\"><a class=\"anchor\" href=\"#动词て形\">#</a> 动词て形</h3>\n<p><strong>三类动词</strong></p>\n<p>来（く）る　➡　来（き）て</p>\n<p><mark>する　➡　して</mark></p>\n<p>結婚する　➡　結婚して</p>\n<p>勉強する　➡　勉強して</p>\n<p><strong>二类动词</strong></p>\n<p><mark>る　➡　て</mark></p>\n<p>食べる　➡　食べて</p>\n<p>いる　➡　いて</p>\n<p><strong>一类动词</strong></p>\n<p><mark>う、つ、る　➡　って</mark>（促音变）</p>\n<p>買う　➡　買って</p>\n<p>待つ　➡　待って</p>\n<p>帰る　➡　帰って</p>\n<p><mark>ぶ、む、ね　➡　んで</mark></p>\n<p>遊び　➡　遊んで</p>\n<p>飲む　➡　飲んで</p>\n<p>死ぬ　➡　死んで</p>\n<p><mark>く　➡　いて</mark>（い音变）</p>\n<p>働く　➡　働いて</p>\n<p><mark>ぐ　➡　いで</mark></p>\n<p>急ぐ　➡　急いで</p>\n<p><mark>す　➡　して</mark></p>\n<p>話す　➡　話して</p>\n<p>特殊：</p>\n<p><mark>行く（いく）　➡　行って（いって）</mark></p>\n<h3 id=\"动词た形\"><a class=\"anchor\" href=\"#动词た形\">#</a> 动词た形</h3>\n<p>た形的变形方法跟て形相同</p>\n<p><strong>三类动词</strong></p>\n<p>来る　➡　来て / 来た</p>\n<p>する　➡　して / した</p>\n<p>結婚する　➡　結婚して / 結婚した</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　て / た</p>\n<p>食べる　➡　食べて / 食べた</p>\n<p>いる　➡　いて / いた</p>\n<p><strong>一类动词</strong></p>\n<p>う、つ、る　➡　って / った</p>\n<p>ぶ、む、ね　➡　んで / んだ</p>\n<p>く　➡　いて / いた</p>\n<p>ぐ　➡　いで / いだ</p>\n<p>す　➡　して / した</p>\n<p>買う　➡　買って / 買った</p>\n<p>遊ぶ　➡　遊んで / 遊んだ</p>\n<p>書く　➡　書いて / 書いた</p>\n<p>急ぐ　➡　急いて / 急いだ</p>\n<p>話す　➡　話して / 話した</p>\n<p>特殊：行く　➡　行って / 行った</p>\n<p><strong>た形・表現①</strong></p>\n<p><mark>動詞た</mark> &lt;font color=red&gt; ことがある &lt;/font&gt;\t\t曾经有过某种经历</p>\n<p><mark>動詞た</mark> &lt;font color=red&gt; ことがない &lt;/font&gt;\t\t不曾有过某种经历</p>\n<p>お寿司を <mark>食べた</mark> ことがあります か。</p>\n<p>- いいえ、<mark>食べた</mark> ことがありません。天ぷらは <mark>食べた</mark> ことがあります。</p>\n<p><strong>た形・表現②</strong></p>\n<p><mark>動詞た形</mark> / 名詞の &lt;font color=red&gt; 後で &lt;/font&gt;、~</p>\n<p>做完前项之后，再做后项在… 之后，再…</p>\n<p>会議が <mark>終わった</mark> 後で、飲みに行きます。</p>\n<p>- この資料を見てもいいですか。</p>\n<p>- はい、<mark>読んだ</mark> 後で、森さんに渡してください。</p>\n<p><strong>た形・表現③</strong></p>\n<p><mark>動詞た形</mark> / 動詞ない形 &lt;font color=red&gt; ほうがいい &lt;/font&gt;\t\t比较、建议</p>\n<p>ホテルを<mark>予約した</mark> ほうがいい ですか。</p>\n<p>- そうですね。連休ですから、<mark>その</mark> ほうがいい ですね。</p>\n<p>もっと野菜を <mark>食べた</mark> ほうがいいですよ。</p>\n<p>そんなに <mark>慌てない</mark> ほうがいい ですよ。</p>\n<p><strong>た形・表現④</strong></p>\n<p><mark>動詞た</mark> &lt;font color=red&gt; り &lt;/font&gt;、<mark>動詞た</mark> &lt;font color=red&gt; りする &lt;/font&gt;</p>\n<ol>\n<li>列举若干具有代表性的动作</li>\n</ol>\n<p>小野さんは休みの日、<mark>散歩した</mark> り、買い物に <mark>行った</mark> りします。</p>\n<p>週末に <mark>スケートをした</mark> り、<mark>ボーリングをした</mark> りしました。</p>\n<ol start=\"2\">\n<li>表示动作的往复</li>\n</ol>\n<p>日本に <mark>行った</mark> り <mark>来た</mark> りします。</p>\n<p>彼女は <mark>笑った</mark> り <mark>泣いた</mark> りしています。</p>\n<h3 id=\"动词意向性\"><a class=\"anchor\" href=\"#动词意向性\">#</a> 动词意向性</h3>\n<p><strong>一类动词：</strong></p>\n<p><mark>う段　➡　お段　＋　う</mark></p>\n<p>急ぐ　➡　急ごう</p>\n<p>書く　➡　書こう</p>\n<p>待つ　➡　待とう</p>\n<p>飛ぶ　➡　飛ぼう</p>\n<p>買う　➡　買おう</p>\n<p>話す　➡　話そう</p>\n<p>分かる　➡　分かろう</p>\n<p><strong>二类动词</strong></p>\n<p><mark>る　➡　よう</mark></p>\n<p>食べる　➡　食べよう</p>\n<p>見る　➡　見よう</p>\n<p>浴びる　➡　浴びよう</p>\n<p><strong>三类动词</strong></p>\n<p>来（く）る　➡　こよう</p>\n<p>する　➡　しよう</p>\n<p><strong>意向形・意味</strong></p>\n<p>①表示劝诱（ましょう的简体形）</p>\n<p>いっしょに東京へ旅行に 行こう。</p>\n<p>②表示说话人自身（要做某事）的意志</p>\n<p>明日試験があるから、早く 起きよう。</p>\n<p>風邪を引いたから、学校を 休もう。</p>\n<h3 id=\"动词命令行\"><a class=\"anchor\" href=\"#动词命令行\">#</a> 动词命令行</h3>\n<p><strong>一类动词</strong></p>\n<p>う段　➡　え段</p>\n<p>言う　➡　言え</p>\n<p>走る　➡　走れ</p>\n<p>頑張る　➡　頑張れ</p>\n<p>売る　➡　売れ</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　ろ</p>\n<p>食べる　➡　食べろ</p>\n<p>見る　➡　見ろ</p>\n<p><strong>三类动词</strong></p>\n<p>する　➡　しろ</p>\n<p>来（く）る　➡　来（こ）い</p>\n<p><strong>命令形・意味</strong></p>\n<p>注意：</p>\n<ol>\n<li>要求命令别人做某事（祈使句）</li>\n<li>因会给人粗鲁无礼的印象，所以使用场合很有限</li>\n<li>女性一般不用命令形，用て / ないで</li>\n</ol>\n<h3 id=\"动词ば形\"><a class=\"anchor\" href=\"#动词ば形\">#</a> 动词ば形</h3>\n<p><strong>一类动词</strong></p>\n<p>う段　➡　え段　＋　ば</p>\n<p>書く　➡　書けば</p>\n<p>売る　➡　売れば</p>\n<p>読む　➡　読めば</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　れば</p>\n<p>くれる　➡　けれれば</p>\n<p>食べる　➡　食べれば</p>\n<p><strong>三类动词</strong></p>\n<p>来る　➡　くれば</p>\n<p>する　➡　すれば</p>\n<p><strong>ば形・意味</strong></p>\n<ol>\n<li>\n<p>表示假定条件</p>\n<p>① 如果<mark>前项是动作动词</mark>，后项不可以是意志表达</p>\n<p>② 如果<mark>前项是状态动词或形容词 / 前后主语不同时</mark>，没有条件限制</p>\n<p><mark>優勝すれば</mark>、オリンピックに出場することができる。</p>\n<p>雨が<mark>降らなければ</mark>、ハイキングに行きましょう。</p>\n<p><mark>ない　➡　なければ</mark></p>\n<p><mark>暑ければ</mark>、窓を &lt;font color=red&gt; 開けてください &lt;/font&gt;。</p>\n<p>天気が <mark>よくなければ</mark>、家を &lt;font color=red&gt; 出ないでください &lt;/font&gt;。</p>\n</li>\n<li>\n<p>表示某种建议时，可以用… ばいい的固定搭配</p>\n<p>どうすればいいの？（怎么办オ好）</p>\n</li>\n<li>\n<p>构成与假定条件没有关系的惯用形</p>\n<p>&lt;font color=red&gt; 動詞ば形 &lt;/font&gt;<mark> 動詞辞書形</mark>ほど、……\t\t越… 越…</p>\n<p>日本語を &lt;font color=red&gt; 勉強すれば &lt;/font&gt; <mark>する</mark> ほど、難しくなる感じがする。</p>\n<p>このお菓子を &lt;font color=red&gt; 食べれば &lt;/font&gt; <mark>食べる</mark> ほど、おいしくなると思います。</p>\n</li>\n</ol>\n<h3 id=\"动词なかった形\"><a class=\"anchor\" href=\"#动词なかった形\">#</a> 动词なかった形</h3>\n<p>なかった形是ない形的过去时态</p>\n<p>ない是一类形容词性的助动词，它的变形遵循一类形容词变形规则</p>\n<p>它的过去时态即：な &lt;font color=red&gt; い &lt;/font&gt;　➡　な &lt; font color=red &gt; かった &lt;/font&gt;</p>\n<p><mark>ませんでした</mark>（敬体） = なかった（简体）</p>\n<p>朝ごはんを食べ<mark>ませんでした</mark> = 朝ごはんを食べ &lt;font color=red&gt; なかった &lt;/font&gt;</p>\n<p>宿題をし<mark>ませんでした</mark> = 宿題をし &lt;font color=red&gt; なかった &lt;/font&gt;</p>\n<h3 id=\"被动\"><a class=\"anchor\" href=\"#被动\">#</a> 被动</h3>\n<p><strong>一类动词</strong></p>\n<p><mark>う段　➡　あ段　＋　れる</mark></p>\n<p>使う　➡　使われる</p>\n<p>遊ぶ　➡　遊ばれる</p>\n<p>話す　➡　話される</p>\n<p>読む　➡　読まれる</p>\n<p><strong>二类动词</strong></p>\n<p><mark>る　➡　られる</mark></p>\n<p>食べる　➡　食べられる</p>\n<p>借りる　➡　借りられる</p>\n<p>寝る　➡　寝られる</p>\n<p><strong>三类动词</strong></p>\n<p>来る　➡　来られる</p>\n<p>する　➡　される</p>\n<p><strong>受身動詞・意味</strong></p>\n<p>被动态基础用法总共有 6 种：（用法详见被动专题）</p>\n<ol>\n<li>完全被动</li>\n<li>部分被动</li>\n<li>间接被动</li>\n<li>自然被动</li>\n<li>惯用（发明、创造）</li>\n<li>被动动词做尊他动词（跟被动用法无关）</li>\n</ol>\n<h3 id=\"使役\"><a class=\"anchor\" href=\"#使役\">#</a> 使役</h3>\n<p><strong>一类动词</strong></p>\n<p><mark>う段　➡　あ段　＋　せる</mark></p>\n<p>使う　➡　使わせる</p>\n<p>遊び　➡　遊びせる</p>\n<p><strong>二类动词</strong></p>\n<p><mark>る　➡　させる</mark></p>\n<p>食べる　➡　食べさせる</p>\n<p>借りる　➡　借りさせる</p>\n<p>寝る　➡　寝させる</p>\n<p><strong>三类动词</strong></p>\n<p>来る　➡　来させる</p>\n<p>する　➡　させる</p>\n<ol>\n<li>\n<p>自動詞文    A は B を使役</p>\n<p>母は 公園で弟を遊ばせています。</p>\n<p>部長は 李さんを アメリカに出張させる。</p>\n</li>\n<li>\n<p>他動詞文    A は B に C を使役</p>\n<p>母は 弟に 野菜を 買わせる。</p>\n<p>先生は 生徒に この本を 読ませる。</p>\n</li>\n<li>\n<p>允许自己做某事    使役せてください</p>\n<p>疲れました。少し休ませてください。</p>\n<p>この仕事はわたしにやらせてください。</p>\n</li>\n<li>\n<p>在敬语当中使用</p>\n<p>自谦 使役ていただきます</p>\n<p>明日、もう一度連絡させていただきます。</p>\n<p>请求 使役ていただけますか（比 3 更礼貌）</p>\n<p>頭が痛いんですが、帰らせていただけますか。</p>\n</li>\n</ol>\n<h3 id=\"使役被动\"><a class=\"anchor\" href=\"#使役被动\">#</a> 使役被动</h3>\n<p><strong>一类动词</strong></p>\n<p>う段　➡　あ段　＋　される</p>\n<p>使う　➡　使わされる</p>\n<p>遊ぶ　➡　遊ばされる</p>\n<p>作る　➡　作らされる</p>\n<p>読む　➡　読まされる</p>\n<p>走る　➡　走らされる</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　させられる</p>\n<p>食べる　➡　食べさせられる</p>\n<p>借りる　➡　借りさせられる</p>\n<p>寝る　➡　寝させられる</p>\n<p><strong>三类动词</strong></p>\n<p>来（く）る　➡　来（こ）させられる</p>\n<p>する　➡　させられる</p>\n<p><strong>使役被动・意味</strong></p>\n<p><mark>使役被动仅表示一种不由自主、不得不、或者纯粹被强迫的语感</mark></p>\n<p>選手は監督に走らされます。（强迫）</p>\n<p>昨日は、お母さんに三時間も勉強させられた。（强迫）</p>\n<p>そのニュースを聞くと、今女性の安全問題について考えさせられる。</p>\n<p>总结：</p>\n<ul>\n<li>\n<p>被动\t\tA 被 B\t\tB 做某事</p>\n</li>\n<li>\n<p>使役\t\tA 让 / 使 B\t\tB 做某事</p>\n</li>\n<li>\n<p>使役被动\t\tA 被 B 要求\t\tA 做某事</p>\n</li>\n</ul>\n<h3 id=\"可能\"><a class=\"anchor\" href=\"#可能\">#</a> 可能</h3>\n<p><strong>一类动词</strong></p>\n<p>う段　➡　え段　＋　る</p>\n<p>使う　➡　使える</p>\n<p>書く　➡　書ける</p>\n<p>話す　➡　話せる</p>\n<p>読む　➡　読める</p>\n<p>走る　➡　走れる</p>\n<p><strong>二类动词</strong></p>\n<p>る　➡　られる</p>\n<p>食べる　➡　食べられる</p>\n<p>借りる　➡　借りられる</p>\n<p>寝る　➡　寝られる</p>\n<p><strong>三类动词</strong></p>\n<p>来る　➡　来られる</p>\n<p>する　➡　できる</p>\n<p><mark>注意：二类动词、来る的可能态和被动态同形，在使用时需要注意用法区别（XX られる，可能态的ら可以省略，被动态的ら不能省略）</mark></p>\n<ol>\n<li>\n<p>表示某种技能、能力。</p>\n</li>\n<li>\n<p>表达某种行为的可能性。</p>\n<p><mark>按照二类动词变形方式进行时态和形式的变化（意味着动词变成可能形之后，就会变成一个二类动词，例：書ける，以る结尾，倒数第二个在え段上）</mark></p>\n<p>用法：</p>\n<p>与 “… ことができる” 意义相同</p>\n<p><mark>名詞を動詞原形こと</mark> が できる</p>\n<p>​\t\t\t\t\t   名詞 が 可能動詞</p>\n</li>\n</ol>\n<p><strong>可能動詞・意味</strong></p>\n<p>戴さんは <mark>英語を話すこと</mark> が できる。</p>\n<p>戴さんは\t\t\t\t\t 英語 が 話せます。</p>\n<p>戴さんは\t\t\t\t\t 英語 が 話せる。</p>\n<p>戴さんは\t\t\t\t\t 英語 が 話せない。</p>\n<p>能动态前面大多数用 “が”，口语中也可以用 “を” 来表达。</p>\n<p>注意：像「できる」、「わかる」、「見える」、「聞こえる」本身就含有可能的意思的动词，<mark>没有可能形式</mark>。</p>\n<h2 id=\"形容词变形\"><a class=\"anchor\" href=\"#形容词变形\">#</a> 形容词变形</h2>\n<p>形容词分两类：</p>\n<ul>\n<li>一类形容词：い结尾的，イ类</li>\n<li>二类形容词：不是い结尾的，ナ类</li>\n</ul>\n<p>PS：綺麗（きれい）、嫌い（きらい）这两个搞特殊，属于二类</p>\n<h3 id=\"形容词修饰名词\"><a class=\"anchor\" href=\"#形容词修饰名词\">#</a> 形容词修饰名词</h3>\n<p><mark>一类形容词 直接接 名词</mark></p>\n<p>例如：</p>\n<p>可愛い（かわいい）　＋　ねこ</p>\n<p>優しい（やさしい）　＋　せんせい</p>\n<p>青い（あおい）　＋　そら</p>\n<p><mark>二类形容词 + な + 名词</mark></p>\n<p>静か（しずか）　な　教室</p>\n<p>複雑（ふくざつ）　な　問題</p>\n<p>綺麗（きれい）　な　はな</p>\n<h3 id=\"形容词结句\"><a class=\"anchor\" href=\"#形容词结句\">#</a> 形容词结句</h3>\n<p><mark>一类形容词可以直接结句</mark></p>\n<p>私は可愛い。（简体）</p>\n<p>私は可愛い　<mark>です</mark>。（敬体）</p>\n<p><mark>二类形容词以及名词不可以直接结句</mark></p>\n<p>私は先生。（❌）</p>\n<p>私は綺麗。（❌）</p>\n<p>正确的表达如下：</p>\n<p>私は綺麗　<mark>だ</mark>。（简体）</p>\n<p>私は綺麗　<mark>です</mark>。（敬体）</p>\n<p>私は学生　<mark>だ</mark>。（简体）</p>\n<p>私は学生　<mark>です</mark>。（敬体）</p>\n<h3 id=\"形容词的否定\"><a class=\"anchor\" href=\"#形容词的否定\">#</a> 形容词的否定</h3>\n<p><strong>一类形容词的否定：</strong> 词干 + い  ➡  <mark>い 变成 く + ない</mark></p>\n<p>可愛い　➡　可愛くない</p>\n<p>美味しい　➡　美味しくない</p>\n<p>難しい　➡　難しくない</p>\n<p>良い　➡　良くない</p>\n<p><strong>二类形容词的否定：</strong> 词干  ➡  <mark>では（じゃ）+  ない</mark></p>\n<p>簡単（かんたん）　➡　簡単ではない</p>\n<p>綺麗（きれい）　➡　綺麗ではない</p>\n<p>嫌い（きらい）　➡　嫌いではない</p>\n<p><mark>では比较正式，じゃ比较口语</mark></p>\n<p><strong>ない的敬体</strong></p>\n<p>① ないです</p>\n<p>② ありません</p>\n<h3 id=\"形容词的过去式\"><a class=\"anchor\" href=\"#形容词的过去式\">#</a> 形容词的过去式</h3>\n<p>过去的评价、过去的描述 以及 从过去开始有一直到现在都这样觉得 都会用过去式</p>\n<p><strong>一类形容词的过去式</strong></p>\n<p>简体：</p>\n<p><mark>词干 + い  ➡  い 变成 かった</mark></p>\n<p>可愛い　➡　可愛かった</p>\n<p>美味しい　➡　美味しかった</p>\n<p>難しい　➡　難しかった</p>\n<p>良い　➡　良かった</p>\n<p>敬体：</p>\n<p>在上面的基础上 加 です</p>\n<p><mark>注意：ない的过去式与一类形容词的活用一致，因此可以把ない看作一类形容词来变</mark></p>\n<p><strong>ない的敬体的过去式</strong></p>\n<p>① なかった<mark>です</mark></p>\n<p>② ありません<mark>でした</mark></p>\n<p><strong>二类形容词的过去式</strong></p>\n<p>简体：</p>\n<p><mark>词干　➡　+ だった</mark></p>\n<p>簡単　➡　簡単だった</p>\n<p>綺麗　➡　綺麗だった</p>\n<p>敬体：</p>\n<p><mark>词干　➡　+ でした</mark></p>\n<p>簡単　➡　簡単でした</p>\n<p>綺麗　➡　綺麗でした</p>\n<p><strong>总结</strong></p>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>词性</th>\n<th>时态</th>\n<th>肯定</th>\n<th></th>\n<th>否定</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>简体</td>\n<td>敬体</td>\n<td>简体</td>\n<td>敬体</td>\n</tr>\n<tr>\n<td>高い</td>\n<td>一类形容词</td>\n<td>非过去</td>\n<td>高い</td>\n<td>高いです</td>\n<td>高くない</td>\n<td>高くないです；高くありません</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>过去</td>\n<td>高かった</td>\n<td>高かったです</td>\n<td>高くなかった</td>\n<td>高くなかったです；高くありませんでした</td>\n</tr>\n<tr>\n<td>有名</td>\n<td>二类形容词</td>\n<td>非过去</td>\n<td>有名だ</td>\n<td>有名です</td>\n<td>有名じゃない</td>\n<td>有名じゃないです；有名じゃありません</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>过去</td>\n<td>有名だった</td>\n<td>有名でした</td>\n<td>有名じゃなかった</td>\n<td>有名じゃなかったです；有名じゃありませんでした</td>\n</tr>\n<tr>\n<td>変態</td>\n<td>名词</td>\n<td>非过去</td>\n<td>変態だ</td>\n<td>変態です</td>\n<td>変態じゃない</td>\n<td>変態じゃないです；変態じゃありません</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>过去</td>\n<td>変態だった</td>\n<td>変態でした</td>\n<td>変態じゃなかった</td>\n<td>変態じゃなかったです；変態じゃありませんでした</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"形容词中顿\"><a class=\"anchor\" href=\"#形容词中顿\">#</a> 形容词中顿</h3>\n<p><strong>一类形容词</strong></p>\n<p><mark>词干 + い  ➡  くて</mark>\t或\t<mark>词干 + い  ➡  く</mark>（书面语）</p>\n<p>例如：麻衣先輩は可愛くて、優秀です。</p>\n<p><strong>二类形容词</strong></p>\n<p><mark>词干 + で</mark>\t或\t <mark>词干 + に</mark>（书面语）</p>\n<p>例如：麻衣先輩は優秀で、可愛いです。</p>\n<p><strong>形容词做副词</strong></p>\n<p><strong>一类形容词</strong></p>\n<p><mark>词干 + い  ➡  く</mark></p>\n<p>例如：優し<mark>く</mark>教えます</p>\n<p><strong>二类形容词</strong></p>\n<p><mark>词干 + に</mark></p>\n<p>例如：簡単<mark>に</mark>説明します</p>\n<hr />\n<h2 id=\"第1課-ruby李rtりrtrubyさんは-ruby中国人rtちゅうごくじんrtrubyです\"><a class=\"anchor\" href=\"#第1課-ruby李rtりrtrubyさんは-ruby中国人rtちゅうごくじんrtrubyです\">#</a> 第 1 課　&lt;ruby&gt; 李 &lt; rt &gt; り &lt;/rt&gt;&lt;/ruby &gt; さんは　&lt;ruby &gt; 中国人 &lt; rt &gt; ちゅうごくじん &lt;/rt&gt;&lt;/ruby &gt; です</h2>\n<p>日语单词的读音有音读和训读两种音。音读是从中国传过去的，会存在多音字的现象；训读是日本自古以来就有的发音。</p>\n<p>判断句：A は（做助词时读作 wa）B です\t\tA 是 B</p>\n<p>否定句：</p>\n<ul>\n<li>A は B では　ありません\t\tA 不是 B（较为正式）</li>\n<li>A は B じゃないです               A 不是 B（较为随意）</li>\n</ul>\n<p>疑问句：A は B ですか\t\t\tA 是 B 吗？</p>\n<p>日语中的疑问句结尾一般不用问号，而是句号。除非在某些特定语境下不加问号体现不出疑问句的情况下才会加。</p>\n<p>用名词来修饰名词时，中间用 の 来衔接，例如：日本語の本（日语书）</p>\n<p>日语称呼自己时不会用尊称，称呼别人时才会加 さん 这种。</p>\n<p>在两个人面对面交流的时候，基本上是不会出现 私 和 あなた 这两个词的，可以省略。</p>\n<h2 id=\"第2課-これわ-ruby本rtほんrtrubyです\"><a class=\"anchor\" href=\"#第2課-これわ-ruby本rtほんrtrubyです\">#</a> 第 2 課　これわ　&lt;ruby&gt; 本 &lt; rt &gt; ほん &lt;/rt&gt;&lt;/ruby &gt; です</h2>\n<p><strong>代词的用法：これ　それ　あれ</strong></p>\n<ul>\n<li>\n<p>当两个人有一定距离时：</p>\n<ul>\n<li>离说话人近：これ</li>\n<li>离说话人远，离听话人近：それ</li>\n<li>离说话人和听话人都比较远：あれ</li>\n</ul>\n</li>\n<li>\n<p>当两个人比较近时：</p>\n<ul>\n<li>离两个人都比较近：これ</li>\n<li>离两个人有些距离：それ</li>\n<li>离两个人都有些远：あれ</li>\n</ul>\n</li>\n</ul>\n<p><strong>连体词的用法：この　その　あの</strong></p>\n<p>后面必须要接名词</p>\n<p><strong>どれ 和 どちら 的区别</strong></p>\n<ul>\n<li>都表示：哪个？（东西）</li>\n<li>どれ 在三个及以上选一个时用</li>\n<li>どちら 在两个里面选一个时用</li>\n</ul>\n<p>扩展（表地点）：ここ　そこ　あそこ　どこ　用法和区别于上面相似</p>\n<p><strong>说到自己的亲属和别人的亲属时，要用不同的称谓：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">自己的亲属</th>\n<th style=\"text-align:center\">别人的亲属</th>\n<th style=\"text-align:center\">注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 祖 &lt; rt &gt; そ &lt;/rt &gt; 父 &lt; rt &gt; ふ &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">おじいさん</td>\n<td style=\"text-align:center\">祖父 / 外祖父</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 祖 &lt; rt &gt; そ &lt;/rt &gt; 母 &lt; rt &gt; ぼ &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">おばあさん</td>\n<td style=\"text-align:center\">祖母 / 外祖母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 両親 &lt; rt &gt; りょうしん &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">ご &lt;ruby&gt; 両親 &lt; rt &gt; りょうしん &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">父母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 父 &lt; rt &gt; ちち &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">お &lt;ruby&gt; 父 &lt; rt &gt; とう &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">父亲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 母 &lt; rt &gt; はは &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">お &lt;ruby&gt; 母 &lt; rt &gt; かあ &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">母亲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 息子 &lt; rt &gt; むすこ &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">&lt;ruby&gt; 息子 &lt; rt &gt; むすこ &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">儿子</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 娘 &lt; rt &gt; むすめ &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">&lt;ruby&gt; 娘 &lt; rt &gt; むすめ &lt;/rt&gt;&lt;/ruby &gt; さん / お &lt; ruby &gt; 嬢 &lt; rt &gt; じょう &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">女儿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 兄弟 &lt; rt &gt; きょうだい &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">ご &lt;ruby&gt; 兄弟 &lt; rt &gt; きょうだい &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">兄弟 / 兄弟姐妹</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 兄 &lt; rt &gt; あに &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">お &lt;ruby&gt; 兄 &lt; rt &gt; にい &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">哥哥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 姉 &lt; rt &gt; あね &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">お &lt;ruby&gt; 姉 &lt; rt &gt; ねえ &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">姐姐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 弟 &lt; rt &gt; おとうと &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">&lt;ruby&gt; 弟 &lt; rt &gt; おとうと &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">弟弟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;ruby&gt; 妹 &lt; rt &gt; いもうと &lt;/rt&gt;&lt;/ruby&gt;</td>\n<td style=\"text-align:center\">&lt;ruby&gt; 妹 &lt; rt &gt; いもうと &lt;/rt&gt;&lt;/ruby &gt; さん</td>\n<td style=\"text-align:center\">妹妹</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">おじ</td>\n<td style=\"text-align:center\">おじさん</td>\n<td style=\"text-align:center\">伯伯 / 叔叔 / 舅舅 / 姑父</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">おば</td>\n<td style=\"text-align:center\">おばさん</td>\n<td style=\"text-align:center\">伯母 / 婶婶 / 姑姑 / 舅妈</td>\n</tr>\n</tbody>\n</table>\n<p>注意：直接称呼自己的亲属时，如 “お父さん（爸爸）”“パパ（爸爸）” 等，有多种多样的称谓。但称呼弟弟或妹妹时，一般直呼其名。</p>\n<h2 id=\"第3課-ここは-デパートです\"><a class=\"anchor\" href=\"#第3課-ここは-デパートです\">#</a> 第 3 課　ここは　デパートです</h2>\n<p><strong>数字的表达方式：100 以内的数字</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">阿拉伯数字</th>\n<th style=\"text-align:center\">日语写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">れい / ぜろ</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">いち</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">に</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">さん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">し / よん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">ご</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">ろく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">しち / なな</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">はち</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">く / きゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">じゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">じゅういち</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">じゅうに</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">じゅうさん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">じゅうし / じゅうよん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">じゅうご</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">じゅうろく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\">じゅうしち / じゅうなな</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">じゅうはち</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\">じゅうく / じゅうきゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:center\">にじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">さんじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:center\">よんじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">ごじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:center\">ろくじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:center\">ななじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">はちじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:center\">きゅうじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">ひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0.1</td>\n<td style=\"text-align:center\">れいてんいち</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2/3</td>\n<td style=\"text-align:center\">さんぶんのに</td>\n</tr>\n</tbody>\n</table>\n<p><strong>数字的表达方式：100 以上的数字</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">阿拉伯数字</th>\n<th style=\"text-align:center\">日语写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">ひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">200</td>\n<td style=\"text-align:center\">にひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">さんびゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">よんひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">ごひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">600</td>\n<td style=\"text-align:center\">ろっびゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">700</td>\n<td style=\"text-align:center\">ななひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">800</td>\n<td style=\"text-align:center\">はっびゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">900</td>\n<td style=\"text-align:center\">きゅうひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">せん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2000</td>\n<td style=\"text-align:center\">にせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3000</td>\n<td style=\"text-align:center\">さんぜん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4000</td>\n<td style=\"text-align:center\">よんせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5000</td>\n<td style=\"text-align:center\">ごせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6000</td>\n<td style=\"text-align:center\">ろくせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7000</td>\n<td style=\"text-align:center\">ななせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8000</td>\n<td style=\"text-align:center\">はっせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9000</td>\n<td style=\"text-align:center\">きゅうせん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10000</td>\n<td style=\"text-align:center\">いちまん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">100000</td>\n<td style=\"text-align:center\">じゅうまん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000000</td>\n<td style=\"text-align:center\">ひゃくまん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10000000</td>\n<td style=\"text-align:center\">いっせんまん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">100000000</td>\n<td style=\"text-align:center\">いちおく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9002</td>\n<td style=\"text-align:center\">きゅうせん　に</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9020</td>\n<td style=\"text-align:center\">きゅうせん　にじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9200</td>\n<td style=\"text-align:center\">きゅうせん　にひゃく</td>\n</tr>\n</tbody>\n</table>\n<p>ここ　そこ　あそこ　どこ的更礼貌的表达：</p>\n<p>こちら　そちら　あちら　どちら</p>\n<h2 id=\"第4課-ruby部rtへrtrubyruby屋rtやrtrubyに-ruby机rtつくえrtrubyと-いすが-あります\"><a class=\"anchor\" href=\"#第4課-ruby部rtへrtrubyruby屋rtやrtrubyに-ruby机rtつくえrtrubyと-いすが-あります\">#</a> 第 4 課　&lt;ruby&gt; 部 &lt; rt &gt; へ &lt;/rt&gt;&lt;/ruby&gt;&lt;ruby &gt; 屋 &lt; rt &gt; や &lt;/rt&gt;&lt;/ruby &gt; に　&lt;ruby &gt; 机 &lt; rt &gt; つくえ &lt;/rt&gt;&lt;/ruby &gt; と　いすが　あります</h2>\n<p><strong>存在句</strong></p>\n<ol>\n<li>&lt;u&gt; 东西 / 人 &lt;/u&gt;・は・&lt;u &gt; 地点 &lt;/u&gt;・に・&lt;u &gt; あります &lt;/u&gt;/&lt;u &gt; います &lt;/u&gt;　　~ 在～</li>\n<li>&lt;u&gt; 地点 &lt;/u&gt;・に・&lt;u &gt; 东西 &lt;/u&gt;/&lt;u &gt; 人 &lt;/u&gt;・が・&lt;u &gt; ある &lt;/u&gt;/&lt;u &gt; いる &lt;/u&gt;　　　　　~ 有～</li>\n</ol>\n<p>动词原形：いる（用于人 / 动物）\t\tある（用于东西）</p>\n<p>其中 に 在存在句当中，接在地点的后面，表示存在的场所。</p>\n<p>动词 + ます\t\t名词 + です</p>\n<p><strong>“何” 在后面接不同的东西的时候会有不同的读法</strong></p>\n<p>何（なん）ですか</p>\n<p>何（なに）が</p>\n<p><strong>存在句的疑问表达</strong></p>\n<p>&lt;u&gt; 地点 &lt;/u&gt;・に・&lt;u &gt; 何が &lt;/u&gt;・が・&lt;u &gt; あります &lt;/u&gt;/&lt;u &gt; か &lt;/u&gt;\t\t~ 有～吗？</p>\n<p><strong>完全否定句</strong></p>\n<p>疑问词 + も + 否定</p>\n<p><strong>どこにありますか = どこですか</strong></p>\n<h2 id=\"第5課-ruby森rtもりrtrubyさんは-ruby7rtしちrtrubyruby時rtじrtrubyに-起きます\"><a class=\"anchor\" href=\"#第5課-ruby森rtもりrtrubyさんは-ruby7rtしちrtrubyruby時rtじrtrubyに-起きます\">#</a> 第 5 課　&lt;ruby&gt; 森 &lt; rt &gt; もり &lt;/rt&gt;&lt;/ruby &gt; さんは　&lt;ruby&gt;７&lt;rt &gt; しち &lt;/rt&gt;&lt;/ruby&gt;&lt;ruby &gt; 時 &lt; rt &gt; じ &lt;/rt&gt;&lt;/ruby &gt; に　起きます</h2>\n<p><strong>表示日子</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">上上个</th>\n<th style=\"text-align:center\">上个</th>\n<th style=\"text-align:center\">现在</th>\n<th style=\"text-align:center\">下个</th>\n<th style=\"text-align:center\">下下个</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">今（いま）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一昨日（おととい）</td>\n<td style=\"text-align:center\">昨日（きのう）</td>\n<td style=\"text-align:center\">今日（きょう）</td>\n<td style=\"text-align:center\">明日（あした / あす）</td>\n<td style=\"text-align:center\">明後日（あさって）</td>\n<td style=\"text-align:center\">日（にち）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">先々週（せんせんしゅう）</td>\n<td style=\"text-align:center\">先週（せんしゅう）</td>\n<td style=\"text-align:center\">今週（こんしゅう）</td>\n<td style=\"text-align:center\">来週（らいしゅう）</td>\n<td style=\"text-align:center\">再来週（さらいしゅう）</td>\n<td style=\"text-align:center\">週（しゅう）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">先々月（せんせんげつ）</td>\n<td style=\"text-align:center\">先月（せんげつ）</td>\n<td style=\"text-align:center\">今月（こんげつ）</td>\n<td style=\"text-align:center\">来月（らいげつ）</td>\n<td style=\"text-align:center\">再来月（さらいげつ）</td>\n<td style=\"text-align:center\">月（げつ / つき）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一昨年（おととし）</td>\n<td style=\"text-align:center\">去年（きょねん）</td>\n<td style=\"text-align:center\">今年（ことし）</td>\n<td style=\"text-align:center\">来年（らいねん）</td>\n<td style=\"text-align:center\">再来年（さらいねん）</td>\n<td style=\"text-align:center\">年（ねん）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>表示星期</strong></p>\n<table>\n<thead>\n<tr>\n<th>星期一</th>\n<th>星期二</th>\n<th>星期三</th>\n<th>星期四</th>\n<th>星期五</th>\n<th>星期六</th>\n<th>星期日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>月曜日（げつようび）</td>\n<td>火曜日（かようび）</td>\n<td>水曜日（すいようび）</td>\n<td>木曜日（もくようび）</td>\n<td>金曜日（きんようび）</td>\n<td>土曜日（どようび）</td>\n<td>日曜日（にちようび）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>表示早晚</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">早</th>\n<th style=\"text-align:center\">中</th>\n<th style=\"text-align:center\">晚</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">朝（あさ）</td>\n<td style=\"text-align:center\">昼（ひる）</td>\n<td style=\"text-align:center\">晩（ばん）/ 夜（よる）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">今朝（けさ）</td>\n<td style=\"text-align:center\">今日（きょう）</td>\n<td style=\"text-align:center\">今晩（こんばん）/ 今夜（こんや）</td>\n</tr>\n</tbody>\n</table>\n<p>午前（ごぜん）\t\t\t\t午後（ごご）</p>\n<p><strong>表示时刻</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">時</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1 時（いちじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2 時（にじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 時（さんじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4 時（よじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5 時（ごじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6 時（ろくじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7 時（しちじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8 時（はちじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9 時（くじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10 時（じゅうじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11 時（じゅういちじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12 時（じゅうにじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">０時（れいじ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">何時（なんじ）</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td style=\"text-align:left\">分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:--------------------------</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1 分（いっぷん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2 分（にふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 分（さんぷん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4 分（よんぷん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5 分（ごふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6 分（ろっぽん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7 分（ななふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8 分（はっぽん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9 分（きゅうふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10 分（じゅうぷん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11 分（じゅういっぷん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15 分（じゅうごふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30 分（さんじゅうぷん / はん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">45 分（よんじゅうごふん）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">何分（なんぷん）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>表示动作发生的某个时间点</strong></p>\n<ul>\n<li>具体时间名词 + <mark>に</mark> + 动词</li>\n</ul>\n<p>例如：森さんは　七時に　起きます。</p>\n<ul>\n<li>抽象的时间名词是不加 “に” 的</li>\n</ul>\n<p>例如：森さんは、先週　休みました。</p>\n<p><strong>[动] ます /[动] ません /[动] ました /[动] ませんでした</strong></p>\n<p>原型 -&gt; ます型：动词的礼貌体</p>\n<p>肯定地叙述现在的习惯性动作、状态以及未来的动作、状态时，用 “～ます”，其否定形式是 “～ません”。肯定地描述过去的动作时 “ます” 要变成 “ました”，其否定形式是 “ませんでした”。这四种都是礼貌的表达形式。</p>\n<table>\n<thead>\n<tr>\n<th>～ます</th>\n<th>～ません</th>\n<th>～ました</th>\n<th>～ませんでした</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>働きます</td>\n<td>働きません</td>\n<td>働きました</td>\n<td>働きませんでした</td>\n</tr>\n<tr>\n<td>休みます</td>\n<td>休みません</td>\n<td>休みました</td>\n<td>休みませんでした</td>\n</tr>\n<tr>\n<td>起きます</td>\n<td>起きません</td>\n<td>起きました</td>\n<td>起きませんでした</td>\n</tr>\n<tr>\n<td>寝ます</td>\n<td>寝ません</td>\n<td>寝ました</td>\n<td>寝ませんでした</td>\n</tr>\n<tr>\n<td>あります</td>\n<td>ありません</td>\n<td>ありました</td>\n<td>ありませんでした</td>\n</tr>\n</tbody>\n</table>\n<p>疑问句要在句尾加 “か”</p>\n<p>例如：田中さんは　明日　働きます　か。</p>\n<p><strong>[名](时间) から [名](时间) まで [动]</strong></p>\n<p>表示某动作发生再某个期间时，用 “～から　～まで”</p>\n<p>例如：わたしわ　９時から　５時まで　働きます。</p>\n<p>“～から” 和 “～まで” 也可以分别单独使用</p>\n<p><strong>~ は 表示对比强调</strong></p>\n<p>いつもは　七時ごろです。（和平时进行比较，表示平常都是 7 点，但是会有意外的言外之意）</p>\n<h2 id=\"第6課-吉田さんは-来月-ちゅうごくへ-行きます\"><a class=\"anchor\" href=\"#第6課-吉田さんは-来月-ちゅうごくへ-行きます\">#</a> 第 6 課　吉田さんは　来月　ちゅうごくへ　行きます</h2>\n<p><strong>[名](场所) へ [动]</strong></p>\n<p>使用 “行きます” “帰ります” 等表示移动的动词时，移动行为的目的地用助词 “へ（作助词时读作 e）” 表示。</p>\n<p>例如：森さんは　日本　<mark>へ</mark>　帰ります。</p>\n<p><strong>[名](场所) から [动]</strong></p>\n<p>使用移动动词时，移动的起点用助词 “から” 表示。</p>\n<p>例如：李さんは　先月　北京　<mark>から</mark>　来ました。</p>\n<p><strong>と 表示共同做事的对象</strong></p>\n<p>类似英语的 and</p>\n<p>例如：小野さんは　友達　<mark>と</mark>　帰りました。</p>\n<p><strong>[名](场所) から [名](场所) まで [动]</strong></p>\n<p>表示移动的范围时，范围的起点用 “から”，范围的终点用 “まで”。</p>\n<p>例如：森さんは　東京<mark>から</mark>　広島<mark>まで</mark>　新幹線<mark>で</mark>　いきます。</p>\n<p>这里的 “~ で” 在表示乘坐某种交通工具时都可以使用。</p>\n<p><strong>表示月份</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">月</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1 月（いちがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2 月（にがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 月（さんがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4 月（しがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5 月（ごがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6 月（ろくがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7 月（しちがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8 月（はちがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9 月（くがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10 月（じゅうがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11 月（じゅういちがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12 月（じゅうにがつ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">何月（なんがつ）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>表示日期</strong></p>\n<table>\n<thead>\n<tr>\n<th>日曜日</th>\n<th>月曜日</th>\n<th>火曜日</th>\n<th>水曜日</th>\n<th>木曜日</th>\n<th>金曜日</th>\n<th>土曜日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>１</td>\n<td>２</td>\n<td>３</td>\n<td>４</td>\n<td>５</td>\n<td>６</td>\n<td>７</td>\n</tr>\n<tr>\n<td>ついたち</td>\n<td>ふつか</td>\n<td>みっか</td>\n<td>よっか</td>\n<td>いつか</td>\n<td>むいか</td>\n<td>なのか</td>\n</tr>\n<tr>\n<td>８</td>\n<td>９</td>\n<td>１０</td>\n<td>１１</td>\n<td>１２</td>\n<td>１３</td>\n<td>１４</td>\n</tr>\n<tr>\n<td>ようか</td>\n<td>ここのか</td>\n<td>とおか</td>\n<td>じゅういちにち</td>\n<td>じゅうににち</td>\n<td>じゅうさんにち</td>\n<td>じゅうよっか</td>\n</tr>\n<tr>\n<td>１５</td>\n<td>１６</td>\n<td>１７</td>\n<td>１８</td>\n<td>１９</td>\n<td>２０</td>\n<td>２１</td>\n</tr>\n<tr>\n<td>じゅうごにち</td>\n<td>じゅうろくにち</td>\n<td>じゅうしちにち</td>\n<td>じゅうはちにち</td>\n<td>じゅうくにち</td>\n<td>はつか</td>\n<td>にじゅういちにち</td>\n</tr>\n<tr>\n<td>２２</td>\n<td>２３</td>\n<td>２４</td>\n<td>２５</td>\n<td>２６</td>\n<td>２７</td>\n<td>２８</td>\n</tr>\n<tr>\n<td>にじゅうににち</td>\n<td>にじゅうさんにち</td>\n<td>にじゅうよっか</td>\n<td>にじゅうごにち</td>\n<td>にじゅうろくにち</td>\n<td>にじゅうしちにち</td>\n<td>にじゅうはちにち</td>\n</tr>\n<tr>\n<td>２９</td>\n<td>３０</td>\n<td>３１</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>にじゅうくにち</td>\n<td>さんじゅうにち</td>\n<td>さんじゅういちにち</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第7課-李さんは-毎日-コーヒーを-飲みます\"><a class=\"anchor\" href=\"#第7課-李さんは-毎日-コーヒーを-飲みます\">#</a> 第 7 課　李さんは　毎日　コーヒーを　飲みます</h2>\n<h2 id=\"第8課-李さんは-日本語で-手紙を-書きます\"><a class=\"anchor\" href=\"#第8課-李さんは-日本語で-手紙を-書きます\">#</a> 第 8 課　李さんは　日本語で　手紙を　書きます</h2>\n<h2 id=\"第9課-四川料理は-辛いです\"><a class=\"anchor\" href=\"#第9課-四川料理は-辛いです\">#</a> 第 9 課　四川料理は　辛いです</h2>\n<h2 id=\"第10課-京都きょうとの-紅葉もみじは-有名ゆうめいです\"><a class=\"anchor\" href=\"#第10課-京都きょうとの-紅葉もみじは-有名ゆうめいです\">#</a> 第 10 課　京都 (きょうと) の　紅葉 (もみじ) は　有名 (ゆうめい) です</h2>\n<h2 id=\"第11課-小野さんは-歌が-好きです\"><a class=\"anchor\" href=\"#第11課-小野さんは-歌が-好きです\">#</a> 第 11 課　小野さんは　歌が　好きです</h2>\n<p>喜欢 XX = XX が好き = XX のことがすき</p>\n",
            "tags": [
                "Language",
                "Japanese",
                "学习笔记",
                "日本語"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/",
            "url": "http://sakupinera.github.io/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/",
            "title": "GAMES101 -  Animation（动画）",
            "date_published": "2023-09-17T16:00:00.000Z",
            "content_html": "<h1 id=\"animation动画\"><a class=\"anchor\" href=\"#animation动画\">#</a> Animation（动画）</h1>\n<p>这一节涉及到计算机动画相关的知识，我们会讲到动画的历史、一些基本的制作动画的方法、物理模拟一些基本的思想、运动学以及绑骨相关的知识。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113645760.png\" alt=\"image-20230827113645760\" /></p>\n<p>动画，作为一种交流的工具，给别人展示各种各样动起来的东西，并且动画更关注于美学上好不好看。在图形学中，也可以把动画理解成对于建模或者是几何上的拓展，无非就是在不同的时间它们有不同的几何形状，而为了得到这些几何形状，就会想要怎么去做，怎么去计算，算出来之后再在每一帧去播放它对应的图，相当于我们把 3D 的一张图延伸到了时间的维度上面去。动画的形成是由很多的图按顺序、按一定的速度去播放它就可以了，因为人眼有视觉暂留的效应，这也说明了我们不需要在整个时间范围内非常集中的去采样。对于电影来说，每一帧播放 24 张图，也就是 24fps，我们平常播放的一些视频可能是 30fps，对于虚拟现实，为了让人看上去不晕，就需要达到 90fps，这也说明，对于不一样的应用来说它们对动画的要求也是不一样的。</p>\n<h2 id=\"historical-points-in-animation\"><a class=\"anchor\" href=\"#historical-points-in-animation\">#</a> Historical Points in Animation</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113755361.png\" alt=\"image-20230827113755361\" /></p>\n<p>早期的动画是远古的人类在墙壁上画的各种各样不同的图，如果我们把这些图截下来然后按顺序播放，就可以看到一段动画。那时的人类就已经明白，动画无非就是在不同的时间用不同的图，然后把他们播放出来，只不过那时候并没有播放设备而已。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113832960.png\" alt=\"image-20230827113832960\" /></p>\n<p>后来，又有些类似圆盘的物体，通过旋转圆盘，人们可以看到一段循环播放的动画。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113847096.png\" alt=\"image-20230827113847096\" /></p>\n<p>到了科学有了一定发展程度的阶段，人们开始真正发明了电影的技术，不过最早期的电影技术并不是用来娱乐的，而是当作科学的研究设备，例如上面就是用电影去拍一匹奔跑的马，我们可以研究在任何一个时间点下马的四肢是一种什么样的摆放，由此可以把生物学的一些问题给研究明白。只不过随着发展渐渐发现人们非常喜欢看这些动态的东西，于是电影业就慢慢的变成了娱乐业。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113901267.png\" alt=\"image-20230827113901267\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113917986.png\" alt=\"image-20230827113917986\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113929358.png\" alt=\"image-20230827113929358\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113942938.png\" alt=\"image-20230827113942938\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827113957733.png\" alt=\"image-20230827113957733\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114009606.png\" alt=\"image-20230827114009606\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114028130.png\" alt=\"image-20230827114028130\" /></p>\n<h2 id=\"keyframe-animation\"><a class=\"anchor\" href=\"#keyframe-animation\">#</a> Keyframe Animation</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114047218.png\" alt=\"image-20230827114047218\" /></p>\n<p>简单了解了动画的历史之后，接下来我们来看动画是怎么制作出来的。首先我们提到的一种技术就是关键帧动画。关键帧很好理解，观察上面这幅图，这个人物在三个不同的时间有三个不同的动作，通过在这三个动作之间插值去补充过渡的一些动作从而形成一段动画，而那三个定义了动画走向的动作就被称之为 “关键帧”。早期制作关键帧动画是一个费时费力的过程，最厉害的那些艺术家们会画出关键帧，然后再由助手们帮忙把中间的帧给画出来，直到现在漫画家们画出来的那些漫画，如果要做成动画一定也是要投入大量的人力去把中间那些过渡的过程给画出来。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114100808.png\" alt=\"image-20230827114100808\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114119472.png\" alt=\"image-20230827114119472\" /></p>\n<p>对于那些自动进行补帧的动画，关键帧之间的插值就是一门学问，有最最简单的线性插值，而插值怎么样能让动画看起来更自然、更真实就很有讲究了。</p>\n<h2 id=\"physical-simulation\"><a class=\"anchor\" href=\"#physical-simulation\">#</a> Physical Simulation</h2>\n<p>我们刚才说关键帧动画是一种比较简单的做法，中间的过程就是插值，只不过是认为的方式还是自动的方式，更多的情况下人们用的是物理仿真的方式去做的。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114138335.png\" alt=\"image-20230827114138335\" /></p>\n<p>最简单的大家都知道的物理，我们会提到牛顿运动定律。物体有质量 m，应用在物体上有一个力 F，然后这个物体就会获得一个加速度 a，它们之间的关系就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mi>m</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">F=ma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span></span></span></span>。有加速度我们就能算速度，有速度就可以算位置，也就是说我们只要直到了物体上有什么样的力以及它的一些初始的运动条件，我们就能动态的更新这个物体在下一个时刻的位置。物理仿真就是在推导各种不同的物理公式来计算出物体的变化过程。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114206417.png\" alt=\"image-20230827114206417\" /></p>\n<p>一个上抛的小球受到重力会向下掉落，这是一种简单的情况，而对于右边的衣服来说，它是由许多网格形成的，我们可以认为任何一个顶点上它有一个质量，它会受到重力，同时它因为和其他的顶点相连，它也会受到来自其他顶点的各种作用力，虽然它很复杂，但如果我们把所有的力都考虑进去，自然也可以算出它的加速度，算出来之后自然也可以更新它的速度和位置，只要我们能够正确地把它受力的模型给构建出来，这就是物理仿真背后的思想。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114223688.png\" alt=\"image-20230827114223688\" /></p>\n<p>上面这个例子是一个布料的模拟。当人物在运动的时候，衣服也会跟着一起运动。这当然是因为中间会有摩擦力、压力等等各种各样的力在作用。当把各种各样的力都算出来之后自然而然就可以得到正确的结果。如果模拟的不好，会出现穿模的问题。解决这个问题就涉及到碰撞检测的一系列算法。但只要能够正确建立它的物理模型，自然可以通过解一定的方程把它给算出来。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114239475.png\" alt=\"image-20230827114239475\" /></p>\n<p>另一个例子是流体的例子，上面这张图是对水的模拟。看待这种问题通常分两步看，第一步模拟水是怎么运动的，它的水滴以及各个部位是怎样形成的。当我们模拟了它的位置、形状各种东西之后，我们会进行渲染，才能看到它长什么样。通常我们并不会去关心它的渲染应该怎么做，而是去关心例如它水花四溅是怎么模拟出来的。</p>\n<h2 id=\"mass-spring-system-example-of-modeling-a-dynamic-system\"><a class=\"anchor\" href=\"#mass-spring-system-example-of-modeling-a-dynamic-system\">#</a> Mass Spring System:  Example of Modeling a Dynamic System</h2>\n<p>我们既然已经提到了只要正确的建立物体之间的相互作用力，自然而然就可以模拟正确的效果。这里给大家介绍一套最简单且实用的一套系统，叫做质点弹簧系统。下面是质点弹簧系统应用的几个例子。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114308681.png\" alt=\"image-20230827114308681\" /></p>\n<p>上面这个例子是课程的第八次作业 —— 绳子模拟器。我们可以把一根绳子模拟成很多小弹簧连接在一起。之后可以让它在重力的作用下来回摆动、甚至还可以拖动它。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114324378.png\" alt=\"image-20230827114324378\" /></p>\n<p>上面是对头发的模拟。我们这里和上面一样，还是把渲染和物理仿真两个部分分开看。这里我们并不关心怎么才能让头发渲染的真实，而是头发在各种不同的作用力下它会有怎样的变化。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114337130.png\" alt=\"image-20230827114337130\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114356093.png\" alt=\"image-20230827114356093\" /></p>\n<p>质点弹簧系统还可以进行布料模拟。布料本身是由网格来描述的，很自然的就可以用质点弹簧系统来描述它。上面这个例子就说明了，如果对于一块布只要建模的足够好，那么模拟的仿真是完全可以达到以假乱真的效果的。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114410168.png\" alt=\"image-20230827114410168\" /></p>\n<p>现在让我们回到质点弹簧系统上。质点弹簧系统指的是一系列相互连接的质点和弹簧。它的最基础的单元就是一个弹簧左右连接着两个质点。我们先假设一个理想化的弹簧没有长度，它被拉开了多长就表明它会产生多大的力。上图从 a 到 b 的作用力可以通过 b-a 得到的向量乘劲度系数得到，这个定律也叫做胡克定律。由于力的作用是相互的，质点 a 受到向右的力，因此质点 b 受到一个向左的力，它们互为相反。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114423630.png\" alt=\"image-20230827114423630\" /></p>\n<p>前面我们使用的公式很明显存在一个问题，即不存在长度为 0 的弹簧。弹簧在正常情况都应该有一个长度，这个长度叫做 Rest Length（静止长度：指弹簧或其他弹性物体在没有受到外力作用时的自然长度），这里我们表示成 <code>l</code> 。那么我们的公式可以更新成上面这种形式。但是还是存在问题，当弹簧产生力的时候，它会永远的震动下去，因为能量守恒。这里动能和势能永远都在持续一个转换的过程。怎么解决呢？那么我们就加入一个摩擦力，让它能够停下来。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114436574.png\" alt=\"image-20230827114436574\" /></p>\n<p>在这之前我们先引入一个在物理仿真和模拟中经常使用的记法，即在符号上打一个点表示一阶导数，打两个点表示二阶导数。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114448873.png\" alt=\"image-20230827114448873\" /></p>\n<p>我们刚才说弹簧永远都会震动，但我们不希望这样，于是我们就给它加一个摩擦力让它能够停下来，这里我们称之为 damping（阻尼）。既然阻尼会让它停下来，那么这个力作用的方向肯定是和它速度的方向相反的。对于任何一个质点，它的速度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>b</mi><mo>˙</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\dot{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9313em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9313em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.13889em;\"><span class=\"mord\">˙</span></span></span></span></span></span></span></span></span></span> 乘上一个系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">k_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 并且取反作为我们的阻尼力。但是它还是有一个问题，就是它会让所有的运动都停下来。假设我们有一个弹簧左右质点 a 和 b，如果 a 和 b 同步的向右走，会出现弹簧并没有拉伸产生震动，但是最后却会停下来。也就是说，我们描述的这个阻尼只能描述外部的力，描述不了弹簧之间内部的这种力。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114504295.png\" alt=\"image-20230827114504295\" /></p>\n<p>那么怎么办呢？我们刚才提到 a 和 b 同步运动，也就是说其实这个内部的摩擦力应该是和它们之间相对运动有关系。那么，我们首先要考虑的一个东西就是这个内部的摩檫力它要做一个什么事，它最终是希望弹簧会恢复到它最初的长度。也就是说，只要 a 和 b 被拉开了，那么 a 肯定会想办法向 b 方向去靠。因此，如果 a 和 b 之间被拉开了，a 应该会受到一个向右的力，b 应该会受到一个向左的力。以 b 受到的力为例，它可以用上面这个表达式进行表达（红色框的区域代表的是向量点乘，表示的是 a 和 b 之间的相对速度投影在 a 到 b 的方向上的速度大小）。为什么我要要做这个投影呢？因为相对速度本身还解决不了问题，因为有一些速度并不能引起弹簧长度上的改变。例如，当 a 点被固定，让 b 点绕 a 点做圆周运动时，这里就会出现问题，因为这个时候 b 的速度是垂直于弹簧的，这个时候它的速度是绝对不应该引起弹簧本身内部的摩檫力让它损耗后停在它的自然长度上的。因此，我们这里需要做一个点乘，也就是把相对速度分解到沿着 ab 方向，这个方向的相对速度才会对整个弹簧振子系统造成所谓的衰减。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114516695.png\" alt=\"image-20230827114516695\" /></p>\n<p>我们既然已经讨论了一节弹簧连着两个质点的情况，那么我们自然而然就会考虑它们各种各样不同的组合形成的更加复杂的形状。</p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114600590.png\" alt=\"image-20230827114600590\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114626118.png\" alt=\"image-20230827114626118\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114639966.png\" alt=\"image-20230827114639966\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114658023.png\" alt=\"image-20230827114658023\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114713449.png\" alt=\"image-20230827114713449\" /></p>\n<h2 id=\"particle-systems\"><a class=\"anchor\" href=\"#particle-systems\">#</a> Particle Systems</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114731588.png\" alt=\"image-20230827114731588\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114742825.png\" alt=\"image-20230827114742825\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114759007.png\" alt=\"image-20230827114759007\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114811175.png\" alt=\"image-20230827114811175\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114827104.png\" alt=\"image-20230827114827104\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114842865.png\" alt=\"image-20230827114842865\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114907343.png\" alt=\"image-20230827114907343\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114935274.png\" alt=\"image-20230827114935274\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827114952525.png\" alt=\"image-20230827114952525\" /></p>\n<h2 id=\"forward-kinematics\"><a class=\"anchor\" href=\"#forward-kinematics\">#</a> Forward Kinematics</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115015950.png\" alt=\"image-20230827115015950\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115030572.png\" alt=\"image-20230827115030572\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115057455.png\" alt=\"image-20230827115057455\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115108901.png\" alt=\"image-20230827115108901\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115131304.png\" alt=\"image-20230827115131304\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115145254.png\" alt=\"image-20230827115145254\" /></p>\n<h2 id=\"inverse-kinematics\"><a class=\"anchor\" href=\"#inverse-kinematics\">#</a> Inverse Kinematics</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115218570.png\" alt=\"image-20230827115218570\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115232582.png\" alt=\"image-20230827115232582\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115247167.png\" alt=\"image-20230827115247167\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115300214.png\" alt=\"image-20230827115300214\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115319605.png\" alt=\"image-20230827115319605\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115341925.png\" alt=\"image-20230827115341925\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115401444.png\" alt=\"image-20230827115401444\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115416454.png\" alt=\"image-20230827115416454\" /></p>\n<h2 id=\"rigging\"><a class=\"anchor\" href=\"#rigging\">#</a> Rigging</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115438223.png\" alt=\"image-20230827115438223\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115452536.png\" alt=\"image-20230827115452536\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115604503.png\" alt=\"image-20230827115604503\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115624177.png\" alt=\"image-20230827115624177\" /></p>\n<h2 id=\"motion-capture\"><a class=\"anchor\" href=\"#motion-capture\">#</a> Motion Capture</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115646744.png\" alt=\"image-20230827115646744\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115705973.png\" alt=\"image-20230827115705973\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115759914.png\" alt=\"image-20230827115759914\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115818513.png\" alt=\"image-20230827115818513\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115839762.png\" alt=\"image-20230827115839762\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115857030.png\" alt=\"image-20230827115857030\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115916359.png\" alt=\"image-20230827115916359\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115927755.png\" alt=\"image-20230827115927755\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827115948953.png\" alt=\"image-20230827115948953\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120014191.png\" alt=\"image-20230827120014191\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120054158.png\" alt=\"image-20230827120054158\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120111350.png\" alt=\"image-20230827120111350\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120127381.png\" alt=\"image-20230827120127381\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120143309.png\" alt=\"image-20230827120143309\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120209663.png\" alt=\"image-20230827120209663\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120231598.png\" alt=\"image-20230827120231598\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120246270.png\" alt=\"image-20230827120246270\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120301240.png\" alt=\"image-20230827120301240\" /></p>\n<h2 id=\"combating-instability\"><a class=\"anchor\" href=\"#combating-instability\">#</a> Combating Instability</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120321653.png\" alt=\"image-20230827120321653\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120336846.png\" alt=\"image-20230827120336846\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120353844.png\" alt=\"image-20230827120353844\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120407111.png\" alt=\"image-20230827120407111\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120425867.png\" alt=\"image-20230827120425867\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120440748.png\" alt=\"image-20230827120440748\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120456548.png\" alt=\"image-20230827120456548\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120509501.png\" alt=\"image-20230827120509501\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120524627.png\" alt=\"image-20230827120524627\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120536876.png\" alt=\"image-20230827120536876\" /></p>\n<h2 id=\"fluid-simulation\"><a class=\"anchor\" href=\"#fluid-simulation\">#</a> Fluid Simulation</h2>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120600336.png\" alt=\"image-20230827120600336\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120621806.png\" alt=\"image-20230827120621806\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120636895.png\" alt=\"image-20230827120636895\" /></p>\n<p><img src=\"/2023/09/18/computer-graphics/games101/%E5%8A%A8%E7%94%BB/image-20230827120700391.png\" alt=\"image-20230827120700391\" /></p>\n",
            "tags": [
                "Computer-Graphics",
                "GAMES101",
                "学习笔记",
                "CG"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/08/24/game-engine/unity/UI/",
            "url": "http://sakupinera.github.io/2023/08/24/game-engine/unity/UI/",
            "title": "Unity - UI",
            "date_published": "2023-08-23T16:00:00.000Z",
            "content_html": "<h1 id=\"ui\"><a class=\"anchor\" href=\"#ui\">#</a> UI</h1>\n<h2 id=\"gui\"><a class=\"anchor\" href=\"#gui\">#</a> GUI</h2>\n<h3 id=\"gui是什么\"><a class=\"anchor\" href=\"#gui是什么\">#</a> GUI 是什么？</h3>\n<p>全称 即时模式游戏用户交互界面（IMGUI)</p>\n<p>在 Unity 中一般简称为 GUI</p>\n<p>它是一个代码驱动的 UI 系统</p>\n<h3 id=\"gui的主要作用\"><a class=\"anchor\" href=\"#gui的主要作用\">#</a> GUI 的主要作用</h3>\n<ol>\n<li>作为程序员的调试工具，创建游戏内调试工具</li>\n<li>为脚本组件创建自定义检视面板</li>\n<li>创建新的编辑器窗口和工具以拓展 Unity 本身（一般用作内置游戏工具）</li>\n</ol>\n<p>注意：不要用它为玩家制作 UI 功能</p>\n<h3 id=\"gui的工作原理\"><a class=\"anchor\" href=\"#gui的工作原理\">#</a> GUI 的工作原理</h3>\n<p>在继承 MonoBehaviour 的脚本中的特殊函数里</p>\n<p>调用 GUI 提供的方法</p>\n<p>类似生命周期函数</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 在其中书写 GUI 相关代码 即可显示 GUI 内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 先调用的先执行，后面的会覆盖前面的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：</p>\n<ol>\n<li>它每帧执行 相当于是用于专门绘制 GUI 界面的函数</li>\n<li>一般只在其中执行 GUI 相关界面绘制和操作逻辑</li>\n<li>该函数 在 OnDisable 之前 LateUpdate 之后执行</li>\n<li>只要是继承 Mono 的脚本 都可以在 OnGUI 中绘制 GUI</li>\n</ol>\n<h3 id=\"gui-控件绘制的共同点\"><a class=\"anchor\" href=\"#gui-控件绘制的共同点\">#</a> GUI 控件绘制的共同点</h3>\n<ol>\n<li>\n<p>他们都是 GUI 公共类中提供的静态函数 直接调用即可</p>\n</li>\n<li>\n<p>他们的参数都大同小异</p>\n<p>位置参数：Rect 参数 x y 位置 w h 尺寸</p>\n<p>显示文本：string 参数</p>\n<p>图片信息：Texture 参数</p>\n<p>综合信息：GUIContent 参数</p>\n<p>自定义样式：GUIStyle 参数</p>\n</li>\n<li>\n<p>每一种控件都有多种重载，都是各个参数的排列组合。必备的参数内容是位置信息和显示信息</p>\n</li>\n</ol>\n<h3 id=\"文本控件\"><a class=\"anchor\" href=\"#文本控件\">#</a> 文本控件</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> <span class=\"token string\">\"write something...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 贴图</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// GUIContent</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> guiContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获取 Tooltip 信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span>tooltip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"按钮控件\"><a class=\"anchor\" href=\"#按钮控件\">#</a> 按钮控件</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按钮被点击</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>position，guiContent<span class=\"token punctuation\">,</span> guiStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button Clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 长按按钮被点击</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">RepeatButton</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> guiContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repeat Button Clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"多选框和多选框\"><a class=\"anchor\" href=\"#多选框和多选框\">#</a> 多选框和多选框</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 多选框</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 修改固定宽高 fixedWidth 和 fixedHeight</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 修改从 GUIStyle 边缘到內容起始处的空间 padding</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>isSelected <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> isSelected<span class=\"token punctuation\">,</span> <span class=\"token string\">\"开关\"</span><span class=\"token punctuation\">,</span> guiStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 单选框</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 单选框是基于 多选框的实现</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 关键：通过一个 int 标识来决定是否选中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nowSelIndex <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选项一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnowSelIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nowSelIndex <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选项二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    nowSelIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nowSelIndex <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选项三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    nowSelIndex <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"文本框\"><a class=\"anchor\" href=\"#文本框\">#</a> 文本框</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通输入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>text <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 密码输入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>password <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">PasswordField</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"拖动条\"><a class=\"anchor\" href=\"#拖动条\">#</a> 拖动条</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 水平拖动条</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">HorizontalSlider</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> leftValue<span class=\"token punctuation\">,</span> rightValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 竖直拖动条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">VerticalSlider</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> leftValue<span class=\"token punctuation\">,</span> rightValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"图片绘制\"><a class=\"anchor\" href=\"#图片绘制\">#</a> 图片绘制</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ScaleMode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// ScaleAndcrop：也会通过宽高比来计算图片 但是 会进行裁剪</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ScaleToFit：会自动根据宽高比进行计算不会拉变形会一直保持图片完全显示的状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// StretchToFill：始终填充满你传入的 Rect 范围</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//alpha 是用来 控制 图片是否开启透明通道的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//imageAspect：自定义宽高比 如果不填 默认为 e 就会使用 图片原始宽高</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">DrawTexture</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> scaleMode<span class=\"token punctuation\">,</span> alphaBlend<span class=\"token punctuation\">,</span> imageAspect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"框绘制\"><a class=\"anchor\" href=\"#框绘制\">#</a> 框绘制</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Box</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"工具栏和选择网格\"><a class=\"anchor\" href=\"#工具栏和选择网格\">#</a> 工具栏和选择网格</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 工具栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>selected <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> selected<span class=\"token punctuation\">,</span> texts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 工具栏可以帮助我们根据不同的返回索引 来处理不同的逻辑</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 选择网格</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 相对 Toolbar 多了一个参数 xCount 代表水平方向最多显示的按钮数量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>selected <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">SelectionGrid</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> selected<span class=\"token punctuation\">,</span> texts<span class=\"token punctuation\">,</span> xCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"分组\"><a class=\"anchor\" href=\"#分组\">#</a> 分组</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">BeginGroup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// todo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">EndGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于批量控制控件位置</p>\n<p>可以理解为 包裹着的控件加了一个父对象</p>\n<p>可以通过控制分组来控制包裹控件的位置</p>\n<h3 id=\"滚动列表\"><a class=\"anchor\" href=\"#滚动列表\">#</a> 滚动列表</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nowPos <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScrollView</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> scrollPosition<span class=\"token punctuation\">,</span> viewRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// todo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">EndScrollView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"窗口\"><a class=\"anchor\" href=\"#窗口\">#</a> 窗口</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// callback</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// do something...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 如果是拖动窗口需要写下面这个语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 该 API 写在窗口函数中调用 可以让窗口被拖动</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 传入 Rect 参数的重载 作用是决定窗口中哪一部分位置 可以被拖动</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 默认不填 就是无参重载 默认窗口的所有位置都能被拖动</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    GUI<span class=\"token punctuation\">.</span><span class=\"token function\">DragWindow</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 窗口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 第一个参数 id 是窗口的唯一 ID 不要和别的窗口重复</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 委托参数 用于绘制窗口用的函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Window</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> clientRect<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 模态窗口</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 可以让该其它控件不再有用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 你可以理解该窗口在最上层 其它按钮都点击不到了 只能点击该窗口上控件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">ModalWindow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> clientRect<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 拖动窗口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rect <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Window</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>rect <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">ModalWindow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"自定义皮肤样式\"><a class=\"anchor\" href=\"#自定义皮肤样式\">#</a> 自定义皮肤样式</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局颜色</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 全局的着色颜色 影响背景和文本颜色</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GUI<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 文本着色颜色 会和全局颜色相乘</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GUI<span class=\"token punctuation\">.</span>contentColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 背景元素着色颜色 会和全局颜色相乘</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GUI<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 整体皮肤样式 GUISkin</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>GUI<span class=\"token punctuation\">.</span>skin <span class=\"token operator\">=</span> skin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"guilayout\"><a class=\"anchor\" href=\"#guilayout\">#</a> GUILayout</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动布局</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 主要用于进行编辑器开发 用来做游戏 UI 不太合适</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginArea</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// GUILayoutOption 布局选项</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 控件的固定宽高</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Height</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 允许控件的最小宽高</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Minwidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">MinHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 允许控件的最大宽高</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">MaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">MaxHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 允许或禁止宽度 / 高度对齐</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandWidth</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandWidth</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 禁止</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandHeight</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandHeight</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 禁止</span></pre></td></tr></table></figure><h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>缺点：</p>\n<ul>\n<li>重复工作量繁多</li>\n<li>控件绘制相关代码很多</li>\n</ul>\n<p>最大缺点：</p>\n<ul>\n<li>\n<p>必须运行时才能去查看结果</p>\n</li>\n<li>\n<p>不支持分辨率自适应</p>\n</li>\n</ul>\n<p>主要用处：</p>\n<ul>\n<li>用于进行 Unity 内置编辑器、调试工具、编辑工具等等相关开发</li>\n<li>一般不会用它来做游戏 UI</li>\n</ul>\n<h2 id=\"ngui\"><a class=\"anchor\" href=\"#ngui\">#</a> NGUI</h2>\n<h3 id=\"ngui是什么\"><a class=\"anchor\" href=\"#ngui是什么\">#</a> NGUI 是什么？</h3>\n<p>NGUI 全称 下一代用户界面（Next-Gen UI）</p>\n<p>它是第三方提供的 Unity 付费插件</p>\n<p>专门用于制作 Unity 中游戏 UI 的第三方工具</p>\n<p>相对于 GUI 它更适用于制作游戏 UI 功能</p>\n<p>更方便使用，性能和效率更高</p>\n<p>Unity 插件：是一种基于 Unity 规范编写出来的程序，主要用于拓展功能，简单理解就是别人基于 Unity 写好的某种功能代码，我们可以直接用来处理特定的游戏逻辑</p>\n<h3 id=\"ngui的发展史\"><a class=\"anchor\" href=\"#ngui的发展史\">#</a> NGUI 的发展史</h3>\n<p><strong>Unity 最初版本～Unity4.6 版本</strong></p>\n<p>Unity 官方只提供了 GUI 用于游戏 UI 的开发</p>\n<p>所以更为高级和方便的 NGUI 是做 UI 的不二选择</p>\n<p><strong>Unity4.6 版本以后</strong></p>\n<p>Unity 官方招募 NGUI 作者加入 Unity，协助 Unity 开发出 UGUI 系统用于游戏 UI 功能开发</p>\n<p>由于 UGUI 刚推出后功能不够完善，所以经历了较长的过渡期，几乎到 Unity5 的时代才开始正式全面普及</p>\n<h3 id=\"三大基础组件\"><a class=\"anchor\" href=\"#三大基础组件\">#</a> 三大基础组件</h3>\n<h4 id=\"root组件uiroot\"><a class=\"anchor\" href=\"#root组件uiroot\">#</a> Root 组件（UIRoot）</h4>\n<p>Root 是用于分辨率自适应的根对象</p>\n<p>可以设置基本分辨率，相当于设置 UI 显示区域</p>\n<p>并且管理所有 UI 控件的分辨率自适应</p>\n<p>可以简单理解，它管理一个 UI 画布，所有的 UI 都是显示在这个画布上的</p>\n<p>它会管理 UI 画布和不同屏幕分辨率的适应关系</p>\n<p><strong>参数相关</strong></p>\n<p><mark>灵活模式（Flexible）</mark><br />\n在该模式下，UI 都是以像素为基础，100 像素的物体无论在多少分辨率上都是 100 像素。这就意味着，100 像素在分辨率低的屏幕上可能显示正常，但是在高分辨率上就会显得很小。</p>\n<ul>\n<li>Minimum Height\n<ul>\n<li>屏幕高小于该值时，开始按比例缩放</li>\n</ul>\n</li>\n<li>Maximum Height\n<ul>\n<li>屏幕高大于改值时，开始按比例缩放</li>\n</ul>\n</li>\n<li>Shrink Portrait UI\n<ul>\n<li>竖屏时，按宽度来适配</li>\n</ul>\n</li>\n<li>Adjust by DPI\n<ul>\n<li>使用 dpi 做适配计算，建议勾选</li>\n</ul>\n</li>\n</ul>\n<p><mark>约束模式（Constrained）</mark><br />\n该模式下，屏幕按尺寸比例来适配，不管实际屏幕有多大。NGUI 都会通过合适的缩放来适配屏幕。这样在高分辨率上显示的 UI 就会被放大保持原有大小，但有可能会模糊，好处是各设备看到的 UI 和屏幕比例是一样的。</p>\n<ul>\n<li>Content Width\n<ul>\n<li>按照该宽度值适配屏幕</li>\n<li>制作资源时的默认分辨率宽</li>\n</ul>\n</li>\n<li>Content Height\n<ul>\n<li>按照该高度值适配屏幕</li>\n<li>制作资源时的默认分辨率高</li>\n<li>Fit 表示以那个值做适配</li>\n<li>勾选 Width<br />\n 屏幕比例变化时，按照宽度来适配（宽度始终不变）</li>\n<li>勾选 Height<br />\n 屏幕比例变化时，按照高度来适配（高度始终不变）</li>\n<li>两个都勾选<br />\n不会被裁剪，但是有黑边；当适配宽高比大于实际宽高比时，就会按照宽度适配，反之按照高度适配</li>\n<li>如果两个都不勾选<br />\n始终保证屏幕被 UI 填充满；不会有黑边；可能会被裁剪</li>\n</ul>\n</li>\n</ul>\n<p><mark>Constrained On Mobiles（上两种模式的综合体）</mark></p>\n<ul>\n<li>在 PC 和 Mac 等桌面设备上用 Flexible 模式</li>\n<li>在移动设备上用 Constrained 模式</li>\n</ul>\n<h4 id=\"panel组件uipanel\"><a class=\"anchor\" href=\"#panel组件uipanel\">#</a> Panel 组件（UIPanel）</h4>\n<p>它是用于让 UI 元素能够被渲染的关键组件，一般情况下一个面板就需要一个 UIPanel，所有的 UI 元素会依托在离自己最近的 Panel 下。<br />\n<strong>参数相关</strong></p>\n<ul>\n<li>\n<p>Alpha</p>\n<ul>\n<li>控制所有子 UI 元素的透明度</li>\n</ul>\n</li>\n<li>\n<p>Depth</p>\n<ul>\n<li>控制该 Panel 的层级</li>\n<li>层级高的后渲染会把层级低的先渲染的遮挡住</li>\n</ul>\n</li>\n<li>\n<p>Clipping</p>\n<ul>\n<li>裁剪<br />\n None：不处理\t\t正常<br />\n Texture Mask：根据图片信息进行遮罩\t\t比如人物头像<br />\n Soft Clip：自己定范围裁剪\t\t比如拖动框<br />\n Constrain But Don't Clip：约束但不剪裁\t\t不裁剪画面，只限制响应范围<br />\n Sorting Layer：排序层</li>\n</ul>\n</li>\n<li>\n<p>Advanced Options</p>\n<ul>\n<li>渲染相关高级选项</li>\n</ul>\n</li>\n<li>\n<p>锚点设置</p>\n<ul>\n<li>用于分辨率自适应设置大小</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"event-systemuicamera\"><a class=\"anchor\" href=\"#event-systemuicamera\">#</a> Event System（UICamera）</h4>\n<p>主要作用是让摄像机渲染出来的物体能够接收到 NGUI 的事件。大部分设置不需要我们去修改<br />\n<strong>参数相关</strong></p>\n<ul>\n<li>\n<p>Event Type</p>\n<ul>\n<li>事件类型</li>\n<li>决定了脚本如何对鼠标和触屏事件进行响应</li>\n<li>UI 模式，那么他们处理事件的方式是根据组件的深度</li>\n<li>World 模式，那么则会根据距离离主摄像机的远近来进行响应排序</li>\n</ul>\n</li>\n<li>\n<p>2D 和 3D 的区别是，碰撞器是用 3D 碰撞器还是 2D 碰撞器</p>\n</li>\n<li>\n<p>Events go to</p>\n<ul>\n<li>事件通过刚体还是碰撞盒传递</li>\n</ul>\n</li>\n<li>\n<p>Process Events In</p>\n<ul>\n<li>事件更新进度在 Update 中还是 LateUpdate 中</li>\n<li>一般不改，默认在 Update 中</li>\n</ul>\n</li>\n<li>\n<p>Event Mask</p>\n<ul>\n<li>决定哪个游戏对象层级将会接受事件</li>\n</ul>\n</li>\n<li>\n<p>Debug</p>\n<ul>\n<li>是否开启调试模式</li>\n<li>如果开启，可以帮助你在点击时</li>\n<li>判断当前和鼠标事件交互的是什么对象</li>\n<li>能在 Scene 窗口看到信息</li>\n</ul>\n</li>\n<li>\n<p>Command Click</p>\n<ul>\n<li>苹果电脑上是否用 Command 按键模拟右键操作</li>\n</ul>\n</li>\n<li>\n<p>Allow Multi Touch</p>\n<ul>\n<li>是否支持多点触碰</li>\n</ul>\n</li>\n<li>\n<p>Auto Hide Cursor</p>\n<ul>\n<li>当游戏有控制器或者其他输入设备时</li>\n<li>是否自动隐藏光标</li>\n</ul>\n</li>\n<li>\n<p>Sticky Tooltip</p>\n<ul>\n<li>是否使用 tooltip</li>\n</ul>\n</li>\n<li>\n<p>Long Press Tooltip</p>\n<ul>\n<li>是否长按出提示</li>\n</ul>\n</li>\n<li>\n<p>Tooltip Delay</p>\n<ul>\n<li>停留多久出现 tip</li>\n</ul>\n</li>\n<li>\n<p>Raycast Range</p>\n<ul>\n<li>射线长度，一般不修改</li>\n</ul>\n</li>\n<li>\n<p>EventSources</p>\n<ul>\n<li>接收的事件来源\n<ul>\n<li>Mouse    鼠标</li>\n<li>Touch    触摸</li>\n<li>Keyboard    键盘</li>\n<li>Controller    控制器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Thresholds</p>\n<ul>\n<li>调整鼠标事件的点击、拖、轻拍等行为\n<ul>\n<li>Mouse Drag</li>\n<li>Mouse Click</li>\n<li>Touch Drag</li>\n<li>Touch Tap</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Axes and keys</p>\n<ul>\n<li>热键关系，一般不修改</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"图集\"><a class=\"anchor\" href=\"#图集\">#</a> 图集</h3>\n<p>所谓打图集，就是把各个小图片合并成一张大图片<br />\n打图集的主要目的是提高渲染效率</p>\n<h3 id=\"三大基础控件\"><a class=\"anchor\" href=\"#三大基础控件\">#</a> 三大基础控件</h3>\n<h4 id=\"sprite-精灵图片\"><a class=\"anchor\" href=\"#sprite-精灵图片\">#</a> Sprite 精灵图片</h4>\n<h4 id=\"label文本控件\"><a class=\"anchor\" href=\"#label文本控件\">#</a> Label 文本控件</h4>\n<h4 id=\"texture-大图控件\"><a class=\"anchor\" href=\"#texture-大图控件\">#</a> Texture 大图控件</h4>\n<h2 id=\"ugui\"><a class=\"anchor\" href=\"#ugui\">#</a> UGUI</h2>\n<h3 id=\"ugui是什么\"><a class=\"anchor\" href=\"#ugui是什么\">#</a> UGUI 是什么？</h3>\n<p>UGUI 是 Unity 引擎内自带的 UI 系统</p>\n<p>官方称之为：Unity UI 是目前 Unity 商业游戏开发中使用最广泛的 UI 系统开发解决方案</p>\n<p>它是基于 Unity 游戏对象的 UI 系统，只能用来做游戏 UI 功能，不能用于开发 Unity 编辑器中内置的用户界面</p>\n<h3 id=\"六大基础组件\"><a class=\"anchor\" href=\"#六大基础组件\">#</a> 六大基础组件</h3>\n<p>Canvas 对象上依附的：</p>\n<ul>\n<li>Canvas：画布组件，主要用于渲染 UI 控件</li>\n<li>Canvas Scaler：画布分辨率自适应组件，主要用于分辨率自适应</li>\n<li>Graphic Raycaster：射线事件交互组件，主要用于控制射线响应相关</li>\n<li>RectTransform：UI 对象位置锚点控制组件，主要用于控制位置和对其方式</li>\n</ul>\n<p>EventSystem 对象上依附的：</p>\n<ul>\n<li>EventSystem</li>\n<li>Standalone Input Module</li>\n</ul>\n<p>​\t\t玩家输入事件响应系统和独立输入模块组件，主要用于监听玩家操作</p>\n<h3 id=\"canvas\"><a class=\"anchor\" href=\"#canvas\">#</a> Canvas</h3>\n<p>Canvas 的意思是画布</p>\n<p>它是 UGUI 中所有 UI 元素能够被显示的根本</p>\n<p>它主要负责渲染自己的所有 UI 子对象</p>\n<p><mark>如果 UI 控件对象不是 Canvas 的子对象，那么控件将不能被渲染</mark></p>\n<p><mark>我们可以通过修改 Canvas 组件上的参数修改渲染方式</mark></p>\n<p><strong>场景中可以有多个 Canvas 对象</strong></p>\n<p>场景中允许有多个 Canvas 对象</p>\n<p>可以分别管理不同画布的渲染方式，分辨率适应方式等等参数</p>\n<p>如果没有特殊需求，一般情况场景上一个 Canvas 即可</p>\n<p><strong>Canvas 的三种渲染方式</strong></p>\n<p><strong>Screen Space- Overlay</strong>：屏幕空间，覆盖模式，UI 始终在前</p>\n<ul>\n<li>Pixel Perfect：是否开启无锯齿精确渲染 (性能换效果)</li>\n<li>SortOrder：排序层编号（用于控制多个 Canvas 时的渲染先后顺序）</li>\n<li>TargetDisplay：目标设备（在哪个显示设备上显示）</li>\n<li>Additional Shader Channels：其他着色器通道，决定着色器可以读取</li>\n</ul>\n<p><strong>Screen Space-Camera</strong>：屏幕空间，摄像机模式，3D 物体可以显示在 UI 之前</p>\n<ul>\n<li>RenderCamera：用于渲染 UI 的摄像机（如果不设置将类似于覆盖模式）</li>\n<li>Plane Distance：UI 平面在摄像机前方的距离，类似整体 Z 轴的感觉</li>\n<li>Sorting Layer：所在排序层</li>\n<li>Order in Layer：排序层的序号</li>\n</ul>\n<p><strong>World Space</strong>：世界空间，3D 模式，可以把 UI 对象像 3D 物体一样处理，常用于 VR 或者 AR</p>\n<ul>\n<li>Event Camera：用于处理 UI 事件的摄像机（如果不设置，不能正常注册 UI 事件）</li>\n</ul>\n<p><strong>总结</strong></p>\n<ol>\n<li>\n<p>Canvas 组件用来干啥 —— 画布组件，用于渲染显示 UI 控件，UI 控件必须作为子对象</p>\n</li>\n<li>\n<p>场景中可以有多个 Canvas 对象 —— 不同的渲染和分辨率适应方式（不常用）</p>\n</li>\n<li>\n<p>Canvas 组件的 3 种渲染方式</p>\n<p>覆盖模式：UI 始终显示在最前面</p>\n<p>摄像机模式：3D 物体可以显示在 UI 之前</p>\n<p>3D 模式：用于制作 3DUI，在 VR 和 AR 中常用，游戏中的 3D UI 效果才使用</p>\n</li>\n</ol>\n<h3 id=\"canvasscaler\"><a class=\"anchor\" href=\"#canvasscaler\">#</a> CanvasScaler</h3>\n<p>CanvasScaler 意思是<mark>画布缩放控制器</mark></p>\n<p>它是用于<mark>分辨率自适应的组件</mark></p>\n<p>它主要负责在不同分辨率下 UI 控件大小自适应</p>\n<p>它并不负责位置，位置由之后的 RectTransform 组件负责</p>\n<p>它主要提供了三种用于分辨率自适应的模式</p>\n<p>我们可以选择符合我们项目需求的方式进行分辨率自适应</p>\n<p><strong>屏幕分辨率</strong>：Game 窗口中的 Stats 统计数据窗口看到的当前 “屏幕” 分辨率，会<mark>参与分辨率自适应的计算</mark></p>\n<p><strong>参考分辨率</strong>：参考分辨率在缩放模式的宽高模式中出现的参数，<mark>参与分辨率自适应的计算</mark></p>\n<p><strong>画布大小和缩放系数</strong>：选中 Canvas 对象后在 RectTransform 组件中看到的宽高和缩放</p>\n<p><mark>宽高 * 缩放系数 = 屏幕分辨率</mark></p>\n<p><strong>分辨率大小自适应</strong>：通过一定的算法以<mark>屏幕分辨率</mark>和<mark>参考分辨率</mark>参与计算得出<mark>缩放系数</mark>该结果会影响所有 UI 控件的縮放大小</p>\n<p>分辨率大小自适应主要就是通过不同的算法计算出一个缩放系数，用该系数去缩放所有 UI 控件，让其在不同分辨率下达到一个较为理想的显示效果。</p>\n<p>说人话：屏幕大的时候，按钮大，屏幕小的时候，按钮小</p>\n<p><strong>CanvasScaler 的三种适配模式</strong></p>\n<p><mark>Constant Pixel Size（恒定像素模式）</mark>：无论屏幕大小如何，UI 始终保持相同像素大小</p>\n<ul>\n<li>Scale Factor：缩放系数，按此系数缩放画布中的所有 UI 元素</li>\n<li>Reference Pixels Per Unit：单位参考像素，多少像素对应 Unity 中的一个单位（默认一个单位为 100 像素）图片设置中的 Pixels Per Unit 设置，会和该参数一起参与计算</li>\n<li><mark>UI 原始尺寸 = 图片大小（像素）/（Pixels Per Unit / Reference Pixels Per Unit）</mark></li>\n<li>它不会让 UI 控件进行分辨率大小自适应，会让 UI 控件始终保持设置的尺寸大小显示</li>\n<li>一般在进行游戏开发极少使用这种模式，除非通过代码计算来设置缩放系数</li>\n</ul>\n<p><mark>Scale With Screen Size（缩放模式）</mark>：根据屏幕尺寸进行缩放，随着屏幕尺寸放大缩小</p>\n<ul>\n<li>\n<p>Reference Resolution：参考分辨率（美术同学出图的标准分辨率）</p>\n</li>\n<li>\n<p>缩放模式下的所有匹配模式都会基于参考分辨率进行自适应计算</p>\n</li>\n<li>\n<p>Screen Match Mode：屏幕匹配模式，当前屏幕分辨率宽高比不适应参考分辨率时，用于分辨率大小自适应的匹配模式</p>\n<ul>\n<li>\n<p>Expand：水平或垂直拓展画布区域，会根据宽高比的变化来放大缩小画布，可能有黑边</p>\n<ul>\n<li>拓展匹配：将 Canvas Size 进行宽或高扩大，让他高于参考分辨率</li>\n<li>计算公式：\n<ul>\n<li>缩放系数 = Mathf.Min (屏幕宽 / 参考分辨率宽，屏幕高 / 参考分辨率高)</li>\n<li>画布尺寸 = 屏幕尺寸 / 缩放系数</li>\n<li>表现效果：最大程度的缩小 UI 元素，保留 UI 控件所有细节，可能会留黑边</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Shrink：水平或垂直裁剪画布区域，会根据宽高比的变化来放大缩小画布，可能会裁剪</p>\n<ul>\n<li>收缩匹配：将 Canvas Size 进行宽或高收缩，让它低于参考分辨率</li>\n<li>计算公式：\n<ul>\n<li>缩放系数 = Mathf.Max (屏幕宽 / 参考分辨率宽，屏幕高 / 参考分辨率高)</li>\n<li>画布尺寸 = 屏幕尺寸 / 缩放系数</li>\n<li>表现效果：最大程度的放大 UI 元素，让 UI 元素能够填满画面，可能会出现裁剪</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Match Width Or Height：以宽高或者二者的平均值作为参考来缩放画布区域</p>\n<ul>\n<li>\n<p>宽高匹配：以宽高或者二者的某种平均值作为参考来缩放画布</p>\n</li>\n<li>\n<p>Match：确定用于计算的宽高匹配值</p>\n</li>\n<li>\n<p>计算公式描述</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在取平均值之前，我们先取相对宽度和高度的对数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> logWidth <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>屏幕宽<span class=\"token operator\">/</span>参考分辨率宽， <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> logHeight <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>屏幕高<span class=\"token operator\">/</span>参考分辨率高，<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在对数空间中变换是为了获得更好的性能以及更准确的结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> logWeightedAverage <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span>logWidth<span class=\"token punctuation\">,</span> logHeight<span class=\"token punctuation\">,</span> m_MatchWidthOrHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scaleFactor <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> logWeightedAverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img src=\"/2023/08/24/game-engine/unity/UI/image-20230809170326177.png\" alt=\"image-20230809170326177\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><mark>Constant Physical Size（恒定物理模式）</mark>：无论屏幕大小和分辨率如何，UI 元素始终保持相同物理大小</p>\n<ul>\n<li>DPI（Dots Per Inch，每英寸点数）：图像每英寸长度内的像素点数</li>\n<li>Physical Unit：物理单位，使用的物理单位种类</li>\n<li>Fallback Screen DPI：备用 DPI，当找不到设备 DPI 时，使用此值</li>\n<li>Default Sprite DPI：默认图片 DPI</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>单位种类</th>\n<th>与 1 英寸的关系</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centimeters（厘米 cm）</td>\n<td>2.54</td>\n</tr>\n<tr>\n<td>Millimeters（毫米 mm）</td>\n<td>25.4</td>\n</tr>\n<tr>\n<td>Inches（英寸）</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Points（点）</td>\n<td>72</td>\n</tr>\n<tr>\n<td>Picas（皮卡）</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>计算公式：</p>\n<p>根据 DPI 算出新的 Reference Pixels Per Unit（单位参考像素）</p>\n<p>新单位参考像素 = 单位参考像素 * Physical Unit / Default Sprite DPI</p>\n<p>再使用模式一：恒定像素模式的公式进行计算</p>\n<p>原始尺寸 = 图片大小（像素）/（Pixels Per Unit / 新单位参考像素）</p>\n<p><strong>恒定像素模式和恒定物理模式区别</strong></p>\n<p>相同点：他们都不会进行缩放，图片有多大显示多大，使用他们不会进行分辨率大小自适应</p>\n<p>不同点：相同尺寸不同 DPI 设备像素点区别，像素点越多细节越多。同样为 5 像素，DPI 较低的设备上看起来的尺寸可能会大于 DPI 较高的设备，恒定物理模式在不同的 DPI 下的设备上显示同样的物理大小</p>\n<p><mark>World（3D 世界模式）</mark>：当 Canvas 的渲染模式设置为世界空间 3D 渲染模式时，这时 Canvas Scaler 的缩放模式会强制变为 World 3D 世界模式</p>\n<ul>\n<li>Dynamic Pixels Per Unit：UI 中动态创建的位图（例如文本）中，单位像素数（类似密度）</li>\n<li>Reference Pixels Per Unit：单位参考像素，多少像素对应 Unity 中的一个单位（默认一个单位为 100 像素）</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>游戏开发一般使用 Scale With Screen Size 缩放模式</p>\n<p>使用建议：</p>\n<ul>\n<li>\n<p>存在横竖屏切换选择：</p>\n<ul>\n<li>Expand（拓展匹配，有黑边）和 Shrink（收缩匹配，有裁剪）</li>\n</ul>\n</li>\n<li>\n<p>不存在横竖屏切换（定死的横屏或者竖屏游戏）：</p>\n<ul>\n<li>\n<p>Match Width or Height（宽高匹配）</p>\n</li>\n<li>\n<p>横屏游戏 Match = 1</p>\n</li>\n<li>\n<p>竖屏游戏 Match = 0</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"graphic-raycaster\"><a class=\"anchor\" href=\"#graphic-raycaster\">#</a> Graphic Raycaster</h3>\n<p>Graphic Raycaster 意思是图形射线投射器它是用于检测 UI 输入事件的射线发射器</p>\n<p>它主要负责通过射线检测玩家和 UI 元素的交互判断是否点击到了 UI 元素</p>\n<ul>\n<li>Ignore Reversed Graphics：是否忽略反转图形</li>\n<li>Blocking Objects：射线被哪些类型的碰撞器阻挡（在覆盖渲染模式下无效）</li>\n<li>Blocking Mask：射线被哪些层级的碰撞器阻挡（在覆盖渲染模式下无效）</li>\n</ul>\n<h3 id=\"eventsystem\"><a class=\"anchor\" href=\"#eventsystem\">#</a> EventSystem</h3>\n<p>Event System 意思是事件系统，它是用于管理玩家的输入事件并分发给各 UI 控件</p>\n<p>它是事件逻辑处理模块，所有的 UI 事件都通过 EventSystem 组件中轮询检测并做相应的执行</p>\n<p>它类似一个中转站，和许多模块一起共同协作</p>\n<p>如果没有它，所有点击、拖曳等等行为都不会被响应</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>First Selected：首先选择的游戏对象，可以设置游戏一开始的默认选择</li>\n<li>Send Navigation Events：是否允许导航事件（移动 / 按下 / 取消）</li>\n<li>Drag Threshold：拖拽操作的阈值（移动多少像素算拖拽）</li>\n</ul>\n<h3 id=\"standalone-input-module\"><a class=\"anchor\" href=\"#standalone-input-module\">#</a> Standalone Input Module</h3>\n<p>Standalone Input Module 意思是独立输入模块</p>\n<p>它主要针对处理鼠标 / 键盘 / 控制器 / 触屏（新版 Unity）的输入</p>\n<p>输入的事件通过 EventSystem 进行分发</p>\n<p>它依赖于 EventSystem 组件，它们两缺一不可</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Horizontal Axis：水平轴按钮对应的热键名（该名字对应 Input 管理器）</li>\n<li>Vertical Axis：垂直轴按钮对应的热键名（该名字对应 Input 管理器）</li>\n<li>Submit Button：提交（确定）按钮对应的热建名（该名字对应 Input 管理器）</li>\n<li>Cancel Button：取消按钮对应的热建名（该名字对应 Input 管理器）</li>\n<li>Input Actions Per Second：每秒允许键盘 / 控制器输入的数量</li>\n<li>Repeat Delay：每秒输入操作重复率生效前的延迟时间</li>\n<li>ForceModule Active：是否强制模块处于激活状态</li>\n</ul>\n<h3 id=\"recttransform\"><a class=\"anchor\" href=\"#recttransform\">#</a> RectTransform</h3>\n<p>RectTransform 意思是矩形变换</p>\n<p>它继承于 Transform，是专门用于处理 UI 元素位置大小相关的组件</p>\n<p>Transform 组件只处理位置、角度、缩放</p>\n<p>RectTransform 在此基础上加入了矩形相关，将 UI 元素当做一个矩形来处理</p>\n<p>加入了中心点、锚点、长宽等属性</p>\n<p>其目的是更加方便的控制其大小以及分辨率自适应中的位置适应</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Pivot：轴心点（中心点），取值范围 0~1</li>\n<li>Anchors（相对父矩形锚点）：\n<ul>\n<li>Min 是矩形锚点范围 X 和 Y 的最小值</li>\n<li>Max 是矩形锚点范围 X 和 Y 的最大值</li>\n<li>取值范围都是 0~1</li>\n</ul>\n</li>\n<li>Pos (X,Y,Z)：轴心点（中心点）相对锚点的位置</li>\n<li>Width/Height：矩形的宽高</li>\n<li>Left/Top/Right/Bottom：矩形边缘相对于锚点的位置；当锚点分离时会出现这些内容</li>\n<li>Rotation：围绕轴心点旋转的角度</li>\n<li>Scale：缩放大小</li>\n<li><img src=\"/2023/08/24/game-engine/unity/UI/image-20230810092915547.png\" alt=\"image-20230810092915547\" />：Blueprint Mode（蓝图模式)，启用后，编辑旋转和缩放不会影响矩形，只会影响显示内容</li>\n<li><img src=\"/2023/08/24/game-engine/unity/UI/image-20230810092946412.png\" alt=\"image-20230810092946412\" />：Raw Edit Mode（原始编辑模式)，启用后，改变轴心和锚点值不会改变矩形位置</li>\n</ul>\n<h3 id=\"image\"><a class=\"anchor\" href=\"#image\">#</a> Image</h3>\n<p>Image 是图像组件，是 UGUI 中用于显示精灵图片的关键组件</p>\n<p>除了背景图等大图，一般都使用 Image 来显示 UI 中的图片元素</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Source Image：图片来源（图片类型必须是 “精灵” 类型）</li>\n<li>Color：图像的颜色</li>\n<li>Material：图像的材质（一般不修改，会使用 UI 的默认材质）</li>\n<li>Raycast Target：是否作为射线检测的目标（如果不勾选将不会响应射线检测）</li>\n<li>Maskable：是否能被遮罩（之后结合遮罩相关知识点进行讲解）</li>\n<li>Image Type：图片类型\n<ul>\n<li>Simple - 普通模式，均匀缩放整个图片</li>\n<li>Sliced - 切片模式，9 宫格拉伸，只拉伸中央十字区域\n<ul>\n<li>Pixels Per UnitMultiplier：每单位像索乘数</li>\n<li>Fill Center：中心填充</li>\n</ul>\n</li>\n<li>Tiled - 平铺模式，重复平铺中央部分</li>\n<li>Filled - 填充模式\n<ul>\n<li>Fill Method：填充方式</li>\n<li>Fill Origin：填充原点</li>\n<li>Fill Amount：填充量</li>\n<li>Clockwise：顺时针方向</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Use Sprite Mesh：使用精灵网格，勾选的话 Unity 会帮我们生成图片网格</li>\n<li>Preserve Aspect：确保图像保持其现有尺寸</li>\n<li>Set Native Size：设置为图片资源的原始大小</li>\n</ul>\n<h3 id=\"text\"><a class=\"anchor\" href=\"#text\">#</a> Text</h3>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Text：文本显示内容</li>\n<li>Font：字体</li>\n<li>FontStyle：字体样式\n<ul>\n<li>Normal：普通</li>\n<li>Bold：加粗</li>\n<li>Italic：斜体</li>\n<li>Bold And Italic：加粗 + 斜体</li>\n</ul>\n</li>\n<li>Font Size：字体大小</li>\n<li>Line Spacing：行之间的垂直间距</li>\n<li>Rich Text：是否开启富文本</li>\n<li>Alignment：对其方式</li>\n<li>Align By Geometry：使用字形集合形状范围进行水平对其，而不是字形指标</li>\n<li>Horizontal Overflow：处理文本太宽无法放入矩形范围内时的处理方式\n<ul>\n<li>Wrap：包裹模式 - 字体始终在矩形范围内，会自动换行</li>\n<li>Overflow：溢出模式 - 字体可以溢出矩形框</li>\n</ul>\n</li>\n<li>Vertical Overflow：处理文本太高无法放入矩形范围内时的处理方式\n<ul>\n<li>Truncate：截断模式 - 字体始终在矩形范围内，超出部分裁剪</li>\n<li>Overflow：溢出模式 - 字体可以溢出矩形框</li>\n</ul>\n</li>\n<li>Best Fit：忽略字体大小，始终把内容完全显示在矩形框中，会自动调整字体大小\n<ul>\n<li>MinSize：最小多小</li>\n<li>MaxSize：最大多大</li>\n</ul>\n</li>\n</ul>\n<p><strong>富文本</strong></p>\n<ul>\n<li>加粗\n<ul>\n<li>&lt;b&gt; 文本内容 &lt;/b&gt;</li>\n</ul>\n</li>\n<li>斜体\n<ul>\n<li>&lt;i&gt; 文本内容 &lt;/i&gt;</li>\n</ul>\n</li>\n<li>大小\n<ul>\n<li>&lt;size=50&gt; 文本内容 &lt;/size&gt;</li>\n</ul>\n</li>\n<li>颜色\n<ul>\n<li>&lt;color=#ff0000ff&gt; 文本内容 &lt;/size&gt;</li>\n<li>&lt;color=red&gt; 文本内容 &lt;/size&gt;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rawimage\"><a class=\"anchor\" href=\"#rawimage\">#</a> RawImage</h3>\n<p>RawImage 是原始图像组件</p>\n<p>是 UGUI 中用于显示任何纹理图片的关键组件</p>\n<p>它和 Image 的区别是，一般 RawImage 用于显示大图（背景图，不需要打入图集的图片，网络下载的图等等）</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Texture：图像纹理</li>\n<li>UV Rect：图像在 UI 矩形内的偏移和大小\n<ul>\n<li>位置偏移 X 和 Y（取值 0~1）</li>\n<li>大小偏移 W 和 H（取值 0~1）</li>\n<li>改变他们图像边缘将进行拉伸来填充 UV 矩形周围的空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"button\"><a class=\"anchor\" href=\"#button\">#</a> Button</h3>\n<p>Button 是按钮组件，是 UGUI 中用于处理玩家按钮相关交互的关键组件</p>\n<p>默认创建的 Button 由 2 个对象组成</p>\n<p>父对象 ——Button 组件依附对象，同时挂载了一个 Image 组件，作为按钮背景图</p>\n<p>子对象 —— 按钮文本（可选）</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>\n<p>Interactable：是否接受输入</p>\n</li>\n<li>\n<p>Transition：响应用户输入的过渡效果</p>\n<ul>\n<li>None：没有状态变化效果</li>\n<li>ColorTint：用颜色表示不同状态的变化\n<ul>\n<li>TargetGraphic：控制的目标图形</li>\n<li>Normal Color：正常状态颜色</li>\n<li>Highlighted Color：鼠标进入时显示高亮颜色</li>\n<li>Pressed Color：按下颜色</li>\n<li>Selected Color：选中的颜色</li>\n<li>Disabled Color：禁用时的颜色</li>\n<li>Color Multiplier：颜色倍增器，过渡颜色乘以该值</li>\n<li>FadeDuration：衰减持续时间，从一个状态进入另一个状态时需要的时间</li>\n</ul>\n</li>\n<li>Sprite Swap：用图片表示不同状态的变化\n<ul>\n<li>Highlighted Sprite：鼠标进入时图片</li>\n<li>Pressed Sprite：按下时图片</li>\n<li>Selected Color：选中时的颜色</li>\n<li>Disabled Sprite：禁用时显示的图片</li>\n</ul>\n</li>\n<li>Animation：用动画表示不同状态的变化\n<ul>\n<li>Normal Trigger：正常动画触发器</li>\n<li>Highlighted Trigger：鼠标进入状态时触发器</li>\n<li>Pressed Trigger：按下时触发器</li>\n<li>Selected Trigger：选中时触发器</li>\n<li>Disabled Trigger：禁用时触发器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制导航</p>\n<ul>\n<li>None：无键盘导航</li>\n<li>Horizontal：水平导航</li>\n<li>Verticval：垂直导航</li>\n<li>Automatic：自动导航</li>\n<li>Explicit：指定周边控件进行导航</li>\n<li>可以在场景窗口看到导航连线</li>\n</ul>\n</li>\n<li>\n<p>OnClick：单击（按下再抬起）执行的函数列表</p>\n</li>\n</ul>\n<h3 id=\"toggle\"><a class=\"anchor\" href=\"#toggle\">#</a> Toggle</h3>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Interactable：是否接受输入</li>\n<li>Transition：响应用户输入的过渡效果</li>\n<li>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制器导航</li>\n<li>IsOn：当前是否处于打开状态</li>\n<li>Toggle Transition：在开关值变化时的过渡方式\n<ul>\n<li>None：无任何过渡，直接显示隐藏</li>\n<li>Fade：淡入淡出</li>\n<li>Graphic：用于表示选中状态的图片</li>\n<li>Group：单选框分组</li>\n</ul>\n</li>\n<li>OnValueChanged：开关状态变化时执行的函数列表</li>\n</ul>\n<p><strong>ToggleGroup</strong></p>\n<ul>\n<li>Allow Switch Off：是否允许不选中任何一个单选框</li>\n</ul>\n<p>注意：单选框分组组件可以挂载在任何对象上，只需要将其和一组的单选框关联即可</p>\n<h3 id=\"inputfield\"><a class=\"anchor\" href=\"#inputfield\">#</a> InputField</h3>\n<p>InputField 是输入字段组件</p>\n<p>是 UGUI 中用于处理玩家文本输入相关交互的关键组件</p>\n<p>默认创建的 InputField 由 3 个对象组成</p>\n<p>父对象 ——InputField 组件依附对象 以及 同时在其上挂载了一个 Image 作为背景图</p>\n<p>子对象 —— 文本显示组件（必备）、默认显示文本组件（必备）</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Interactable：是否接受输入</li>\n<li>Transition：响应用户输入的过渡效果</li>\n<li>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制器导航</li>\n<li>TextComponent：用于关联显示输入内容的文本组件</li>\n<li>Text：输入框的起始默认值</li>\n<li>Character Limit：可以输入字符长度的最大值</li>\n<li>Content Type：输入的字符类型限制\n<ul>\n<li>Standard：标准模式；可以输入任何字符</li>\n<li>Autocorrected：自动更正模式；跟踪未知单词，向用户建议合适的替换候选词</li>\n<li>Integer Number：整数模式；用户只能输入整数</li>\n<li>Decimal Number：十进制数模式；用于只能输入数字包括小数</li>\n<li>Alphanumeric：字母数字模式；只能输入字母和数字</li>\n<li>Name：名字模式；自动将每个单子首字母大写</li>\n<li>Email Address：邮箱地址模式；允许最多输入一个 @符号组成的字符和数字字符串</li>\n<li>Password：密码模式；用星号隐藏输入的字符，允许使用符号</li>\n<li>Pin：别针模式；用星号隐藏输入的字符，只允许输入整数</li>\n<li>Custom：自定义模式；允许自定义行类型，输入类型，键盘类型和字符验证</li>\n</ul>\n</li>\n<li>Line Type：行类型，定义文本格式\n<ul>\n<li>Single Line：只允许单行显示</li>\n<li>Multi Line Submit：允许使用多行。仅在需要时使用新的一行</li>\n<li>Multi Line NewLine：允许使用多行。用户可以按回车键空行</li>\n</ul>\n</li>\n<li>Placeholder：关联用于显示初始内容文本控件</li>\n<li>Caret Blink Rate：光标闪烁速率</li>\n<li>Caret Width：光标宽</li>\n<li>Custom Caret Color：自定义光标颜色</li>\n<li>Selection Color：批量选中的背景颜色</li>\n<li>Hide Mobile Input：隐藏移动设备屏幕上键盘，仅适用于 IOS</li>\n<li>Read Only：只读，不能改</li>\n<li>Character Limit：可以输入字符长度的最大值</li>\n<li>OnValueChanged：内容改变时执行的函数列表</li>\n<li>OnEndEdit：结束输入时执行的函数列表</li>\n</ul>\n<h3 id=\"slider\"><a class=\"anchor\" href=\"#slider\">#</a> Slider</h3>\n<p>Slider 是滑动条组件，是 UGUI 中用于处理滑动条相关交互的关键组件</p>\n<p>默认创建的 Slider 由 4 组对象组成</p>\n<p>父对象 ——Slider 组件依附的对象</p>\n<p>子对象 —— 背景图、进度图、滑动块三组对象</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Interactable：是否接受输入</li>\n<li>Transition：响应用户输入的过渡效果</li>\n<li>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制器导航</li>\n<li>FillRect：用于填充的进度条图形</li>\n<li>Handle Rect：用于滑动的滑动块图形</li>\n<li>Direction：滑动条值增加的方向\n<ul>\n<li>Left To Right：从左到右</li>\n<li>Right To Left：从右到左</li>\n<li>Bottom To Top：从下到上</li>\n<li>Top To Bottom：从上到下</li>\n</ul>\n</li>\n<li>Min Value 和 Max Value：最小值和最大值，滑动滚动条时值从最小到最大之间变化（左右、上下极值）</li>\n<li>Whole Numbers：是否约束为整数值变化</li>\n<li>Value：当前滑动条代表的数值</li>\n<li>OnValueChanged：滑动条值改变时执行的函数列表</li>\n</ul>\n<h3 id=\"scrollbar\"><a class=\"anchor\" href=\"#scrollbar\">#</a> ScrollBar</h3>\n<p>Scrollbar 是滚动条组件</p>\n<p>是 UGUI 中用于处理滚动条相关交互的关键组件</p>\n<p>默认创建的 Scrollbar 由 2 组对象组成</p>\n<p>父对象 ——Scrollbar 组件依附的对象</p>\n<p>子对象 —— 滚动块对象</p>\n<p>一般情况下我们不会单独使用滚动条都是配合 ScrollView 滚动视图来使用</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Interactable：是否接受输入</li>\n<li>Transition：响应用户输入的过渡效果</li>\n<li>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制器导航</li>\n<li>Handle Rect：关联滚动块图形对象</li>\n<li>Direction：滑动条值增加的方向\n<ul>\n<li>Left To Right：从左到右</li>\n<li>Right To Left：从右到左</li>\n<li>Bottom To Top：从下到上</li>\n<li>Top To Bottom：从上到下</li>\n</ul>\n</li>\n<li>Value：滚动条初始位置值（0~1）</li>\n<li>Size：滚动块在条中的比例大小（0~1）</li>\n<li>Number Of Steps：允许可以滚动多少次（不同滚动位置的数量）</li>\n<li>OnValueChanged：滚动条值改变时执行的函数列表</li>\n</ul>\n<h3 id=\"scrollview\"><a class=\"anchor\" href=\"#scrollview\">#</a> ScrollView</h3>\n<p>ScrollRect 是滚动视图组件</p>\n<p>是 UGUI 中用于处理滚动视图相关交互的关键组件</p>\n<p>默认创建的 ScrollRect 由 4 组对象组成</p>\n<p>父对象 ——ScrollRect 组件依附的对象，还有一个 Image 组件作为背景图</p>\n<p>子对象 ——Viewport 控制滚动视图可视范围和内容显示、Scrollbar Horizontal 水平滚动条、Scrollbar Vertical 垂直滚动条</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Content：控制滚动视图显示内容的父对象，它的尺寸有多大，滚动视图就能拖多远</li>\n<li>Horizontal：启用水平滚动</li>\n<li>Vertical：启用垂直滚动</li>\n<li>Movement Type：滚动视图元素的运动类型。主要控制拖动时的反馈效果\n<ul>\n<li>Unrestricted（一般不使用）：不受限制，随便拖动</li>\n<li>Elastic（常用）：回弹效果，当滚出边缘后，会弹回边界\n<ul>\n<li>Elasticity：回弹系数，控制回弹效果。值越大回弹越慢</li>\n</ul>\n</li>\n<li>Clamped：夹紧效果，始终限制在范围内，没有回弹效果</li>\n</ul>\n</li>\n<li>Inertia：移动惯性，如果开启，松开鼠标后会有一定的移动惯性\n<ul>\n<li>Deceleration Rate：减速率（0~1），0 没有惯性，1 不会停止</li>\n</ul>\n</li>\n<li>Scroll Sensitivity：滚轮（鼠标中间）和触摸板（笔记本）的滚动事件敏感性</li>\n<li>Viewport：关联滚动视图内容视口对象</li>\n<li>Horizontal Scrollbar：关联水平滚动条</li>\n<li>Visibility：是否在不需要时自动隐藏等模式\n<ul>\n<li>Permanent：一直显示滚动条</li>\n<li>Auto Hide：自动隐藏滚动条</li>\n<li>Auto Hide And Expand Viewport：自动隐藏滚动条并且自动拓展内容视口</li>\n</ul>\n</li>\n<li>Spacing：滚动条和视口之间的间隔空间</li>\n<li>OnValueChanged：滚动视图位置改变时执行的函数列表</li>\n</ul>\n<h3 id=\"dropdown\"><a class=\"anchor\" href=\"#dropdown\">#</a> Dropdown</h3>\n<p>DropDown 是下拉列表（下拉选单）组件</p>\n<p>是 UGUI 中用于处理下拉列表相关交互的关键组件</p>\n<p>默认创建的 DropDown 由 4 组对象组成</p>\n<p>父对象 ——DropDown 组件依附的对象，还有一个 Image 组件作为背景图</p>\n<p>子对象 ——Label 是当前选项描述，Arrow 右侧小箭头，Template 下拉列表选单</p>\n<p><strong>组件参数</strong></p>\n<ul>\n<li>Interactable：是否接受输入</li>\n<li>Transition：响应用户输入的过渡效果</li>\n<li>Navigation：导航模式，可以设置 UI 元素如何在播放模式中控制器导航</li>\n<li>Template：关联下拉列表对象</li>\n<li>Caption Text：关联显示当前选择内容的文本组件</li>\n<li>Caption Image：关联显示当前选择内容的图片组件</li>\n<li>Item Text：关联下拉列表选项用的文本控件</li>\n<li>Item Image：关联下拉列表选项用的图片控件</li>\n<li>Value：当前所选选项的索引值</li>\n<li>Alpha Fade Speed：下拉列表窗口淡入淡出的速度</li>\n<li>Options：存在的选项列表</li>\n<li>OnValueChanged：下拉列表选项改变时执行的函数列表</li>\n</ul>\n<h3 id=\"图集制作\"><a class=\"anchor\" href=\"#图集制作\">#</a> 图集制作</h3>\n<p>UGUI 和 NGUI 使用上最大的不同是 NGUI 使用前就要打图集</p>\n<p>UGUI 可以在之后再打图集，打图集的目的就是减少 DrawCall，提高性能</p>\n<p>就是 CPU 通知 GPU 进行一次渲染的命令</p>\n<p>如果 DC 次数较多会导致游戏卡顿</p>\n<p>我们可以通过打图集，将小图合并成大图，将本应 n 次的 DC 变成 1 次 DC 来提高性能</p>\n<p><strong>在工程设置面板中打开功能</strong></p>\n<p>Edit -&gt; Project Setting -&gt; Editor</p>\n<p>Sprite Packer（精灵包装器，可以通过 unity 自带图集工具生成图集）</p>\n<p>Disabled：默认设置，不会打包图集</p>\n<p>Enabled For Builds (Legacy Sprite Packer)：Unity 仅在构建时打包图集，在编辑模式下不会打包图集</p>\n<p>Always Enabled (Legacy Sprite Packer)：Unity 在构建时打包图集，在编辑模式下运行前会打包图集</p>\n<p>Legacy Sprite Packer：传统打包模式，相对下面两种模式来说，多了一个设置图片之间的间隔距离</p>\n<p>Padding Power：选择打包算法在计算打包的精灵之间以及精灵与生成的图集边缘之间的间隔距离这里的数字，代表 2 的 n 次方</p>\n<p>Enabled For Build：Unity 进在构建时打包图集，在编辑器模式下不会打包</p>\n<p>Always Enabled：Unity 在构建时打包图集，在编辑模式下运行前会打包图集</p>\n<p><strong>参数相关</strong></p>\n<ul>\n<li>Type：图集类型\n<ul>\n<li>Master：主图集\n<ul>\n<li>Include in Build：选中可以在当前构建中包含图集</li>\n<li>Allow Rotation：选中此选项将在打包图集时对图片元素进行旋转，可以最大限度提高组合后的图集密度；注意！！！如果是 UI 图集，请禁用此选项，因为打包时会将场景中 UI 元素旋转</li>\n<li>Tight Packing：选中此选项在打包图集时使用图片轮廓来打包而不是根据矩形，可以最大限度提高组合后的图集密度</li>\n<li>Padding：图集中各图片的间隔像素</li>\n</ul>\n</li>\n<li>Variant：变体类型的图集\n<ul>\n<li>Master Atlas：关联的主图集（图集类型必须是 Master）</li>\n<li>Include in Build：选中可以在当前构建中包含图集</li>\n<li>Scale：设置变体图集的缩放因子（0~1），变体图集的大小是主图集乘以 Scale 的结果</li>\n<li>变体图集的主要作用是以主图集为基础，对它进行缩放产生一个新的图集副本。如果想使用变体图集中的内容，只需要勾选变体图集的 Include in build 选项，而主图集禁用此选项即可</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Read/Write Enabled：允许通过脚本访问纹理数据。如果启用，会创建纹理数据的副本。会让内存翻倍，一般情况下不需要开启它</li>\n<li>Generate Mip Maps：勾选它会生成 Mipmap；Mipmap 是一种性能优化手段，用内存换性能。一般情况下不用开启</li>\n<li>sRGB：启用此属性可指定将纹理存储在伽马空间中。对于非 HDR 颜色纹理（例如反照率和镜面反射颜色），应始终选中此复选框。如果纹理存储了有特定含义的信息，并且您需要着色器中的确切值（例如，平滑度或金属度），请禁用此属性。默认情况下会启用此属性。</li>\n<li>Filter Mode：纹理在 3D 变化拉伸时如何进行过滤\n<ul>\n<li>Point：纹理靠近时变为块状</li>\n<li>Bilinear：纹理靠近时变得模糊</li>\n<li>Trilinear：与 Bilinear 类似，但是纹理在不同的 MIP 级别之间模糊</li>\n</ul>\n</li>\n<li>Objects for Packing：关联需要打图集的图片们，注意：一定是 Sprite 类型的图片</li>\n<li>Default\n<ul>\n<li>Max Texture Size：纹理的最大尺寸，像素为单位</li>\n<li>Format：指定纹理的内部表示，在不同平台上会有不同的参数</li>\n<li>Compression：纹理压缩类型\n<ul>\n<li>None</li>\n<li>Low Quality</li>\n<li>Normal Quality</li>\n<li>High Quality</li>\n<li>质量越高占用内存越多，不压缩质量最好</li>\n</ul>\n</li>\n<li>Use Crunch Compression：使用 Crunch 压缩，是一种有损压缩格式，压缩耗时长，但是运行时解压速度快</li>\n</ul>\n</li>\n<li>Compressor Quality：压缩质量，质量越高纹理越大，耗时越长</li>\n</ul>\n<h3 id=\"ui事件监听接口\"><a class=\"anchor\" href=\"#ui事件监听接口\">#</a> UI 事件监听接口</h3>\n<p>目前所有的控件都只提供了常用的事件监听列表</p>\n<p>如果想做一些类似长按，双击，拖拽等功能是无法制作的，或者想让 Image 和 Text，RawImage 三大基础控件能够响应玩家输入也是无法制作的</p>\n<p>而事件接口就是用来处理类似问题让所有控件都能够添加更多的事件监听来处理对应的逻辑</p>\n<p><strong>常用事件接口</strong></p>\n<p>IPointerEnterHandler - OnPointerEnter - 当指针进入对象时调用（鼠标进入）</p>\n<p>IPointerExitHandler - OnPointerExit - 当指针退出对象时调用（鼠标离开）</p>\n<p>IPointerDownHandler - OnPointerDown - 在对象上按下指针时调用（按下）</p>\n<p>IPointerUpHandler - OnPointerUp - 松开指针时调用（在指针正在点击的游戏对象上调用）（抬起）</p>\n<p>IPointerClickHandler - OnPointerClick - 在同一对象上按下再松开指针时调用 （点击）</p>\n<p>IBeginDragHandler - OnBeginDrag - 即将开始拖动时在拖动对象上调用（开始拖拽）</p>\n<p>IDragHandler - OnDrag - 发生拖动时在拖动对象上调用（拖拽中）</p>\n<p>IEndDragHandler - OnEndDrag - 拖动完成时在拖动对象上调用（结束拖拽）</p>\n<p><strong>不常用事件接口</strong></p>\n<p>IInitializePotentialDragHandler - OnInitializePotentialDrag - 在找到拖动目标时调用，可用于初始化值</p>\n<p>IDropHandler - OnDrop - 在拖动目标对象上调用</p>\n<p>IScrollHandler - OnScroll - 当鼠标滚轮滚动时调用</p>\n<p>IUpdateSelectedHandler - OnUpdateSelected - 每次勾选时在选定对象上调用</p>\n<p>ISelectHandler - OnSelect - 当对象成为选定对象时调用</p>\n<p>IDeselectHandler - OnDeselect - 取消选择选定对象时调用导航相关</p>\n<p>IMoveHandler - OnMove - 发生移动事件（上、下、左、右等）时调用</p>\n<p>ISubmitHandler - OnSubmit - 按下 Submit 按钮时调用</p>\n<p>ICancelHandler - OnCancel - 按下 Cancel 按钮时调用</p>\n<p><strong>PointerEventData 参数</strong></p>\n<p>父类：BaseEventData</p>\n<p>pointerId：鼠标左右中键点击鼠标的 ID，通过它可以判断右键点击</p>\n<p>position：当前指针位置（屏幕坐标系）</p>\n<p>pressPosition：按下的时候指针的位置</p>\n<p>delta：指针移动增量</p>\n<p>clickCount：连击次数</p>\n<p>clickTime：点击时间</p>\n<p>pressEventCamera：最后一个 OnPointerPress 按下事件关联的摄像机</p>\n<p>enterEvetnCamera：最后一个 OnPointerEnter 进入事件关联的摄像机</p>\n<h3 id=\"eventtrigger\"><a class=\"anchor\" href=\"#eventtrigger\">#</a> EventTrigger</h3>\n<p>事件触发器是 EventTrigger 组件</p>\n<p>它是一个集成了上一节中所有事件接口的脚本</p>\n<p>它可以让我们更方便的为控件添加事件监听</p>\n<h3 id=\"屏幕坐标转ui相对坐标\"><a class=\"anchor\" href=\"#屏幕坐标转ui相对坐标\">#</a> 屏幕坐标转 UI 相对坐标</h3>\n<p>RectTransformUtility 公共类是一个 RectTransform 的辅助类</p>\n<p>主要用于进行一些 坐标的转换等等操作</p>\n<p>其中对我们目前来说最重要的函数是将屏幕空间上的点，转换成 UI 本地坐标下的点</p>\n<p><strong>将屏幕坐标转换为 UI 本地坐标系下的点</strong></p>\n<p>方法：RectTransformUtility.ScreenPointToLocalPointInRectangle</p>\n<p>参数一：相对父对象</p>\n<p>参数二：屏幕点</p>\n<p>参数三：摄像机</p>\n<p>参数四：最终得到的点</p>\n<p>一般配合拖拽事件使用</p>\n<h3 id=\"mask遮罩\"><a class=\"anchor\" href=\"#mask遮罩\">#</a> Mask 遮罩</h3>\n<p>在不改变图片的情况下让图片在游戏中只显示其中的一部分</p>\n<p>实现遮罩效果的关键组件时 Mask 组</p>\n<p>通过在父对象上添加 Mask 组件即可遮罩其子对象</p>\n<p>注意：</p>\n<ol>\n<li>想要被遮罩的 Image 需要勾选 Maskable</li>\n<li>只要父对象添加了 Mask 组件，那么所有的 UI 子对象都会被遮罩</li>\n<li>遮罩父对象图片的制作，不透明的地方显示，透明的地方被遮罩</li>\n</ol>\n<h3 id=\"模型和粒子显示在ui之前\"><a class=\"anchor\" href=\"#模型和粒子显示在ui之前\">#</a> 模型和粒子显示在 UI 之前</h3>\n<p><strong>模型显示在 UI 之前</strong></p>\n<p>方法一：：直接用摄像机渲染 3D 物体</p>\n<p>Canvas 的渲染模式只要不是覆盖模式</p>\n<p>摄像机模式 和 世界 (3D) 模式都可以让模型显示在 UI 之前 (z 轴在 UI 元素之前即可)</p>\n<p>注意：</p>\n<ol>\n<li>摄像机模式时建议用专门的摄像机渲染 UI 相关</li>\n<li>面板上的 3D 物体建议也用 UI 摄像机进行渲染</li>\n</ol>\n<p>方法二：将 3D 物体渲染在图片上，通过图片显示</p>\n<p>专门使用一个摄像机渲染 3D 模型，将其渲染内容输出到 Render Texture 上</p>\n<p>类似小地图的制作方式</p>\n<p>再将渲染的图显示在 UI 上</p>\n<p>该方式不管 Canvas 的渲染模式是哪种都可以使用</p>\n<p><strong>粒子特效显示在 UI 之前</strong></p>\n<p>粒子特效的显示和 3D 物体类似</p>\n<p>注意：在摄像机模式下时可以在粒子组件的 Renderer 相关参数中改变排序层，让粒子特效始终显示在其之前不受 z 轴影响</p>\n<h3 id=\"异形按钮\"><a class=\"anchor\" href=\"#异形按钮\">#</a> 异形按钮</h3>\n<p>图片形状不是传统矩形的按钮</p>\n<p><strong>让异形按钮能够准确点击</strong></p>\n<p>方法一：通过添加子对象的形式</p>\n<p>按钮之所以能够响应点击，主要是根据图片矩形范围进行判断的</p>\n<p>它的范围判断是自下而上的，意思是如果有子对象图片，子对象图片的范围也会算为可点击范围</p>\n<p>那么我们就可以用多个透明图拼凑不规则图形作为按钮子对象用于进行射线检测</p>\n<p>方法二：通过代码改变图片的透明度响应阈值</p>\n<ol>\n<li>第一步：修改图片参数，开启 Read/write Enabled 开关</li>\n<li>第二步：通过代码修改图片的响应阈值</li>\n</ol>\n<p>该参数含义：指定一个像索必须具有的最小 alpha 值，以便能够认为射线命中了图片</p>\n<p>说人话：当像素点 alpha 值小于了该值，就不会被射线检测了</p>\n<h3 id=\"自动布局组件\"><a class=\"anchor\" href=\"#自动布局组件\">#</a> 自动布局组件</h3>\n<p>虽然 UGUI 的 RectTransform 已经非常方便的可以帮助我们快速布局</p>\n<p>但 UGUI 中还提供了很多可以帮助我们对 UI 控件进行自动布局的组件</p>\n<p>他们可以帮助我们自动的设置 UI 控件的位置和大小等</p>\n<p>自动布局的工作方式一般是：<mark>自动布局控制组件 + 布局元素 = 自动布局</mark></p>\n<p>自动布局控制组件：Unity 提供了很多用于自动布局的管理性质的组任用于布局</p>\n<p>布局元素：具备布局属性的对象们，这里主要是指具备 RectTransform 的 UI 组件</p>\n<p><strong>布局元素的布局属性</strong></p>\n<p>要参与自动布局的布局元素必须包含布局属性</p>\n<p>布局属性主要有以下几条：</p>\n<ul>\n<li>Minmum width：该布局元素应具有的最小宽度</li>\n<li>Minmum height：该布局元素应具有的最小高度</li>\n<li>Preferred width：在分配额外可用宽度之前，此布局元素应具有的宽度</li>\n<li>Preferred height：在分配额外可用高度之前，此布局元素应具有的高度</li>\n<li>Flexible width：此布局元素应相对于其同级而填充的额外可用宽度的相对量</li>\n<li>Flexible height：此布局元索应相对于其同级而填充的额外可用高度的相对量</li>\n</ul>\n<p>在进行自动布局时都会通过计算布局元素中的这 6 个属性得到控件的大小位置</p>\n<p>在布局时，布局元素大小设置的基本规则是</p>\n<ol>\n<li>首先分配最小大小 Minmum width 和 Minmum height</li>\n<li>如果父类容器中有足够的可用空间，则分配 Preferred width 和 Preferred height</li>\n<li>如果上面两条分配完成后还有额外空间，则分配 Flexible width 和 Flexible height</li>\n</ol>\n<p>一般情况下布局元素的这些属性都是 0，但是特定的 UI 组件依附的对象布局属性会被改变，比如 Image 和 Text</p>\n<p>一般情况下我们不会去手动修改他们，但是如果你有这些需求可以手动添加一个 LayoutElement 组件，可以修改这些布局属性</p>\n<p><strong>水平垂直布局组件</strong></p>\n<p>水平垂直布局组件将子对象并排或者竖直的放在一起</p>\n<p>组件名： Horizontal Layout Group 和 Vertical Layout Group</p>\n<p>参数相关：</p>\n<ul>\n<li>Padding：左右上下边缘偏移位置</li>\n<li>Spacing：子对象之间的间距</li>\n<li>ChildAlignment：九宫格对其方式</li>\n<li>Control Child Size：是否控制子对象的宽高</li>\n<li>Use Child Scale：在设置子对象大小和布局时，是否考虑子对象的缩放</li>\n<li>Child Force Expand：是否强制子对象拓展以填充额外可用空间</li>\n</ul>\n<p><strong>网格布局组件</strong></p>\n<p>网格布局组件将子对象当成一个个的格子设置他们的大小和位置</p>\n<p>组件名： Grid Layout Group</p>\n<p>参数相关：</p>\n<ul>\n<li>Padding：左右上下边缘偏移位置</li>\n<li>Cell Size：每个格子的大小</li>\n<li>Spacing：格子间隔</li>\n<li>Start Corner：第一个元素所在位置（4 个角）</li>\n<li>Start Axis：沿哪个轴放置元素；Horizontal 水平放置满换行，Vertical 竖直放置满换列</li>\n<li>Child Alignment：格子对其方式（9 宫格）</li>\n<li>Constraint：行列约束\n<ul>\n<li>Flexible：灵活模式，根据容器大小自动适应</li>\n<li>Fixed Column Count：固定列数</li>\n<li>Fixed Row Count：固定行数</li>\n</ul>\n</li>\n</ul>\n<p><strong>内容大小适配器</strong></p>\n<p>内容大小适配器它可以自动的调整 RectTransform 的长宽来让组件自动设置大小</p>\n<p>一般在 Text 上使用或者配合其它布局组件一起使用</p>\n<p>组件名： Content Size Fitter</p>\n<p>参数相关：</p>\n<ul>\n<li>Horizontal Fit：如何控制宽度</li>\n<li>Vertical Fit：如何控制高度</li>\n<li>Unconstrained：不根据布局元素伸展</li>\n<li>Min Size：根据布局元素的最小宽高度来伸展</li>\n<li>Preferred Size：根据布局元素的偏好宽度来伸展宽度。</li>\n</ul>\n<p><strong>宽高比适配器</strong></p>\n<ol>\n<li>让布局元素按照一定比例来调整自己的大小</li>\n<li>使布局元素在父对象内部根据父对象大小进行适配</li>\n</ol>\n<p>组件名：Aspect Ratio Fitter</p>\n<p>参数相关：</p>\n<ul>\n<li>Aspect Mode：适配模式，如果调整矩形大小来实施宽高比\n<ul>\n<li>None：不让矩形适应宽高比</li>\n<li>Width Controls Height：根据宽度自动调整高度</li>\n<li>Height Controls Width：根据高度自动调整宽度</li>\n<li>Fit In Parent：自动调整宽度、高度、位置和锚点，使矩形适应父项的矩形，同时保持宽高比，会出现 “黑边”</li>\n<li>Envelope Parent：自动调整宽度、高度、位置和锚点，使矩形覆盖父项的整个区域，同时保持宽高比，会出现 “裁剪”</li>\n<li>Aspect Ratio：宽高比，宽除以高的比值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"canvas-group\"><a class=\"anchor\" href=\"#canvas-group\">#</a> Canvas Group</h3>\n<p>用于整体控制 UI 组件的淡入淡出 或者 整体禁用</p>\n<p>参数相关：</p>\n<ul>\n<li>Alpha：整体透明度控制</li>\n<li>Interactable：整体启用禁用设置</li>\n<li>Blocks Raycasts：整体射线检测设置</li>\n<li>Ignore Parent Groups：是否忽略父级 CanvasGroup 的作用</li>\n</ul>\n",
            "tags": [
                "Game-Engine",
                "Unity",
                "学习笔记",
                "Unity"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/",
            "url": "http://sakupinera.github.io/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/",
            "title": "GAMES101 - Color and Perception（颜色与感知）",
            "date_published": "2023-08-19T16:00:00.000Z",
            "content_html": "<h1 id=\"color-and-perception颜色与感知\"><a class=\"anchor\" href=\"#color-and-perception颜色与感知\">#</a> Color and Perception（颜色与感知）</h1>\n<h2 id=\"physical-basis-of-color\"><a class=\"anchor\" href=\"#physical-basis-of-color\">#</a> Physical Basis of Color</h2>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224320522.png\" alt=\"image-20221105224320522\" /></p>\n<p>牛顿通过实验发现阳光的颜色实际上是各种颜色混合出来的结果。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224403318.png\" alt=\"image-20221105224403318\" /></p>\n<p>为什么光线会被折射成不同的颜色？是因为不同的波长对应有不同的折射率。而任何一种光，一定对应某一种光谱。所谓光谱，指的是光线的能量在不同波长上的分布。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224429971.png\" alt=\"image-20221105224429971\" /></p>\n<p>谱功率密度（SPD），指的是光线在不同的波长上的强度是多少。<img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224457038.png\" alt=\"image-20221105224457038\" /></p>\n<p>通过 SPD，就可以描述光在任何一个波长上的分布是多少。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224521131.png\" alt=\"image-20221105224521131\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224541856.png\" alt=\"image-20221105224541856\" /></p>\n<p>SPD 满足线性的性质。两种光同时照亮一个物体时，SPD 实际就是两种光单独的 SPD 之和。这个不难理解，可以想象一下，当你开了很多盏灯去照亮房间的时候，房间肯定会越来越亮。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224558956.png\" alt=\"image-20221105224558956\" /></p>\n<p>说到现在，我们想要研究的问题是为什么我们能够看到所谓的 “颜色”，而不是光线的光谱。</p>\n<p>颜色其实来源于人的感知。</p>\n<h2 id=\"biological-basis-of-color\"><a class=\"anchor\" href=\"#biological-basis-of-color\">#</a> Biological Basis of Color</h2>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224625122.png\" alt=\"image-20221105224625122\" /></p>\n<p>人的眼睛实际上就是一个摄像机。它有瞳孔，可以调节大小，相当于摄像机的光圈；它有晶状体，通过肌肉的拉拽来调节焦距，相当于摄像机的透镜；它有视网膜，可以感知到光线的进入并成像。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224642985.png\" alt=\"image-20221105224642985\" /></p>\n<p>顺着这个思路，为什么视网膜感知到光线的进入我们就知道看到东西了呢？那是因为，在视网膜上分布有感光细胞。这些细胞，可以分成两种不同的种类，一种是视杆细胞（Rods），另一种是视锥细胞（Cones）。视杆细胞占比较大，用来感知光的强度，不感知颜色。如果只用视感细胞，我们可以得到一张灰度图。视锥细胞占比较少，可以用来感知颜色，视锥细胞内部又分为三种不同类型的细胞。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224706685.png\" alt=\"image-20221105224706685\" /></p>\n<p>这三类分别是 S、M、L 类型的细胞，这三种不同的细胞对不同波长类型的光线响应各不相同。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224722239.png\" alt=\"image-20221105224722239\" /></p>\n<p>不同的人这三种细胞的分布都不一样。上面这张图里每个方块对应一个不同的人，而他们这三种细胞的分布都完全不一样，而且它们的数量上有着严重的个体差异。由此印证了一件事情：颜色是人感知的结果。</p>\n<h2 id=\"tristimulus-theory-of-color\"><a class=\"anchor\" href=\"#tristimulus-theory-of-color\">#</a> Tristimulus Theory of Color</h2>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224755500.png\" alt=\"image-20221105224755500\" /></p>\n<p>我们刚才提到了三种不同的细胞，三种不同的细胞对于光线又是如何感知的呢？刚才我们定义了光在不同波长上的分布，我们又知道某一种细胞对于某一个波长的响应是多少，感知的结果就是这两个函数积分的结果。三种不同的细胞自然就能感应出三种颜色不一样的结果。给定任何一种类型的光线，人们看到的到底是什么？通过响应曲线这种计算方式我们就知道人们看到的颜色实际上是三个数 S、M、L 导致的结果，这三个数才是每个人真正感知到的颜色，而并不是光线本身的 SPD。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224811346.png\" alt=\"image-20221105224811346\" /></p>\n<p>梳理一下人眼看到颜色的过程。光线有光谱，光谱经过人的眼睛反应到视网膜上，然后被三种不同的细胞感知到形成三个数，这三个数送入了人的脑袋中去，然后人就会认为他看到了一种什么样的颜色。</p>\n<h2 id=\"metamerism同色异谱\"><a class=\"anchor\" href=\"#metamerism同色异谱\">#</a> Metamerism（同⾊异谱）</h2>\n<p>既然我们看到的不是光线的光谱，我们看到的是光线的光谱和各种各样光线积分出来的结果，那么会不会有一种情况，就是两种光线它们具有的光谱不相同，可是被我们看到的结果确实相同的？这是可能的，这种现象就叫做同色异谱现象。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224845897.png\" alt=\"image-20221105224845897\" /></p>\n<p>同色异谱的这种现象非常重要，正是因为我们利用了这个现象才能给人们呈现各种不一样的颜色，这个过程叫做颜色的匹配过程，就像是在调和各种不一样的光谱最后得到一种颜色，使得这个颜色和我们最后看到的颜色一样。我们并不需要最后得到的两种光它们的光谱一样，而只需要它们最后能给我们呈现的颜色一样。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224859862.png\" alt=\"image-20221105224859862\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224926585.png\" alt=\"image-20221105224926585\" /></p>\n<p>举个例子来说明同色异谱现象。例如上面左边的图片是用相机拍了一个太阳，右边我们希望在显示器上也可以显示出这种东西出来，那么应该用什么样的颜色呢？那么我们就可以通过不同的调节方式，使得人看上去这两个的颜色是一样的，但是最后混合出来的光谱和之前的完全不一样，这是没有关系的。</p>\n<h2 id=\"color-reproduction-matching\"><a class=\"anchor\" href=\"#color-reproduction-matching\">#</a> Color Reproduction / Matching</h2>\n<p>我们刚才提到同色异谱，意味着给定任何一种颜色我们就可以去匹配它，可以用各种不一样的颜色去混合得到它，为了得到这样一种混合的颜色，那么我们首先就得说：颜色应该如何混合。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105224954815.png\" alt=\"image-20221105224954815\" /></p>\n<p>在计算机的成像系统当中，我们认为这种成像系统叫做加色系统，加色系统指的是我们有几种不同的原色，这里以 RGB 三种颜色为例，给 RGB 这三种不同的颜色乘上某一种强度然后把他们混合起来，混合之后就能得到一种颜色，得到这种颜色用他们各自混合的强度来表示这种颜色，这就是怎么混合。加色系统指的是，在计算机中如果把 RGB 这三种颜色都调成最高，那么得到的颜色就是白色，真实世界中的光也是如此。这和我们画画就不一样，如果我们调和各种不一样的颜料，它会越来越黑，这种系统叫做减色系统，我们这个地方讨论的是加色系统。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225010980.png\" alt=\"image-20221105225010980\" /></p>\n<p>加色系统允许我们通过线性组合这些基本颜色的方式来匹配任何给定的颜色。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225024216.png\" alt=\"image-20221105225024216\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225036843.png\" alt=\"image-20221105225036843\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225048138.png\" alt=\"image-20221105225048138\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225100527.png\" alt=\"image-20221105225100527\" /></p>\n<p>上面的例子就是我们根据调整不同的颜色系数来匹配左边颜色的过程。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225109140.png\" alt=\"image-20221105225109140\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225121478.png\" alt=\"image-20221105225121478\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225132787.png\" alt=\"image-20221105225132787\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225144236.png\" alt=\"image-20221105225144236\" /></p>\n<p>但是有一些情况又很奇怪，有时左边的那种颜色右边怎么混合也混合不出来，那么就把左边这种我们需要混合的颜色给它加一个颜色，这就好像是对应右边给它减去一个颜色一样。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225158202.png\" alt=\"image-20221105225158202\" /></p>\n<p>通过这种方式人们就发明了所谓 CIE RGB 的系统，CIE 定义了一种 RGB 的系统，它要做颜色匹配，给到我们的颜色是一个单波长的，我们要用三种也是不同单一波长的光。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225214589.png\" alt=\"image-20221105225214589\" /></p>\n<p>上面这副图便告诉了我们如何通过混合各种不同的单色光得到任何波长上给定光线的颜色，这样的函数就叫做匹配函数。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225228413.png\" alt=\"image-20221105225228413\" /></p>\n<p>我们刚才说的是匹配任何一种单色的光谱，只在一种波长上有值。如果现在给我们任何一种实际光的光谱，于是我们就需要把每一种波长上需要的 RGB 记录下来，每个波长都考虑进去，自然就是另外一个积分，RGB 这三种不同的积分下来就可以得到三个数，上面的三条线分别告诉了我们三个数的大小。现在，给我们任何一种颜色，都可以用对应大小的 RGB 值来表示，这就是我们 RGB 的系统。</p>\n<h2 id=\"color-spaces\"><a class=\"anchor\" href=\"#color-spaces\">#</a> Color Spaces</h2>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225247788.png\" alt=\"image-20221105225247788\" /></p>\n<p>RGB 这个名字的全称其实叫做 Standardized RGB（sRGB），这种颜色系统广泛的应用于各种成像设备，例如电脑的显示器。它的做法实际就是先做好了某台机器的 RGB 值，之后机器的制作就按照这个方法来制作。RGB 用的很多，但是 RGB 这种颜色空间所能形成的色域是有限的。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225303923.png\" alt=\"image-20221105225303923\" /></p>\n<p>在说 RGB 系统之前，我们先说一下另外一个系统，虽然平常并不常用，但在科学上会更加广泛应用一些，这个系统叫做 CIE XYZ。它同样会定义颜色匹配函数，但它并不是通过实验测出来的颜色匹配系统，而是人造的一套颜色匹配系统。这个颜色系统当中会首先定义好几种不同的颜色曲线，由于它设计的绿色的这条曲线非常均匀，因此正常情况下用这些颜色匹配函数往往匹配出来的各种颜色它的 Y 值一定程度上就可以表示这种颜色的亮度。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225318180.png\" alt=\"image-20221105225318180\" /></p>\n<p>这种色彩空间和 RGB 的区别仅仅是在匹配函数上。有人想要将 XYZ 这种系统能表示的颜色都显示出来，但是 XYZ 这本身是一个三维的，可视化起来并不方便，我们只想显示其中的两维。于是对于任意大小的 XYZ 先做一个归一化，让 x+y+z 加起来等于 1，这样就可以只显示前面两个维度得到的图就可以了，但是为了显示前面两维还是会有 XYZ 这三个数的，既然我们直到 Y 表示的是亮度，那么其实可以把亮度固定成某一个数，之后让 X 和 Z 发生变化，显示的图为 x 和 y 两维，于是可以显示上图右边的图像出来。这么显示是有一定道理的，如果改变 Y，也只不过是改变它们的亮度而已，不影响我们看到各种各样的颜色。我们可以看到最后形成的图像是一个扇面形的形状，这块儿我们看到的区域就叫做色域，也就是所有一个颜色空间所能显示的颜色。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225336193.png\" alt=\"image-20221105225336193\" /></p>\n<p>观察这个色域我们可以发现，它有一个中心，这种中心位置的区域呈现出了白色，我们知道白色是由各种各样的颜色混合出来的，所以我们说白色是最不纯的颜色，而纯的颜色都在上面图像的边界上，算是单色的一种感觉。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225356926.png\" alt=\"image-20221105225356926\" /></p>\n<p>难道不同的颜色空间表示的颜色范围是不一样的吗？答案是确实如此。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225410795.png\" alt=\"image-20221105225410795\" /></p>\n<p>我们会发现，对于 sRGB 来说，其实它仅仅只能表示上面很小的一个三角形的区域，它表示不了 XYZ 这么大的一个色域，也还有其他各种各样神奇的色彩空间，它们能够表示出的颜色也各不相同，通过观察上面这张图便可以看出来。</p>\n<h2 id=\"perceptually-organized-color-spaces\"><a class=\"anchor\" href=\"#perceptually-organized-color-spaces\">#</a> Perceptually Organized Color Spaces</h2>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225442143.png\" alt=\"image-20221105225442143\" /></p>\n<p>除了上面说的几种色彩空间，还有一种色彩空间叫做 HSV，它被广泛使用于 “颜色拾取器”。它允许我们选择不同的 Hue（色调），还可以选择各种不同的 Saturation（饱和度），以及 Birightness 或者说是 Value（亮度）。HSV 这种色彩空间就是为了方便艺术家的使用，从上面的图片我们不难发现，色调就是不同类型的颜色，饱和度指的是更接近白色还是更接近颜色本身的纯色，亮度则决定了颜色的明暗程度。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225453134.png\" alt=\"image-20221105225453134\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225506170.png\" alt=\"image-20221105225506170\" /></p>\n<p>还有一种色彩空间叫做 LAB，这个也是一个和感知相关的色彩空间（与 HSV 类似）。从上面的图我们会发现，它定义了三个轴，其中 L 轴表示的是亮度，0 为最暗，100 为最亮；a 轴表示了红和绿颜色之间的渐变；b 轴表示了蓝和黄颜色之间的渐变。在 LAB 这种色彩空间中，认为任何一个轴上的颜色它的极限（两端）都是互补色。黑白为互补色我们很好理解，但是红和绿以及蓝和黄为什么是互补色呢？</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225521817.png\" alt=\"image-20221105225521817\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225540124.png\" alt=\"image-20221105225540124\" /></p>\n<p>这些其实是根据实验得到的结果，其原因是人的大脑本身对于互补色是有一个定义的。平常我们会说深绿、黄绿和蓝绿，但是我们很难去想象有种绿色是偏红的绿色，就是因为红色和绿色差的太远了，以至于它们成为了一对互补色，这是和人脑有关系的。下面的例子便演示了通过人眼的视觉暂留来验证互补色。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225557614.png\" alt=\"image-20221105225557614\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225615691.png\" alt=\"image-20221105225615691\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225628395.png\" alt=\"image-20221105225628395\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225640683.png\" alt=\"image-20221105225640683\" /></p>\n<p>盯着上面图片的第一张图看十秒，然后迅速切换到第二张图，你会发现视觉暂留的颜色就是互补色的颜色。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225657882.png\" alt=\"image-20221105225657882\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225716411.png\" alt=\"image-20221105225716411\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225729910.png\" alt=\"image-20221105225729910\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225753587.png\" alt=\"image-20221105225753587\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225822104.png\" alt=\"image-20221105225822104\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225838606.png\" alt=\"image-20221105225838606\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225854424.png\" alt=\"image-20221105225854424\" /></p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225909109.png\" alt=\"image-20221105225909109\" /></p>\n<p>颜色很多都是相对的，因为颜色本身是人感知的一个结果。你所看到的颜色有多强，这个事情是自己觉得是这么回事，它和实际上可能是相悖的一个结果。</p>\n<p><img data-src=\"/2023/08/20/computer-graphics/games101/%E9%A2%9C%E8%89%B2%E4%B8%8E%E6%84%9F%E7%9F%A5/image-20221105225925286.png\" alt=\"image-20221105225925286\" /></p>\n<p>关于颜色我们还有一个地方没说到，那就是减色系统。减色系统在生活中应用的更加广泛，在各种各样的印刷、打印中用的都是减色系统。减色系统指的是把各种各样的颜色混合在一块儿，其结果会变成黑色。一个典型的减色系统叫做 CMYK 系统，CMYK 指的是 Cyan（蓝绿色）、Magenta（洋红色）、Yellow（黄色）以及 Key（黑色）这四种颜色。通过上面的图我们不难发现 CMY 三色混合可以得到各种各样的颜色，也就是说打印时可以通过混合各种不同颜色的墨水然后调和出各种各样的颜色，同时我们又可以发现，通过混合 CMY 本来就可以得到 Key（黑色），为什么我们还需要黑色？这是因为在印刷上是要考虑成本的，正常情况下打印常常以黑色居多，黑色墨水本身好造比较便宜，而 CMY 这三种颜色的墨水则比较昂贵，再通过混合得到黑色就比较亏，因此，这个系统叫做 CMYK 减色系统。</p>\n",
            "tags": [
                "Computer-Graphics",
                "GAMES101",
                "学习笔记",
                "CG"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "http://sakupinera.github.io/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2023-03-20T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>计算机网络：是一个将分散的、既有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p>\n<p>计算机网络是互连的、自治的计算机集合。</p>\n<p>互连 - 互联互通</p>\n<p>自治 - 无主从关系</p>\n<h3 id=\"计算机网络的功能\"><a class=\"anchor\" href=\"#计算机网络的功能\">#</a> 计算机网络的功能</h3>\n<ol>\n<li>\n<p>数据通信（连通性）</p>\n</li>\n<li>\n<p>资源共享</p>\n</li>\n<li>\n<p>分布式处理</p>\n</li>\n<li>\n<p>提高可靠性</p>\n</li>\n<li>\n<p>负载均衡</p>\n<p>...</p>\n</li>\n</ol>\n<h3 id=\"计算机网路的组成\"><a class=\"anchor\" href=\"#计算机网路的组成\">#</a> 计算机网路的组成</h3>\n<p>组成部分：硬件、软件、协议</p>\n<p>工作方式：</p>\n<ul>\n<li>边缘部分\t用户直接使用：C/S 方式和 P2P 方式</li>\n<li>核心部分    为边缘部分服务</li>\n</ul>\n<p>功能组成：</p>\n<ul>\n<li>通信子网\t实现数据通信</li>\n<li>资源子网    实现资源共享 / 数据处理</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313105131591.png\" alt=\"image-20230313105131591\" /></p>\n<h3 id=\"计算机网络的分类\"><a class=\"anchor\" href=\"#计算机网络的分类\">#</a> 计算机网络的分类</h3>\n<p>按分布范围分：广域网 WAN、城域网 MAN、局域网 WAN、个人区域网 PAN</p>\n<p>按使用者分：公用网、专用网</p>\n<p>按交换技术分：电路交换、报文交换、分组交换</p>\n<p>按拓扑结构分：总线型、星型、环型、网状型</p>\n<p>按传输技术分：</p>\n<ul>\n<li>广播式网络\t共享公共通信信道</li>\n<li>点对点网络    使用分组传输转发和路由选择机制</li>\n</ul>\n<h3 id=\"速率\"><a class=\"anchor\" href=\"#速率\">#</a> 速率</h3>\n<p>速率即数据率或称数据传输率或比特率。</p>\n<h3 id=\"带宽\"><a class=\"anchor\" href=\"#带宽\">#</a> 带宽</h3>\n<p>“带宽” 原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）。</p>\n<p>在计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”。单位是比特每秒。</p>\n<h3 id=\"吞吐量\"><a class=\"anchor\" href=\"#吞吐量\">#</a> 吞吐量</h3>\n<p>表示在单位时间内通过某个网络（或信道、接口）的数据量。</p>\n<p>吞吐量受网络的带宽或网络的额定速率的限制。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313110437696.png\" alt=\"image-20230313110437696\" /></p>\n<h3 id=\"时延\"><a class=\"anchor\" href=\"#时延\">#</a> 时延</h3>\n<p>指数据（报文 / 分组 / 比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫延迟或迟延，单位是 s。</p>\n<p>分为发送时延、传播时延、排队时延（等待输出 / 入链路可用）、处理时延（检错、找出口）。</p>\n<p>发送时延 = 数据长度 / 信道带宽（发送速率）</p>\n<p>传播时延 = 信道长度 / 电磁波在信道上的传播速率</p>\n<h3 id=\"时延带宽积\"><a class=\"anchor\" href=\"#时延带宽积\">#</a> 时延带宽积</h3>\n<p>时延带宽积 = 传播时延 × 带宽</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313102317977.png\" alt=\"image-20230313102317977\" /></p>\n<p>时延带宽积又称为以比特为单位的链路长度。</p>\n<h3 id=\"往返时延rtt\"><a class=\"anchor\" href=\"#往返时延rtt\">#</a> 往返时延 RTT</h3>\n<p>从发送方发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。</p>\n<p>RTT 越大，在收到确认之前，可以发送的数据越多。</p>\n<p>RTT 包括往返传播时延和末端处理时间（指接收方的处理时间）。</p>\n<h3 id=\"利用率\"><a class=\"anchor\" href=\"#利用率\">#</a> 利用率</h3>\n<p>信道利用率：有数据通过的时间 /（有 + 无）数据通过时间</p>\n<p>网络利用率：信道利用率加权平均值</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313103519450.png\" alt=\"image-20230313103519450\" /></p>\n<h3 id=\"isoosi参考模型\"><a class=\"anchor\" href=\"#isoosi参考模型\">#</a> ISO/OSI 参考模型</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313113224560.png\" alt=\"image-20230313113224560\" /></p>\n<p>应用层：所有能和用户交互产生网络流量的程序。典型应用层服务：文件传输（FTP）、电子邮件（SMTP）、万维网（HTTP）。</p>\n<p>表示层：用于处理在两个通信系统中交换信息的表示方式。功能：数据格式变换、数据加密解密、数据的压缩和恢复等。主要协议：JPEG、ASCII。</p>\n<p>会话层：向表示层实体 / 用户进程提供建立连接并在连接上有序地传输数据。这是会话，也是建立同步（SYN）。功能：建立、管理、终止会话、使用校验点可使会话在通信失效时从校验点 / 同步点继续运行通信，实现数据同步。主要协议：ADSP、ASP。</p>\n<p>传输层：负责主机中两个进程的通信，即端到端的通信。传输单位是报文段或用户数据报。功能：可靠传输、不可靠传输、差错控制、流量控制、复用分用。主要协议：TCP、UDP。</p>\n<p>网络层：主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。功能：路由选择、流量控制、差错控制、拥塞控制。主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF。</p>\n<p>数据链路层：主要任务是把网络层传下来的数据报组装成帧。数据链路层 / 链路层的传输单位是帧。功能：成帧（定义帧的开始和结束）、差错控制（帧错 + 位错）、流量控制、访问（接入）控制（控制对信道的访问）。主要协议：SDLC、HDLC、PPP、STP。</p>\n<p>物理层：主要任务是在物理媒体上实现比特流的透明传输。物理层传输单位是比特。功能：定义接口特性、定义传输模式（单工、半双工、双工）、定义传输速率、比特同步、比特编码。主要协议：Rj45、802.3。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313153707601.png\" alt=\"image-20230313153707601\" /></p>\n<h2 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h2>\n<h3 id=\"两种数据的传输方式\"><a class=\"anchor\" href=\"#两种数据的传输方式\">#</a> 两种数据的传输方式</h3>\n<ul>\n<li>串行传输：速度慢、费用低、适合远距离</li>\n<li>并行传输：速度快、费用高、适合近距离</li>\n</ul>\n<h3 id=\"奈氏准则奈奎斯特定理\"><a class=\"anchor\" href=\"#奈氏准则奈奎斯特定理\">#</a> 奈氏准则（奈奎斯特定理）</h3>\n<p>奈氏准则：在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为 2W Baud， W 是信道带宽，单位是 Hz。</p>\n<h3 id=\"香农定理\"><a class=\"anchor\" href=\"#香农定理\">#</a> 香农定理</h3>\n<p>噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比就很重要。信噪比 = 信号的平均功率 / 噪声的平均功率，常记为 S/N，并用分贝 (dB) 作为度量单位。</p>\n<p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p>\n<h3 id=\"基带信号与宽带信号\"><a class=\"anchor\" href=\"#基带信号与宽带信号\">#</a> 基带信号与宽带信号</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230313202249974.png\" alt=\"image-20230313202249974\" /></p>\n<h2 id=\"数据链路层\"><a class=\"anchor\" href=\"#数据链路层\">#</a> 数据链路层</h2>\n<h3 id=\"数据链路层功能概述\"><a class=\"anchor\" href=\"#数据链路层功能概述\">#</a> 数据链路层功能概述</h3>\n<p>数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p>\n<p>功能：</p>\n<ul>\n<li>为网络层提供服务。无确认无连接服务，有确认面向连接服务</li>\n<li>链路管理，即连接的建立、维持、释放（用于面向连接的服务）</li>\n<li>组帧</li>\n<li>流量控制（控制发送方）</li>\n<li>差错控制（帧错 / 位错）</li>\n</ul>\n<h3 id=\"封装成帧\"><a class=\"anchor\" href=\"#封装成帧\">#</a> 封装成帧</h3>\n<p>封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p>\n<p>首部和尾部包含许多的控制信息，他们的一个重要作用：帧定界（确定帧的界限）。</p>\n<p>帧同步：接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</p>\n<h3 id=\"透明传输\"><a class=\"anchor\" href=\"#透明传输\">#</a> 透明传输</h3>\n<p>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就 “看不见” 有什么妨碍数据传输的东西。当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。</p>\n<p>组帧的四种方法：</p>\n<ol>\n<li>字符计数法</li>\n<li>字符 (节) 填充法</li>\n<li>零比特填充法</li>\n<li>违规编码法</li>\n</ol>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314115854229.png\" alt=\"image-20230314115854229\" /></p>\n<h3 id=\"检错编码\"><a class=\"anchor\" href=\"#检错编码\">#</a> 检错编码</h3>\n<ul>\n<li>奇偶校验码</li>\n<li>CRC 循环冗余码</li>\n</ul>\n<h3 id=\"纠错编码\"><a class=\"anchor\" href=\"#纠错编码\">#</a> 纠错编码</h3>\n<ul>\n<li>海明码</li>\n</ul>\n<h3 id=\"链路层的流量控制\"><a class=\"anchor\" href=\"#链路层的流量控制\">#</a> 链路层的流量控制</h3>\n<p>较高的发送速度和较低的接收能力的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p>\n<p>数据链路层的流量控制是点对点的，而传输层的流量控制是端到端的。</p>\n<p>数据链路层流量控制手段：接收方收不下就不回复确认。</p>\n<p>传输层流量控制手段：接收端给发送端一个窗口公告。</p>\n<h4 id=\"流量控制的方法\"><a class=\"anchor\" href=\"#流量控制的方法\">#</a> 流量控制的方法</h4>\n<ul>\n<li>停止等待协议</li>\n<li>滑动窗口协议\n<ul>\n<li>Go-Back-N protocol（GBN）</li>\n<li>Selective Repeat protocol（SR）</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315140255907-1678860176838-1.png\" alt=\"image-20230315140255907\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315140326661.png\" alt=\"image-20230315140326661\" /></p>\n<p>在链路层所讲的这几种流量控制的方法，它们的窗口大小在发送过程中永远都是固定的。</p>\n<p>可靠传输：发送端发啥，接收端收啥。</p>\n<p>流量控制：控制发送速率，使接收方有足够的缓冲空间来接受每一个帧。</p>\n<p>滑动窗口解决的问题：</p>\n<ul>\n<li>流量控制（收不下就不给确认，想发也发不了）</li>\n<li>可靠传输（发送方自动重传）</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315141804540.png\" alt=\"image-20230315141804540\" /></p>\n<p>信道利用率：发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率。</p>\n<p>信道吞吐率 = 信道利用率 * 发送方的发送速率</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315142737768.png\" alt=\"image-20230315142737768\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315143138134.png\" alt=\"image-20230315143138134\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315143332353.png\" alt=\"image-20230315143332353\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315144401220.png\" alt=\"image-20230315144401220\" /></p>\n<p>GBN 协议性能分析：因连续发送数据帧而提高了信道利用率。但是在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315145257047.png\" alt=\"image-20230315145257047\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315145420374.png\" alt=\"image-20230315145420374\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315145650110.png\" alt=\"image-20230315145650110\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315152738401.png\" alt=\"image-20230315152738401\" /></p>\n<p>SR 协议重点总结：</p>\n<ol>\n<li>\n<p>对数据帧逐一确认，收一个确认一个</p>\n</li>\n<li>\n<p>只重传出错帧</p>\n</li>\n<li>\n<p>接收方有缓存</p>\n</li>\n</ol>\n<h3 id=\"传输数据使用的两种链路\"><a class=\"anchor\" href=\"#传输数据使用的两种链路\">#</a> 传输数据使用的两种链路</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315153439811.png\" alt=\"image-20230315153439811\" /></p>\n<h3 id=\"介质访问控制\"><a class=\"anchor\" href=\"#介质访问控制\">#</a> 介质访问控制</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315153749935.png\" alt=\"image-20230315153749935\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230315153919791.png\" alt=\"image-20230315153919791\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316101524783.png\" alt=\"image-20230316101524783\" /></p>\n<h3 id=\"令牌传递协议\"><a class=\"anchor\" href=\"#令牌传递协议\">#</a> 令牌传递协议</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316101349129.png\" alt=\"image-20230316101349129\" /></p>\n<h3 id=\"csma协议\"><a class=\"anchor\" href=\"#csma协议\">#</a> CSMA 协议</h3>\n<p>CS（Carrier Sense）：载波侦听 / 监听，每一个站在<mark>发送数据之前</mark>要检测一下总线上是否有其他计算机在发送数据。</p>\n<p>MA（multiple Access）：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</p>\n<p>协议思想：发送帧之前，监听信道。</p>\n<p>监听结果：</p>\n<ul>\n<li>信道空闲：发送完整帧</li>\n<li>信道忙：推迟发送</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316100118668.png\" alt=\"image-20230316100118668\" /></p>\n<h3 id=\"csmacd协议\"><a class=\"anchor\" href=\"#csmacd协议\">#</a> CSMA/CD 协议</h3>\n<p>载波监听多点接入 / 碰撞检测 CSMA/CD (carrier sense multiple access with collision detection)</p>\n<p>CS：载波侦听 / 监听，每一个站在<mark>发送数据之前</mark>以及<mark>发送数据时</mark>都要检测一下总线上是否有其他计算机在发送数据。</p>\n<p>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。<strong>总线型网络</strong></p>\n<p>CD：碰撞检测（冲突检测），“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。<strong>半双工网络</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316120015171.png\" alt=\"image-20230316120015171\" /></p>\n<p><strong>最小帧长问题</strong>：<img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316155347348.png\" alt=\"image-20230316155347348\" /></p>\n<h3 id=\"csmaca协议\"><a class=\"anchor\" href=\"#csmaca协议\">#</a> CSMA/CA 协议</h3>\n<p>载波监听多点接入 / 碰撞避免 CSMA/CA (carrier sense multiple access with collision avoidance)</p>\n<p>用于无线局域网</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316160408240.png\" alt=\"image-20230316160408240\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316160527615.png\" alt=\"image-20230316160527615\" /></p>\n<h3 id=\"局域网\"><a class=\"anchor\" href=\"#局域网\">#</a> 局域网</h3>\n<p>局域网（Local Area Network)：简称 LAN，是指在某一区域内由多台计算机互联成的计算机组，使用广播信道。</p>\n<p>特点：</p>\n<ul>\n<li>\n<p>覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内。</p>\n</li>\n<li>\n<p>使用专门铺设的传输介质 (双绞线、同轴电缆) 进行联网，数据传输速率高 (10Mb/s~10Gb/s) 。</p>\n</li>\n<li>\n<p>通信延迟时间短，误码率低，可靠性较高。</p>\n</li>\n<li>\n<p>各站为平等关系，共享传输信道。</p>\n</li>\n<li>\n<p>多采用分布式控制和广播式通信，能进行广播和组播。</p>\n</li>\n</ul>\n<p>决定局域网的主要要素为：网络拓扑，传输介质与介质访问控制方法。</p>\n<p>局域网传输介质：</p>\n<ul>\n<li>有线局域网\t常用介质：双绞线、同轴电缆、光纤</li>\n<li>无线局域网    常用介质：电磁波</li>\n</ul>\n<p>局域网介质访问控制方法：</p>\n<ul>\n<li>\n<p>CSMA/CD：常用于总线型局域网，也用于树型网络</p>\n</li>\n<li>\n<p>令牌总线：常用于总线型局域网，也用于树型网络它是把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成一个逻辑环。只有令牌持有者才能控制总线，才有发送信息的权力。</p>\n</li>\n<li>\n<p>令牌环用于环形局域网，如令牌环网</p>\n</li>\n</ul>\n<h3 id=\"ieee-802标准\"><a class=\"anchor\" href=\"#ieee-802标准\">#</a> IEEE 802 标准</h3>\n<p>IEEE 802 系列标准是 IEEE 802 LAN/MAN 标准委员会制定的局域网、城域网技术标准 (1980 年 2 月成立) 。其中最广泛使用的有以太网、令牌环网、无线局域网等。这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230316162056977.png\" alt=\"image-20230316162056977\" /></p>\n<h3 id=\"以太网\"><a class=\"anchor\" href=\"#以太网\">#</a> 以太网</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320150757672.png\" alt=\"image-20230320150757672\" /></p>\n<p><strong>以太网提供无连接、不可靠的服务</strong></p>\n<ul>\n<li>无连接：发送方和接收方之间无 “握手过程”。</li>\n<li>不可靠：不对发送方的数据帧编号，接收方不向发送方进行确认，差错帧直接丢弃，差错纠正由高层负责。</li>\n</ul>\n<p><mark>以太网只实现无差错接受，不实现可靠传输。</mark></p>\n<p>使用集线器的以太网在逻辑上仍是一个总线网，各站共享逻辑上的总线，使用的还是 CSMA/CD 协议。</p>\n<p>以太网拓扑：逻辑上总线型，物理上星型。</p>\n<h3 id=\"10base-t以太网\"><a class=\"anchor\" href=\"#10base-t以太网\">#</a> 10BASE-T 以太网</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320153240845.png\" alt=\"image-20230320153240845\" /></p>\n<h3 id=\"适配器与mac地址\"><a class=\"anchor\" href=\"#适配器与mac地址\">#</a> 适配器与 MAC 地址</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320151833604.png\" alt=\"image-20230320151833604\" /></p>\n<h3 id=\"以太网mac帧\"><a class=\"anchor\" href=\"#以太网mac帧\">#</a> 以太网 MAC 帧</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320153105333.png\" alt=\"image-20230320153105333\" /></p>\n<h3 id=\"高速以太网\"><a class=\"anchor\" href=\"#高速以太网\">#</a> 高速以太网</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320152916966.png\" alt=\"image-20230320152916966\" /></p>\n<h3 id=\"广域网\"><a class=\"anchor\" href=\"#广域网\">#</a> 广域网</h3>\n<p>广域网（WAN, Wide Area Network），通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网的通信子网主要使用分组交换技术。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的局域网或计算机系统互连起来，达到资源共享的目的。如因特网（Internet）是世界范围内最大的广域网。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320154516130.png\" alt=\"image-20230320154516130\" /></p>\n<h3 id=\"ppp协议\"><a class=\"anchor\" href=\"#ppp协议\">#</a> PPP 协议</h3>\n<p>点对点协议 PPP (Point-to-Point Protocol) 是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都使用 PPP 协议。</p>\n<p><mark>只支持全双工链路</mark></p>\n<p><strong>PPP 协议的三个组成部分</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320155656341.png\" alt=\"image-20230320155656341\" /></p>\n<p><strong>PPP 协议的状态图</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320155621013.png\" alt=\"image-20230320155621013\" /></p>\n<p><strong>PPP 协议的帧格式</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320155904411.png\" alt=\"image-20230320155904411\" /></p>\n<h3 id=\"链路层设备\"><a class=\"anchor\" href=\"#链路层设备\">#</a> 链路层设备</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320165739250.png\" alt=\"image-20230320165739250\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320165839205.png\" alt=\"image-20230320165839205\" /></p>\n<p><strong>网桥</strong></p>\n<ul>\n<li>透明网桥：“透明” 指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备 —— 自学习。</li>\n<li>源路由网桥：在发送帧时，把详细的最佳路由信息（路由最少 / 时间最短）放在帧的首部中。方法：通过源站以广播方式向欲通信的目的站发送一个发现帧。</li>\n</ul>\n<p><strong>多接口网桥 —— 以太网交换机</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320170316991.png\" alt=\"image-20230320170316991\" /></p>\n<ul>\n<li>直通式交换机：查完目的地址（6B）就立刻转发。延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li>\n<li>存储转发式交换机：将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃。延迟大，可靠性高，可以支持具有不同速率的端口的交换。</li>\n</ul>\n<h3 id=\"冲突域和广播域\"><a class=\"anchor\" href=\"#冲突域和广播域\">#</a> 冲突域和广播域</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320170606376.png\" alt=\"image-20230320170606376\" /></p>\n<h2 id=\"网络层\"><a class=\"anchor\" href=\"#网络层\">#</a> 网络层</h2>\n<p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。</p>\n<p>功能：</p>\n<ul>\n<li>\n<p>路由选择与分组转发\t最佳路径</p>\n</li>\n<li>\n<p>异构网络互联</p>\n</li>\n<li>\n<p>拥塞控制</p>\n</li>\n</ul>\n<h3 id=\"数据交换方式\"><a class=\"anchor\" href=\"#数据交换方式\">#</a> 数据交换方式</h3>\n<ul>\n<li>电路交换</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320172214246.png\" alt=\"image-20230320172214246\" /></p>\n<ul>\n<li>报文交换</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320172449602.png\" alt=\"image-20230320172449602\" /></p>\n<ul>\n<li>分组交换\n<ul>\n<li>数据报方式</li>\n<li>虚电路方式</li>\n</ul>\n</li>\n</ul>\n<p><strong>数据报方式</strong>为网络层提供无连接服务。</p>\n<p><strong>虚电路方式</strong>为网络层提供连接服务。</p>\n<p>无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同。</p>\n<p>连接服务：首先为分组的传输确定传输路径（建立连接），然后沿该路径（连接）传输系列分组，系列分组传输路径相同，传输结束后拆除连接。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320172646322.png\" alt=\"image-20230320172646322\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320173057839.png\" alt=\"image-20230320173057839\" /></p>\n<h3 id=\"数据报\"><a class=\"anchor\" href=\"#数据报\">#</a> 数据报</h3>\n<p><strong>无连接</strong>：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同。</p>\n<p><strong>每个分组携带源和目的地址</strong></p>\n<p><strong>路由器根据分组的目的地址转发分组</strong>：基于路由协议 / 算法构建转发表；检索转发表；每个分组独立选路。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320174144644.png\" alt=\"image-20230320174144644\" /></p>\n<h3 id=\"tcpip协议栈\"><a class=\"anchor\" href=\"#tcpip协议栈\">#</a> TCP/IP 协议栈</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320175524465.png\" alt=\"image-20230320175524465\" /></p>\n<h3 id=\"ip数据报格式\"><a class=\"anchor\" href=\"#ip数据报格式\">#</a> IP 数据报格式</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320180333965.png\" alt=\"image-20230320180333965\" /></p>\n<h3 id=\"最大传送单元mtu\"><a class=\"anchor\" href=\"#最大传送单元mtu\">#</a> 最大传送单元 MTU</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320180516842.png\" alt=\"image-20230320180516842\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320180815607.png\" alt=\"image-20230320180815607\" /></p>\n<h3 id=\"分类的ip地址\"><a class=\"anchor\" href=\"#分类的ip地址\">#</a> 分类的 IP 地址</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320184446898.png\" alt=\"image-20230320184446898\" /></p>\n<h3 id=\"特定ip地址\"><a class=\"anchor\" href=\"#特定ip地址\">#</a> 特定 IP 地址</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320182319925.png\" alt=\"image-20230320182319925\" /></p>\n<h3 id=\"私有ip地址\"><a class=\"anchor\" href=\"#私有ip地址\">#</a> 私有 IP 地址</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320183537156.png\" alt=\"image-20230320183537156\" /></p>\n<p>路由器对目的地址是私有 IP 地址的数据报一律不进行转发。</p>\n<h3 id=\"网络地址转换nat\"><a class=\"anchor\" href=\"#网络地址转换nat\">#</a> 网络地址转换（NAT）</h3>\n<p>网络地址转换 NAT (Network Address Translation) ：在专用网连接到因特网的路由器上安装 NAT 软件，安装了 NAT 软件的路由器叫 NAT 路由器，它至少有一个有效的外部全球 IP 地址。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320185102545.png\" alt=\"image-20230320185102545\" /></p>\n<h3 id=\"子网划分\"><a class=\"anchor\" href=\"#子网划分\">#</a> 子网划分</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320185423081.png\" alt=\"image-20230320185423081\" /></p>\n<h3 id=\"使用子网时分组的转发\"><a class=\"anchor\" href=\"#使用子网时分组的转发\">#</a> 使用子网时分组的转发</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320191952615.png\" alt=\"image-20230320191952615\" /></p>\n<h3 id=\"无分类编址cidr-classless-inter-domain-routing\"><a class=\"anchor\" href=\"#无分类编址cidr-classless-inter-domain-routing\">#</a> 无分类编址 CIDR (Classless Inter-Domain Routing)</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321073044452.png\" alt=\"image-20230321073044452\" /></p>\n<p><strong>构成超网</strong>：将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合。方法：将网络前缀缩短。</p>\n<p><strong>最长前缀匹配</strong>：使用 CIDR 时，查找路由表可能得到几个匹配结果，应选择具有最长网络前缀的路由。前缀越长，地址块越小，路由越具体。</p>\n<h3 id=\"arp协议\"><a class=\"anchor\" href=\"#arp协议\">#</a> ARP 协议</h3>\n<p>由于在实际网络的链路上传送数据帧时，最终必须使用 MAC 地址。</p>\n<p>ARP 协议：完成主机或路由器 IP 地址到 MAC 地址的映射。\t<strong>解决下一跳走哪的问题</strong></p>\n<p>ARP 协议使用过程：检查 ARP 高速缓存，有对应表项则写入 MAC 帧，没有则用目的 MAC 地址为 FF-FF-FF-FF-FF-FF 的帧封装并广播 ARP 请求分组，同一局域网中所有主机都能收到该请求。目的主机收到请求后就会向源主机单播一个 ARP 响应分组，源主机收到后将此映射写入 ARP 缓存（10-20min 更新一次）。</p>\n<p>ARP 协议 4 种典型情况：</p>\n<ol>\n<li>主机 A 发给本网络上的主机 B：用 ARP 找到主机 B 的硬件地址；</li>\n<li>主机 A 发给另一网络上的主机 B：用 ARP 找到本网络上一个路由器（网关）的硬件地址；</li>\n<li>路由器发给本网络的主机 A：用 ARP 找到主机 A 的硬件地址；</li>\n<li>路由器发给另一网络的主机 B：用 ARP 找到本网络上的一个路由器的硬件地址。</li>\n</ol>\n<p><mark>ARP 协议自动进行</mark></p>\n<h3 id=\"dhcp协议\"><a class=\"anchor\" href=\"#dhcp协议\">#</a> DHCP 协议</h3>\n<p>动态主机配置协议 DHCP 是应用层协议，使用客户 / 服务器方式，客户端和服务端通过广播方式进行交互，基于 UDP。DHCP 提供即插即用联网的机制，主机可以从服务器动态获取 IP 地址、子网掩码、默认网关、DNS 服务器名称与 IP 地址，允许地址重用，支持移动用户加入网络，支持在用地址续租。</p>\n<ol>\n<li>主机广播 DHCP 发现报文\t“有没有 DHCP 服务器呀？”\t试图找到网络中的服务器，服务器获得一个 IP 地址。</li>\n<li>DHCP 服务器广播 DHCP 提供报文     “有！”&quot;有！”&quot; 有！”    服务器拟分配给主机一个 IP 地址及相关配置，先到先得。</li>\n<li>主机广播 DHCP 请求报文    “我用你给我的 IP 地址啦？”    主机向服务器请求提供 IP 地址。</li>\n<li>DHCP 服务器广播 DHCP 确认报文     “用吧！”     正式将 IP 地址分配给主机。</li>\n</ol>\n<h3 id=\"网际控制报文协议icmp\"><a class=\"anchor\" href=\"#网际控制报文协议icmp\">#</a> 网际控制报文协议 ICMP</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321091953707.png\" alt=\"image-20230321091953707\" /></p>\n<p><strong>ICMP 差错报告报文（5 种）</strong></p>\n<ol>\n<li>终点不可达：当路由器或主机不能交付数据报时就向源点发送终点不可达报文。\t无法交付</li>\n<li>源点抑制：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。    拥塞丢数据    （不再使用）</li>\n<li>时间超过：当路由器收到生存时间 TTL=0 的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。    TTL=0</li>\n<li>参数问题：当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。    首部字段有问题</li>\n<li>改变路由（重定向）：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。    值得更好的路由</li>\n</ol>\n<p><strong>不应发送 ICMP 差错报文的情况</strong></p>\n<ol>\n<li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</li>\n<li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。</li>\n<li>对具有组播地址的数据报都不发送 ICMP 差错报告报文。</li>\n<li>对具有特殊地址（如 127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</li>\n</ol>\n<p><strong>ICMP 询问报文</strong></p>\n<ol>\n<li>回送请求和回答报文\t\t主机或路由器向特定目的主机发出的询问，收到此报文的主机必须给源主机或路由器发送 ICMP 回送回答报文。<mark>测试目的站是否可达以及了解其相关状态。</mark></li>\n<li>时间戳请求和回答报文        请某个主机或路由器回答当前的日期和时间。<mark>用来进行时钟同步和测量时间。</mark></li>\n<li>掩码地址请求和回答报文    （不再使用）</li>\n<li>路由器询问和通告报文    （不再使用）</li>\n</ol>\n<p><strong>ICMP 的应用</strong></p>\n<ul>\n<li>PING：测试两个主机之间的连通性，使用了 ICMP 回送请求和回答报文。</li>\n<li>Traceroute：跟踪一个分组从源点到终点的路径，使用了 ICMP 时间超过差错报告报文。</li>\n</ul>\n<h3 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> IPv6</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321095303414.png\" alt=\"image-20230321095303414\" /></p>\n<p><strong>IPv6 数据报格式</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321095417476.png\" alt=\"image-20230321095417476\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321095937803.png\" alt=\"image-20230321095937803\" /></p>\n<p><strong>IPv6 和 IPv4</strong></p>\n<ol>\n<li>IPv6 将地址从 32 位（4B）扩大到 128 位（16B），更大的地址空间。</li>\n<li>IPv6 将 IPv4 的校验和字段彻底移除，以减少每跳的处理时间。</li>\n<li>IPv6 将 IPv4 的可选字段移出首部，变成了扩展首部，成为灵活的首部格式，路由器通常不对扩展首部进行检查，大大提高了路由器的处理效率。</li>\n<li>IPv6 支持即插即用（即自动配置），不需要 DHCP 协议。</li>\n<li>IPV6 首部长度必须是 8B 的整数倍，IPv4 首部是 4B 的整数倍。</li>\n<li>IPv6 只能在主机处分片，IPv4 可以在路由器和主机处分片。</li>\n<li>ICMPv6：附加报文类型 “分组过大”。</li>\n<li>IPv6 支持资源的预分配，支持实时视像等要求，保证一定的带宽和时延的应用。</li>\n<li>IPv6 取消了协议字段，改成下一个首部字段。</li>\n<li>IPv6 取消了总长度字段，改用有效载荷长度字段。</li>\n<li>IPv6 取消了服务类型字段。</li>\n</ol>\n<p><strong>IPv6 地址表示形式</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321100723052.png\" alt=\"image-20230321100723052\" /></p>\n<p><strong>IPv6 基本地址类型</strong></p>\n<ul>\n<li>单播：一对一通信\t可做源地址 + 目的地址</li>\n<li>多播：一对多通信    可做目的地址</li>\n<li>任播：一对多中的一个通信    可做目的地址</li>\n</ul>\n<p><strong>IPv6 向 IPv4 过渡的策略</strong></p>\n<ul>\n<li>双栈协议：双协议栈技术就是指在一台设备上同时启用 IPv4 协议栈和 IPv6 协议栈。这样的话，这台设备既能和 IPv4 网络通信，又能和 IPv6 网络通信。如果这台设备是一个路由器，那么这台路由器的不同接口上，分别配置了 IPv4 地址和 IPv6 地址，并很可能分别连接了 IPv4 网络和 IPv6 网络。如果这台设备是一个计算机，那么它将同时拥有 IPv4 地址和 IPv6 地址，并具备同时处理这两个协议地址的功能。</li>\n<li>隧道技术：通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据（或负载）可以是不同协议的数据帧或包。隧道协议将其它协议的数据帧或包重新封装然后通过隧道发送。</li>\n</ul>\n<h3 id=\"路由算法\"><a class=\"anchor\" href=\"#路由算法\">#</a> 路由算法</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320174409368.png\" alt=\"image-20230320174409368\" /></p>\n<p>最佳路由：“最佳” 只能是相对于某一种特定要求下得出的较为合理的选择而已。</p>\n<h3 id=\"路由算法的分类\"><a class=\"anchor\" href=\"#路由算法的分类\">#</a> 路由算法的分类</h3>\n<p><strong>路由算法</strong></p>\n<ul>\n<li>\n<p>静态路由算法（非自适应路由算法）</p>\n<ul>\n<li>管理员手工配置路由信息。</li>\n<li>简便、可靠，在负荷稳定、拓扑变化不大的网络中运行效果很好，广泛用于高度安全性的军事网络和较小的商业网络。</li>\n<li>路由更新慢，不适用大型网络。</li>\n</ul>\n</li>\n<li>\n<p>动态路由算法（自适应路由算法）</p>\n<ul>\n<li>路由器间彼此交换信息，按照路由算法优化出路由表项。</li>\n<li>路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化。</li>\n<li>算法复杂，增加网络负担。</li>\n</ul>\n</li>\n</ul>\n<p><strong>动态路由算法</strong></p>\n<ul>\n<li>全局性 链路状态路由算法 OSPF\n<ul>\n<li>所有路由器掌握完整的网络拓扑和链路费用信息。</li>\n</ul>\n</li>\n<li>分散性 距离向量路由算法 RIP\n<ul>\n<li>路由器只掌握物理相连的邻居及链路费用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分层次的路由选择协议\"><a class=\"anchor\" href=\"#分层次的路由选择协议\">#</a> 分层次的路由选择协议</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230320175227172.png\" alt=\"image-20230320175227172\" /></p>\n<h3 id=\"rip协议routing-information-protocol\"><a class=\"anchor\" href=\"#rip协议routing-information-protocol\">#</a> RIP 协议（Routing Information Protocol）</h3>\n<p>RIP 是一种分布式的基于距离向量的路由选择协议，是因特网的协议标准，最大优点是简单。</p>\n<p>RIP 协议要求网络中每一个路由器都维护从它自己到其他每一个目的网络的唯一最佳距离记录（即一组距离）。</p>\n<p>距离：通常为 “跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数 + 1。特别的，从一路由器到直接连接的网络距离为 1。RIP 允许一条路由最多只能包含 15 个路由器，因此距离为 16 表示网络不可达。</p>\n<p>RIP 协议只适用于小互联网。</p>\n<p>特点：</p>\n<ol>\n<li>仅和相邻路由器交换信息。</li>\n<li>路由器交换的信息是自己的路由表。</li>\n<li>每 30 秒交换一次路由信息，然后路由器根据新信息更新路由表。若超过 180s 没收到邻居路由器的通告，则判定邻居没了，并更新自己路由表。路由器刚开始工作时，只知道直接连接的网络的距离（距离为 1），接着每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即 “收敛”。</li>\n</ol>\n<p><strong>距离向量算法</strong></p>\n<ol>\n<li>\n<p>修改相邻路由器发来的 RIP 报文中所有表项对地址为 X 的相邻路由器发来的 RIP 报文，修改此报文中的所有项目：把 “下一跳” 字段中的地址改为 X，并把所有的 “距离” 字段 + 1。</p>\n</li>\n<li>\n<p>对修改后的 RIP 报文中的每一个项目，进行以下步骤：</p>\n<p>(1) R1 路由表中若没有 Net3，则把该项目填入 R1 路由表</p>\n<p>(2) R1 路由表中若有 Net3，则查看下一跳路由器地址：</p>\n<p>​\t\t若下一跳是 X，则用收到的项目替换源路由表中的项目；</p>\n<p>​\t\t若下一跳不是 X， 原来距离比从 X 走的距离远则更新，否则不作处理。</p>\n</li>\n<li>\n<p>若 180s 还没收到相邻路由器 X 的更新路由表，则把 X 记为不可达的路由器，即把距离设置为 16。</p>\n</li>\n<li>\n<p>返回</p>\n</li>\n</ol>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321104425692.png\" alt=\"image-20230321104425692\" /></p>\n<h3 id=\"ospf协议open-shortest-path-first\"><a class=\"anchor\" href=\"#ospf协议open-shortest-path-first\">#</a> OSPF 协议（Open Shortest Path First）</h3>\n<p>开放最短路径优先 OSPF 协议：“开放” 标明 OSPF 协议不是受某一家厂商控制，而是公开发表的； “最短路径优先” 是因为使用了 Dijkstra 提出的最短路径算法 SPF。</p>\n<p>OSPF 最主要的特征就是使用分布式的链路状态协议。</p>\n<p>特点：</p>\n<ol>\n<li>\n<p>使用洪泛法向自治系统内所有路由器发送信息，即路由器通过输出端口向所有相邻的路由器发送信息，而每一个相邻路由器又再次将此信息发往其所有的相邻路由器。\t<mark>广播</mark></p>\n<p>最终整个区域内所有路由器都得到了这个信息的一个副本。</p>\n</li>\n<li>\n<p>发送的信息就是与本路由器相邻的所有路由器的链路状态（本路由器和哪些路由器相邻，以及该链路的度量 / 代价 -- 费用、距离、时延、带宽等）。</p>\n</li>\n<li>\n<p>只有当链路状态发生变化时，路由器才向所有路由器洪泛发送此信息。</p>\n</li>\n</ol>\n<p>最后，所有路由器都能建立一个链路状态数据库，即全网拓扑图。</p>\n<p><strong>链路状态路由算法</strong></p>\n<ol>\n<li>\n<p>每个路由器发现它的邻居结点【HELLO 问候分组】，并了解邻居节点的网络地址。</p>\n</li>\n<li>\n<p>设置到它的每个邻居的成本度量 metric。</p>\n</li>\n<li>\n<p>构造【DD 数据库描述分组】，向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。</p>\n</li>\n<li>\n<p>如果 DD 分组中的摘要自己都有，则邻站不做处理；如果有没有的或者是更新的，则发送【LSR 链路状态请求分组】请求自己没有的和比自己更新的信息。</p>\n</li>\n<li>\n<p>收到邻站的 LSR 分组后，发送【LSU 链路状态更新分组】进行更新。</p>\n</li>\n<li>\n<p>更新完毕后，邻站返回一个【LSAck 链路状态确认分组】进行确认。</p>\n<p>只要一个路由器的链路状态发生变化：</p>\n</li>\n<li>\n<p>泛洪发送【LSU 链路状态更新分组】进行更新。</p>\n</li>\n<li>\n<p>更新完毕后，其他站返回一个【LSAck 链路状态确认分组】进行确认。</p>\n</li>\n<li>\n<p>使用 Dijkstra 根据自己的链路状态数据库构造到其他节点间的最短路径。</p>\n</li>\n</ol>\n<p><strong>OSPF 的区域</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321110143727.png\" alt=\"image-20230321110143727\" /></p>\n<p><strong>OSPF 分组</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321110227050.png\" alt=\"image-20230321110227050\" /></p>\n<p><strong>OSPF 其他特点</strong></p>\n<ol>\n<li>每隔 30min，要刷新一次数据库中的链路状态。</li>\n<li>由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多。</li>\n<li>OSPF 不存在坏消息传的慢的问题，它的收敛速度很快。</li>\n</ol>\n<h3 id=\"bgp协议border-gateway-protocol\"><a class=\"anchor\" href=\"#bgp协议border-gateway-protocol\">#</a> BGP 协议（Border Gateway Protocol）</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321110832743.png\" alt=\"image-20230321110832743\" /></p>\n<p><strong>BSP 协议交换信息的过程</strong>：BGP 所交换的网络可达性的信息就是要到达某个网络所要经过的一系列 AS。当 BGP 发言人互相交换了网络可达性的信息后，各 BGP 发言人就根据所采用的策略从收到的路由信息中找出到达各 AS 的较好路由。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321111150019.png\" alt=\"image-20230321111150019\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321111237052.png\" alt=\"image-20230321111237052\" /></p>\n<p><strong>BGP 协议报文格式</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321111332108.png\" alt=\"image-20230321111332108\" /></p>\n<p>特点：</p>\n<ul>\n<li>BGP 支持 CIDR，因此 BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</li>\n<li>在 BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表。但以后只需要在<mark>发生变化时更新有变化的部分</mark>。这样做对节省网络带宽和减少路由器的处理开销都有好处。</li>\n</ul>\n<p><strong>BGP-4 的四种报文</strong></p>\n<ol>\n<li>OPEN（打开）报文：用来与相邻的另一个 BGP 发言人建立关系，并认证发送方。</li>\n<li>UPDATE（更新）报文：通告新路径或撤销原路径。</li>\n<li>KEEPALIVE（保活）报文：在无 UPDATE 时，周期性证实邻站的连通性；也作为 OPEN 的确认。</li>\n<li>NOTIFICATION（通知）报文：报告先前报文的差错；也被用于关闭连接。</li>\n</ol>\n<h3 id=\"三种路由协议比较\"><a class=\"anchor\" href=\"#三种路由协议比较\">#</a> 三种路由协议比较</h3>\n<ul>\n<li>\n<p><mark>RIP</mark> 是一种分布式的基于距离向量的内部网关路由选择协议，通过广播 UDP 报文来交换路由信息。</p>\n</li>\n<li>\n<p><mark>OSPF</mark> 是一个内部网关协议，要交换的信息量较大，应使报文的长度尽量短，所以不使用传输层协议（如 UDP 或 TCP），而是直接采用 IP。</p>\n</li>\n<li>\n<p><mark>BGP</mark> 是一个外部网关协议，在不同的自治系统之间交换路由信息，由于网络环境复杂，需要保证可靠传输，所以采用 TCP。</p>\n</li>\n</ul>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321112319662.png\" alt=\"image-20230321112319662\" /></p>\n<h3 id=\"ip数据报的三种传输方式\"><a class=\"anchor\" href=\"#ip数据报的三种传输方式\">#</a> IP 数据报的三种传输方式</h3>\n<p>单播：单播用于发送数据包到单个目的地，且每发送一份单播报文都使用一个单播 IP 地址作为目的地址。是一种点对点传输方式。</p>\n<p>广播：广播是指发送数据包到同一广播域或子网内的所有设备的一种数据传输方式，是一种点对多点传输方式。</p>\n<p>组播（多播）：当网络中的某些用户需要特定数据时，组播数据发送者仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发，是一种点对多点传输方式。</p>\n<h3 id=\"ip组播地址\"><a class=\"anchor\" href=\"#ip组播地址\">#</a> IP 组播地址</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321113258069.png\" alt=\"image-20230321113258069\" /></p>\n<p><strong>硬件组播</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321114307110.png\" alt=\"image-20230321114307110\" /></p>\n<h3 id=\"网际组管理协议igmp\"><a class=\"anchor\" href=\"#网际组管理协议igmp\">#</a> 网际组管理协议 IGMP</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321114434106.png\" alt=\"image-20230321114434106\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321114528538.png\" alt=\"image-20230321114528538\" /></p>\n<h3 id=\"组播路由选择协议\"><a class=\"anchor\" href=\"#组播路由选择协议\">#</a> 组播路由选择协议</h3>\n<p>组播路由协议目的是找出以源主机为根节点的组播转发树。</p>\n<p>构造树可以避免在路由器之间兜圈子。</p>\n<p>对不同的多播组对应于不同的多播转发树；同一个多播组，对不同的源点也会有不同的多播转发树。</p>\n<p>组播路由选择协议常使用的三种算法：</p>\n<ul>\n<li>基于链路状态的路由选择</li>\n<li>基于距离 - 向量的路由选择</li>\n<li>协议无关的组播（稀疏 / 密集）</li>\n</ul>\n<h3 id=\"移动ip\"><a class=\"anchor\" href=\"#移动ip\">#</a> 移动 IP</h3>\n<p>移动 IP 技术是移动结点（计算机 / 服务器等）以固定的网络 IP 地址，实现跨越不同网段的漫游功能，并保证了基于网络 IP 的网络权限在漫游过程中不发生任何改变。</p>\n<p>移动结点：具有永久 IP 地址的移动设备。</p>\n<p>归属代理（本地代理）：一个移动结点拥有的就 “居所” 称为归属网络，在归属网络中代表移动节点执行移动管理功能的实体叫做归属代理。</p>\n<p>外部代理（外地代理）：在外部网络中帮助移动节点完成移动管理功能的实体称为外部代理。</p>\n<p>永久地址（归属地址 / 主地址）：移动站点在归属网络中的原始地址。</p>\n<p>转交地址（辅地址）：移动站点在外部网络使用的临时地址。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321115257171.png\" alt=\"image-20230321115257171\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321115339690.png\" alt=\"image-20230321115339690\" /></p>\n<h3 id=\"路由器\"><a class=\"anchor\" href=\"#路由器\">#</a> 路由器</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321115514492.png\" alt=\"image-20230321115514492\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321115639286.png\" alt=\"image-20230321115639286\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321115728647.png\" alt=\"image-20230321115728647\" /></p>\n<h3 id=\"三层设备的区别\"><a class=\"anchor\" href=\"#三层设备的区别\">#</a> 三层设备的区别</h3>\n<p>路由器：可以互联两个不同网络层协议的网段。</p>\n<p>网桥：可以互联两个物理层和链路层不同的网段。</p>\n<p>集线器：不能互联两个物理层不同的网段。</p>\n<h3 id=\"路由表与路由转发\"><a class=\"anchor\" href=\"#路由表与路由转发\">#</a> 路由表与路由转发</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321120111755.png\" alt=\"image-20230321120111755\" /></p>\n<h2 id=\"传输层\"><a class=\"anchor\" href=\"#传输层\">#</a> 传输层</h2>\n<p>传输层的功能：</p>\n<ol>\n<li>传输层提供进程和进程之间的逻辑通信。</li>\n<li>复用和分用</li>\n<li>传输层对收到的报文进行差错检测。</li>\n<li>传输层的两种协议。</li>\n</ol>\n<p>面向连接的传输控制协议 TCP：传送数据之前必须建立连接，数据传送结束后要释放连接。不提供广播或多播服务。由于 TCP 要提供可靠的面向连接的传输服务，因此不可避免增加了许多开销：确认、流量控制、计时器及连接管理等。</p>\n<p><mark>可靠，面向连接，时延大，适用于大文件。</mark></p>\n<p>无连接的用户数据报协议 UDP：传送数据之前不需要建立连接，收到 UDP 报文后也不需要给出任何确认。</p>\n<p><mark>不可靠，无连接，时延小，适用于小文件。</mark></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321140212225.png\" alt=\"image-20230321140212225\" /></p>\n<p>在网络中采用发送方和接收方的套接字组合来识别端点，套接字唯一标识了网络中的一个主机和它上面的一个进程。</p>\n<p><mark>套接字 Socket = (主机 IP 地址，端口号)</mark></p>\n<h3 id=\"用户数据报协议udp\"><a class=\"anchor\" href=\"#用户数据报协议udp\">#</a> 用户数据报协议 UDP</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321140631868.png\" alt=\"image-20230321140631868\" /></p>\n<h3 id=\"udp首部格式\"><a class=\"anchor\" href=\"#udp首部格式\">#</a> UDP 首部格式</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321140945683.png\" alt=\"image-20230321140945683\" /></p>\n<h3 id=\"udp校验\"><a class=\"anchor\" href=\"#udp校验\">#</a> UDP 校验</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321141225659.png\" alt=\"image-20230321141225659\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321141607687.png\" alt=\"image-20230321141607687\" /></p>\n<h3 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h3>\n<ol>\n<li>\n<p>TCP 是面向连接（虚连接）的传输层协议。\t打 call</p>\n</li>\n<li>\n<p>每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的。</p>\n</li>\n<li>\n<p>TCP 提供可靠交付的服务，无差错、不丢失、不重复、按序到达。    <mark>可靠有序，不丢不重</mark></p>\n</li>\n<li>\n<p>TCP 提供全双工通信。</p>\n<p>发送缓存：准备发送的数据 &amp; 已发送但尚未收到确认的数据</p>\n<p>接收缓存：按序到达但尚未被接受应用程序读取的数据 &amp; 不按序到达的数据</p>\n</li>\n<li>\n<p>TCP 面向字节流：TCP 把应用程序交下来的数据看成仅仅是一连串的<mark>无结构的字节流</mark>。</p>\n</li>\n</ol>\n<p>流：流入到进程或从进程流出的字节序列。</p>\n<p><strong>TCP 报文段首部格式</strong></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321142651436.png\" alt=\"image-20230321142651436\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321143037797.png\" alt=\"image-20230321143037797\" /></p>\n<h3 id=\"tcp连接管理\"><a class=\"anchor\" href=\"#tcp连接管理\">#</a> TCP 连接管理</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321143212645.png\" alt=\"image-20230321143212645\" /></p>\n<p>TCP 连接的建立采用客户服务器方式，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器。</p>\n<h3 id=\"tcp的连接建立\"><a class=\"anchor\" href=\"#tcp的连接建立\">#</a> TCP 的连接建立</h3>\n<p>假设运行在一台主机（客户）上的一个进程想与另一台主机（服务器）上的一个进程建立一条连接，客户应用进程首先通知客户 TCP，他想建立一个与服务器上某个进程之间的连接，客户中的 TCP 会用以下步骤与服务器中的 TCP 建立一条 TCP 连接：</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321143755755.png\" alt=\"image-20230321143755755\" /></p>\n<h3 id=\"syn洪泛攻击\"><a class=\"anchor\" href=\"#syn洪泛攻击\">#</a> SYN 洪泛攻击</h3>\n<p>SYN 洪泛攻击发生在 OSI 第四层，这种方式利用 TCP 协议的特性，就是三次握手。攻击者发送 TCP SYN，SYN 是 TCP 三次握手中的第一个数据包，而当服务器返回 ACK 后，该攻击者就不对其进行再确认，那这个 TCP 连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送 ACK 给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送非常大量的这种 TCP 连接，由于每一个都没法完成三次握手，所以在服务器上，这些 TCP 连接会因为挂起状态而消耗 CPU 和内存，最后服务器可能死机，就无法为正常用户提供服务了。</p>\n<h3 id=\"tcp的连接释放\"><a class=\"anchor\" href=\"#tcp的连接释放\">#</a> TCP 的连接释放</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321144309722.png\" alt=\"image-20230321144309722\" /></p>\n<h3 id=\"tcp的可靠传输\"><a class=\"anchor\" href=\"#tcp的可靠传输\">#</a> TCP 的可靠传输</h3>\n<p>可靠：保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的。</p>\n<p>TCP 实现可靠传输的机制：</p>\n<ol>\n<li>校验：与 UDP 校验一样，增加伪首部</li>\n<li>序号</li>\n<li>确认</li>\n<li>重传</li>\n</ol>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321145354919.png\" alt=\"image-20230321145354919\" /></p>\n<h3 id=\"tcp流量控制\"><a class=\"anchor\" href=\"#tcp流量控制\">#</a> TCP 流量控制</h3>\n<p>流量控制：让发送方慢点，要让接收方来得及接收。</p>\n<p>TCP 利用滑动窗口机制实现流量控制。</p>\n<p>在通信过程中，接收方根据自己接收缓存的大小，动态地调整发送方的发送窗口大小，即接收窗口 rwnd（接收方设置确认报文段的窗口字段来将 rwnd 通知给发送方），发送方的发送窗口取接收窗口 rwnd 和拥塞窗口 cwnd 的最小值。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321150702057.png\" alt=\"image-20230321150702057\" /></p>\n<h3 id=\"tcp拥塞控制\"><a class=\"anchor\" href=\"#tcp拥塞控制\">#</a> TCP 拥塞控制</h3>\n<p>出现拥塞的条件：</p>\n<p>​\t\t对资源需求的总和 &gt; 可用资源</p>\n<p>网络中有许多资源同时呈现供应不足➡️网络性能变坏➡️网络吞吐量将随输入负荷增大而下降</p>\n<p>拥塞控制：防止过多的数据注入到网络中。\t<mark>全局性</mark></p>\n<p><strong>拥塞控制的四种算法</strong></p>\n<ul>\n<li>慢开始</li>\n<li>拥塞避免</li>\n<li>快重传</li>\n<li>快恢复</li>\n</ul>\n<p>假定：</p>\n<ol>\n<li>数据单方向传送，而另一个方向只传送确认</li>\n<li>接收方总是有足够大的缓存空间，因而发送窗口大小取决于拥塞程度</li>\n</ol>\n<p 接收窗口rwnd，拥塞窗口cwnd=\"\">发送窗口 = Min</p>\n<p>接收窗口：<strong>接收方</strong>根据接受缓存设置的值，并告知给发送方，反映接收方容量。</p>\n<p>拥塞窗口：<strong>发送方</strong>根据自己估算的网络拥塞程度而设置的窗口值，反映网络当前容量。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321152231442.png\" alt=\"image-20230321152231442\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321152454586.png\" alt=\"image-20230321152454586\" /></p>\n<h2 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h2>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321152855904.png\" alt=\"image-20230321152855904\" /></p>\n<h3 id=\"网络应用模型\"><a class=\"anchor\" href=\"#网络应用模型\">#</a> 网络应用模型</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321153455901.png\" alt=\"image-20230321153455901\" /></p>\n<ul>\n<li>客户 / 服务器模型（Client/Server）</li>\n</ul>\n<p>服务器：提供计算服务的设备。</p>\n<ol>\n<li>永久提供服务</li>\n<li>永久性访问地址 / 域名</li>\n</ol>\n<p>客户机：请求计算服务的主机。</p>\n<ol>\n<li>与服务器通信，使用服务器提供的服务</li>\n<li>间歇性接入网络</li>\n<li>可能使用动态 IP 地址</li>\n<li>不与其他客户机直接通信</li>\n</ol>\n<p>应用：Web，文件传输 FTP，远程登录，电子邮件</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321153525357.png\" alt=\"image-20230321153525357\" /></p>\n<ul>\n<li>P2P 模型（Peer-to-peer）\n<ul>\n<li>不存在永远在线的服务器</li>\n<li>每个主机既可以提供服务，也可以请求服务</li>\n<li>任意端系统 / 节点之间可以直接通讯</li>\n<li>节点间歇性接入网络</li>\n<li>节点可能改变 IP 地址</li>\n<li>可扩展性好</li>\n<li>网络健壮性强</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"域名解析系统dns\"><a class=\"anchor\" href=\"#域名解析系统dns\">#</a> 域名解析系统 DNS</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321154425285.png\" alt=\"image-20230321154425285\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321155009576.png\" alt=\"image-20230321155009576\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321155417651.png\" alt=\"image-20230321155417651\" /></p>\n<h3 id=\"文件传输协议ftp\"><a class=\"anchor\" href=\"#文件传输协议ftp\">#</a> 文件传输协议 FTP</h3>\n<ul>\n<li>文件传送协议 FTP（File Transfer Protocol）：提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力。</li>\n<li>简单文件传送协议 TFTP（Trivial File Transfer Protocol）</li>\n</ul>\n<p>FTP 是基于客户 / 服务器 (C/S) 的协议。</p>\n<p>用户通过一个客户机程序连接至在远程计算机上运行的服务器程序。</p>\n<p>依照 FTP 协议提供服务，进行文件传送的计算机就是 FTP 服务器。</p>\n<p>连接 FTP 服务器，遵循 FTP 协议与服务器传送文件的电脑就是 FTP 客户端。</p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321160156997.png\" alt=\"image-20230321160156997\" /></p>\n<h3 id=\"ftp工作原理\"><a class=\"anchor\" href=\"#ftp工作原理\">#</a> FTP 工作原理</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321160455157.png\" alt=\"image-20230321160455157\" /></p>\n<p>FTP 传输模式：</p>\n<ul>\n<li>文本模式：ASCII 模式，以文本序列传输数据；</li>\n<li>二进制模式：Binary 模式，以二进制序列传输数据。</li>\n</ul>\n<h3 id=\"电子邮件\"><a class=\"anchor\" href=\"#电子邮件\">#</a> 电子邮件</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321160849680.png\" alt=\"image-20230321160849680\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161210493.png\" alt=\"image-20230321161210493\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161420898.png\" alt=\"image-20230321161420898\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161511636.png\" alt=\"image-20230321161511636\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161646051.png\" alt=\"image-20230321161646051\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161728535.png\" alt=\"image-20230321161728535\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321161809932.png\" alt=\"image-20230321161809932\" /></p>\n<h3 id=\"万维网和http协议\"><a class=\"anchor\" href=\"#万维网和http协议\">#</a> 万维网和 HTTP 协议</h3>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162041502.png\" alt=\"image-20230321162041502\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162210153.png\" alt=\"image-20230321162210153\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162311695.png\" alt=\"image-20230321162311695\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162430860.png\" alt=\"image-20230321162430860\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162509196.png\" alt=\"image-20230321162509196\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162604589.png\" alt=\"image-20230321162604589\" /></p>\n<p><img data-src=\"/2023/03/21/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230321162727221.png\" alt=\"image-20230321162727221\" /></p>\n",
            "tags": [
                "Network",
                "学习笔记"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/03/20/cpp/design-patterns/Design%20Patterns/",
            "url": "http://sakupinera.github.io/2023/03/20/cpp/design-patterns/Design%20Patterns/",
            "title": "设计模式（Design Patterns）",
            "date_published": "2023-03-19T16:00:00.000Z",
            "content_html": "<h1 id=\"设计模式design-patterns\"><a class=\"anchor\" href=\"#设计模式design-patterns\">#</a> 设计模式（Design Patterns）</h1>\n<h2 id=\"初步认识设计模式\"><a class=\"anchor\" href=\"#初步认识设计模式\">#</a> 初步认识设计模式</h2>\n<h3 id=\"什么是设计模式\"><a class=\"anchor\" href=\"#什么是设计模式\">#</a> 什么是设计模式</h3>\n<p>每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。</p>\n<h3 id=\"从面向对象谈起\"><a class=\"anchor\" href=\"#从面向对象谈起\">#</a> 从面向对象谈起</h3>\n<p>底层思维：向下，如何把握机器底层从微观理解对象构造。</p>\n<ul>\n<li>语言构造</li>\n<li>编译转换</li>\n<li>内存模型</li>\n<li>运行时机制</li>\n</ul>\n<p>向下：深入理解三大面向对象机制</p>\n<ul>\n<li>封装，隐藏内部实现</li>\n<li>继承，复用现有代码</li>\n<li>多态，改写对象行为</li>\n</ul>\n<p>抽象思维：向上，如何将我们的周围世界抽象为程序代码。</p>\n<ul>\n<li>面向对象</li>\n<li>组件封装</li>\n<li>设计模式</li>\n<li>架构模式</li>\n</ul>\n<p>向上：深刻把握面向对象机制多带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是 “好的面向对象设计”。</p>\n<h3 id=\"软件设计固有的复杂性\"><a class=\"anchor\" href=\"#软件设计固有的复杂性\">#</a> 软件设计固有的复杂性</h3>\n<p>建筑商从来不会去想给一栋已建好的 100 层高的楼房底下再新修一个小地下室 —— 这样做花费极大而且注定要失败。然而令人惊奇的是，软件系统的用户在要求作出类似改变时却不会仔细考虑，而且他们认为这只是需要简单编程的事。\t--  Object-Oriented Analysis and Design with Applications</p>\n<h3 id=\"软件设计复杂的根本原因\"><a class=\"anchor\" href=\"#软件设计复杂的根本原因\">#</a> 软件设计复杂的根本原因</h3>\n<p><mark>变化</mark>：</p>\n<ul>\n<li>\n<p>客户需求的变化</p>\n</li>\n<li>\n<p>技术平台的变化</p>\n</li>\n<li>\n<p>开发团队的变化</p>\n</li>\n<li>\n<p>市场环境的变化</p>\n</li>\n<li>\n<p>......</p>\n</li>\n</ul>\n<h3 id=\"如何解决复杂性\"><a class=\"anchor\" href=\"#如何解决复杂性\">#</a> 如何解决复杂性？</h3>\n<p>▶️分解：</p>\n<ul>\n<li>分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。</li>\n</ul>\n<p>▶️抽象：</p>\n<ul>\n<li>更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。又不不饿能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。</li>\n</ul>\n<h3 id=\"软件设计的目标\"><a class=\"anchor\" href=\"#软件设计的目标\">#</a> 软件设计的目标</h3>\n<p>什么是好的软件设计？软件设计的金科玉律：<mark>复用</mark>！</p>\n<h3 id=\"面向对象设计为什么\"><a class=\"anchor\" href=\"#面向对象设计为什么\">#</a> 面向对象设计，为什么？</h3>\n<p>变化是复用的天敌！面向对象设计最大的优势在于：<mark>低于变化</mark>！</p>\n<h3 id=\"重新认识面向对象\"><a class=\"anchor\" href=\"#重新认识面向对象\">#</a> 重新认识面向对象</h3>\n<p>▶️理解隔离变化</p>\n<ul>\n<li>从宏观层面来看，面向对象的构建方式更能适应软件的变化，能将变化所带来的影响减为最小。</li>\n</ul>\n<p>▶️各司其职</p>\n<ul>\n<li>从微观层面来看，面向对象的方式更强调各个类的 “责任”</li>\n<li>由于需求变化导致的新增类型不应该影响原来类型的实现 -- 是所谓各负其责</li>\n</ul>\n<p>▶️对象是什么？</p>\n<ul>\n<li>从语言实现层面来看，对象封装了代码和数据</li>\n<li>从规格层面讲，对象是一系列可被使用的公共接口</li>\n<li>从概念层面讲，对象是某种拥有责任的抽象</li>\n</ul>\n<h3 id=\"面向对象设计原则\"><a class=\"anchor\" href=\"#面向对象设计原则\">#</a> 面向对象设计原则</h3>\n<p>▶️依赖倒置原则（DIP）</p>\n<ul>\n<li>高层模块（稳定）不应该依赖于底层模块（变化），二者都应该依赖于抽象（稳定）。</li>\n<li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。</li>\n</ul>\n<p>▶️开放封闭原则（OCP）</p>\n<ul>\n<li>对扩展开放，对更改封闭。</li>\n<li>类模块应该是可以扩展的，但是不可修改。</li>\n</ul>\n<p>▶️单一职责原则（SRP）</p>\n<ul>\n<li>一个类应该仅有一个引起它变化的原因。</li>\n<li>变化的方向隐含着类的责任。</li>\n</ul>\n<p>▶️Liskov 替换原则（LSP）</p>\n<ul>\n<li>子类必须能够替换它们的基类（IS-A）。</li>\n<li>继承表达类型抽象。</li>\n</ul>\n<p>▶️接口隔离原则（ISP）</p>\n<ul>\n<li>不应该强迫客户程序依赖它们不用的方法。</li>\n<li>接口应该小而完备。</li>\n</ul>\n<p>▶️优先使用对象组合，而不是类继承</p>\n<ul>\n<li>类继承通常位 “白箱复用”，对象组合通常为 “黑箱复用”。</li>\n<li>继承在某种程度上破坏了封装性，父类子类耦合度高。</li>\n<li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li>\n</ul>\n<p>▶️封装变化点</p>\n<ul>\n<li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li>\n</ul>\n<p>▶️针对接口编程，而不是针对实现编程</p>\n<ul>\n<li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li>\n<li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li>\n<li>减少类型中各部分的依赖关系，从而实现 “高内聚，松耦合” 的类型设计方案。</li>\n</ul>\n<h3 id=\"将设计原则提升为设计经验\"><a class=\"anchor\" href=\"#将设计原则提升为设计经验\">#</a> 将设计原则提升为设计经验</h3>\n<p>▶️ 1. 设计习语 Design Idioms</p>\n<ul>\n<li>Design Idioms 描述与特定编程语言相关的低层模式，技巧，习惯，习惯用法。</li>\n</ul>\n<p>▶️ 2. 设计模式 Design Patterns</p>\n<ul>\n<li>Design Patterns 主要描述的是 “类与相互通信的对象之间的组织关系，博爱阔它们的角色、职责、协作方式等方面。</li>\n</ul>\n<p>▶️ 3. 架构模式 Architectural Patterns</p>\n<ul>\n<li>Architectural Patterns 描述系统中与基本结构组织关系密切相关的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则。</li>\n</ul>\n<h2 id=\"gof-23-模式分类\"><a class=\"anchor\" href=\"#gof-23-模式分类\">#</a> GOF-23 模式分类</h2>\n<p>▶️从目的来看：</p>\n<ul>\n<li>创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型的实现引来的冲击。</li>\n<li>结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。</li>\n<li>行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。</li>\n</ul>\n<p>▶️从范围来看：</p>\n<ul>\n<li>类模式处理类与子类的静态关系。</li>\n<li>对象模式处理对象间的动态关系。</li>\n</ul>\n<h3 id=\"从封装变化角度对模式分类\"><a class=\"anchor\" href=\"#从封装变化角度对模式分类\">#</a> 从封装变化角度对模式分类</h3>\n<p>▶️对象协作：</p>\n<p>现代软件专业分工之后的第一个结果是 “框架与应用程序的划分”，“组件协作” 模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是两者之间协作时常用的模式。</p>\n<p>典型模式：</p>\n<ul>\n<li>Template Method</li>\n<li>Strategy</li>\n<li>Observer/Event</li>\n</ul>\n<p>▶️单一职责：</p>\n<p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p>\n<p>典型模式：</p>\n<ul>\n<li>Decorator</li>\n<li>Bridge</li>\n</ul>\n<p>▶️对象创建：</p>\n<p>通过 “对象创建” 模式绕开 new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类） ，从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p>\n<p>典型模式：</p>\n<ul>\n<li>Factory Method</li>\n<li>Abstract Factory</li>\n<li>Prototype</li>\n<li>Builder</li>\n</ul>\n<p>▶️对象性能：</p>\n<p>面向对象很好地解决了 “抽象” 的问题，但是必不可免地要付出一定的代价。对于通常情况来讲，面向对象的成本大都可以忽略不计。但是某些情况，面向对象所带来的成本必须谨慎处理。</p>\n<p>典型模式：</p>\n<ul>\n<li>Singleton</li>\n<li>Flyweight</li>\n</ul>\n<p>▶️接口隔离：</p>\n<p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p>\n<p>典型模式：</p>\n<ul>\n<li>Facade</li>\n<li>Proxy</li>\n<li>Mediator</li>\n<li>Adapter</li>\n</ul>\n<p>▶️状态变化：</p>\n<p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理？同时又维持高层模块的稳定？“状态变化” 模式为这一问题提供了一种解决方案。</p>\n<p>典型模式：</p>\n<ul>\n<li>Memento</li>\n<li>State</li>\n</ul>\n<p>▶️数据结构：</p>\n<p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用。这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p>\n<p>典型模式：</p>\n<ul>\n<li>Composite</li>\n<li>Iterator</li>\n<li>Chain of Responsibility</li>\n</ul>\n<p>▶️行为变化：</p>\n<p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化” 模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p>\n<ul>\n<li>Command</li>\n<li>Visitor</li>\n</ul>\n<p>▶️领域问题：</p>\n<p>在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。</p>\n<ul>\n<li>Interpreter</li>\n</ul>\n<h3 id=\"重构获得模式-refactoring-to-patterns\"><a class=\"anchor\" href=\"#重构获得模式-refactoring-to-patterns\">#</a> 重构获得模式 Refactoring to Patterns</h3>\n<p>设计模式的应用不要先入为主，一上来就是用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践中提倡的 “Refactoring to Patterns” 是目前普遍公认的最好的使用设计模式的方法。</p>\n<h3 id=\"重构关键技法\"><a class=\"anchor\" href=\"#重构关键技法\">#</a> 重构关键技法</h3>\n<ul>\n<li>静态 -&gt; 动态</li>\n<li>早绑定 -&gt; 晚绑定</li>\n<li>继承 -&gt; 组合</li>\n<li>编译时依赖 -&gt; 运行时依赖</li>\n<li>紧耦合 -&gt; 松耦合</li>\n</ul>\n<h2 id=\"template-method模板方法\"><a class=\"anchor\" href=\"#template-method模板方法\">#</a> Template Method（模板方法）</h2>\n<h3 id=\"动机motivation\"><a class=\"anchor\" href=\"#动机motivation\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，对于某一项任务，它常常又稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如构架与应用之间的关系）而无法和任务的整体结构同时实现。</p>\n<p>如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</p>\n<h3 id=\"模式定义\"><a class=\"anchor\" href=\"#模式定义\">#</a> 模式定义</h3>\n<p>定义一个操作中的算法的骨架（稳定），而将一些步骤延迟（变化）到子类中。Template Method 使得子类可以不改变复用一个算法的结构即可重定义（override 重写）该算法的某些特定步骤。</p>\n<h3 id=\"结构structure\"><a class=\"anchor\" href=\"#结构structure\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318154005634.png\" alt=\"image-20230318154005634\" /></p>\n<h3 id=\"要点总结\"><a class=\"anchor\" href=\"#要点总结\">#</a> 要点总结</h3>\n<ul>\n<li>Template Method 模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用的方面的基本实现结构。</li>\n<li>出了可以灵活应对子步骤的变化外，” 不要调用我，让我来调用你 “的反向控制结构是 Template Method 的典型应用。</li>\n<li>在具体实现方面，被 Template Method 调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为 protected 方法。</li>\n</ul>\n<h2 id=\"strategy策略模式\"><a class=\"anchor\" href=\"#strategy策略模式\">#</a> Strategy（策略模式）</h2>\n<p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。</p>\n<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>\n<h3 id=\"模式定义-2\"><a class=\"anchor\" href=\"#模式定义-2\">#</a> 模式定义</h3>\n<p>定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）。</p>\n<h3 id=\"结构structure-2\"><a class=\"anchor\" href=\"#结构structure-2\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318160016068.png\" alt=\"image-20230318160016068\" /></p>\n<h3 id=\"要点总结-2\"><a class=\"anchor\" href=\"#要点总结-2\">#</a> 要点总结</h3>\n<ul>\n<li>Strategy 及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。</li>\n<li>Strategy 模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要 Strategy 模式。</li>\n<li>如果 Strategy 对象没有实例变量，那么各个上下文可以共享同一个 Strategy 对象，从而节省对象开销。</li>\n</ul>\n<h2 id=\"observerevent观察者模式\"><a class=\"anchor\" href=\"#observerevent观察者模式\">#</a> Observer/Event（观察者模式）</h2>\n<h3 id=\"动机motivation-2\"><a class=\"anchor\" href=\"#动机motivation-2\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，我们需要为某些对象建立一种 “通知依赖关系” 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。</p>\n<p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</p>\n<h3 id=\"模式定义-3\"><a class=\"anchor\" href=\"#模式定义-3\">#</a> 模式定义</h3>\n<p>定义对象间的一种一对多（变化）的依赖关系，以便当一个对象（Subject）的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。</p>\n<h3 id=\"结构structure-3\"><a class=\"anchor\" href=\"#结构structure-3\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318170214324.png\" alt=\"image-20230318170214324\" /></p>\n<h3 id=\"要点总结-3\"><a class=\"anchor\" href=\"#要点总结-3\">#</a> 要点总结</h3>\n<p>使用面向对象的抽象，Observer 模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。</p>\n<p>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</p>\n<p>观察者自己决定是否需要订阅通知，目标对象对此一无所知。</p>\n<p>Observer 模式是基于事件的 UI 框架中非常常用的设计模式，也是 MVC 模式的一个重要组成部分。</p>\n<h2 id=\"decorator装饰模式\"><a class=\"anchor\" href=\"#decorator装饰模式\">#</a> Decorator（装饰模式）</h2>\n<h3 id=\"动机motivation-3\"><a class=\"anchor\" href=\"#动机motivation-3\">#</a> 动机（Motivation）</h3>\n<p>在某些情况下我们可能会 “过度地使用继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p>\n<p>如何使 “对象功能的扩展” 能够根据需要来动态地实现？同时避免 “扩展功能的增多” 带来的子类膨胀问题？从而使得任何 “功能扩展变化” 所导致的影响将为最低？</p>\n<h3 id=\"模式定义-4\"><a class=\"anchor\" href=\"#模式定义-4\">#</a> 模式定义</h3>\n<p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言， Decorator 模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。</p>\n<h3 id=\"结构structure-4\"><a class=\"anchor\" href=\"#结构structure-4\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318175409319.png\" alt=\"image-20230318175409319\" /></p>\n<h3 id=\"要点总结-4\"><a class=\"anchor\" href=\"#要点总结-4\">#</a> 要点总结</h3>\n<p>通过采用组合而非继承的手法， Decorator 模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的 “灵活性差” 和 “多子类衍生问题”。</p>\n<p>Decorator 类在接口上表现为 is-a Component 的继承关系，即 Decorator 类继承了 Component 类所具有的接口。但在实现上又表现为 has-a Component 的组合关系，即 Decorator 类又使用了另外一个 Component 类。</p>\n<p>Decorator 模式的目的并非解决 “多子类衍生的多继承” 问题，Decorator 模式应用的要点在于解决 “主体类在多个方向上的扩展功能”—— 是为 “装饰” 的含义。</p>\n<h2 id=\"bridge桥模式\"><a class=\"anchor\" href=\"#bridge桥模式\">#</a> Bridge（桥模式）</h2>\n<h3 id=\"动机motivation-4\"><a class=\"anchor\" href=\"#动机motivation-4\">#</a> 动机（Motivation）</h3>\n<p>由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度乃至多个纬度的变化。</p>\n<p>如何应对这种 “多维度的变化”? 如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？</p>\n<h3 id=\"模式定义-5\"><a class=\"anchor\" href=\"#模式定义-5\">#</a> 模式定义</h3>\n<p>将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</p>\n<h3 id=\"结构structure-5\"><a class=\"anchor\" href=\"#结构structure-5\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318182235171.png\" alt=\"image-20230318182235171\" /></p>\n<h3 id=\"要点总结-5\"><a class=\"anchor\" href=\"#要点总结-5\">#</a> 要点总结</h3>\n<p>Bridge 模式使用 “对象间的组合关系” 解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即 “子类化” 它们。</p>\n<p>Bridge 模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。一 Bridge 模式是比多继承方案更好的解决方法。</p>\n<p>Bridge 模式的应用一般在 “两个非常强的变化维度”，有时一个类也有多于两个的变化维度，这时可以使用 Bridge 的扩展模式。</p>\n<h2 id=\"factory-method工厂方法\"><a class=\"anchor\" href=\"#factory-method工厂方法\">#</a> Factory Method（工厂方法）</h2>\n<h3 id=\"动机motivation-5\"><a class=\"anchor\" href=\"#动机motivation-5\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</p>\n<p>如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种 “封装机制” 来避免客户程序和这种 “具体对象创建工作” 的紧耦合？</p>\n<h3 id=\"模式定义-6\"><a class=\"anchor\" href=\"#模式定义-6\">#</a> 模式定义</h3>\n<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类。</p>\n<h3 id=\"结构structure-6\"><a class=\"anchor\" href=\"#结构structure-6\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318184811812.png\" alt=\"image-20230318184811812\" /></p>\n<h3 id=\"要点总结-6\"><a class=\"anchor\" href=\"#要点总结-6\">#</a> 要点总结</h3>\n<p>Factory Method 模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系（new）会导致软件的脆弱。</p>\n<p>Factory Method 模式通过面向对象的手法，将所要创建的具体对象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。</p>\n<p>Factory Method 模式解决 “单个对象” 的需求变化。缺点在于要求创建方法 / 参数相同。</p>\n<h2 id=\"abstract-factory抽象工厂\"><a class=\"anchor\" href=\"#abstract-factory抽象工厂\">#</a> Abstract Factory（抽象工厂）</h2>\n<h3 id=\"动机motivation-6\"><a class=\"anchor\" href=\"#动机motivation-6\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，经常面临着 “一系列相互依赖的对象” 的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。</p>\n<p>如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种 “封装机制” 来避免客户程序和这种 “多系列具体对象创建工作” 的紧耦合？</p>\n<h3 id=\"模式定义-7\"><a class=\"anchor\" href=\"#模式定义-7\">#</a> 模式定义</h3>\n<p>提供一个接口，让该接口负责创建一系列 “相关或者相互依赖的对象”，无需指定它们具体的类。</p>\n<h3 id=\"结构structure-7\"><a class=\"anchor\" href=\"#结构structure-7\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230318192228052.png\" alt=\"image-20230318192228052\" /></p>\n<h3 id=\"要点总结-7\"><a class=\"anchor\" href=\"#要点总结-7\">#</a> 要点总结</h3>\n<p>如果没有应对 “多系列对象构建” 的需求变化，则没有必要使用 Abstract Factory 模式，这时候使用简单的工厂完全可以。</p>\n<p>“系列对象” 指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。</p>\n<p>Abstract Factory 模式主要在于应对 “新系列” 的需求变动。其缺点在于难以应对 “新对象” 的需求变动。</p>\n<h2 id=\"prototype原型模式\"><a class=\"anchor\" href=\"#prototype原型模式\">#</a> Prototype（原型模式）</h2>\n<h3 id=\"动机motivation-7\"><a class=\"anchor\" href=\"#动机motivation-7\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，经常面临着 “某些结构复杂的对象” 的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</p>\n<p>如何应对这种变化？如何向 “客户程序（使用这些对象的程序）” 隔离出 “这些易变对象”，从而使得 “依赖这些易变对象的客户程序” 不随着需求改变而改变？</p>\n<h3 id=\"模式定义-8\"><a class=\"anchor\" href=\"#模式定义-8\">#</a> 模式定义</h3>\n<p>使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</p>\n<h3 id=\"结构structure-8\"><a class=\"anchor\" href=\"#结构structure-8\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319134245796.png\" alt=\"image-20230319134245796\" /></p>\n<h3 id=\"要点总结-8\"><a class=\"anchor\" href=\"#要点总结-8\">#</a> 要点总结</h3>\n<p>Prototype 模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些 “易变类” 拥有 “稳定的接口”。</p>\n<p>Prototype 模式对于 “如何创建易变类的实体对象” 采用 “原型克隆” 的方法来做，它使得我们可以非常灵活地动态创建 “拥有某些稳定接口” 的新对象 —— 所需工作仅仅是注册一个新类的对象（即原型），然后在任何需要的地方 Clone。</p>\n<p>Prototype 模式中的 Clone 方法可以利用某些框架中的序列化来实现深拷贝。</p>\n<h2 id=\"builder构建器\"><a class=\"anchor\" href=\"#builder构建器\">#</a> Builder（构建器）</h2>\n<h3 id=\"动机motivation-8\"><a class=\"anchor\" href=\"#动机motivation-8\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，有时候面临着 “一个复杂对象” 的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p>\n<p>如何应对这种变化？如何提供一种 “封装机制” 来隔离出 “复杂对象的各个部分” 的变化，从而保持系统中的 “稳定构建算法” 不随着需求改变而改变？</p>\n<h3 id=\"模式定义-9\"><a class=\"anchor\" href=\"#模式定义-9\">#</a> 模式定义</h3>\n<p>将一个复杂对象的构建与其表示相分离，使得同样的构建过程（稳定）可以创建不同的表示（变化）。</p>\n<h3 id=\"结构structure-9\"><a class=\"anchor\" href=\"#结构structure-9\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319155607760.png\" alt=\"image-20230319155607760\" /></p>\n<h3 id=\"要点总结-9\"><a class=\"anchor\" href=\"#要点总结-9\">#</a> 要点总结</h3>\n<p>Builder 模式主要用于 “分步骤构建一个复杂的对象”。在这其中 “分，步骤” 是一个稳定的算法，而复杂对象的各个部分则经常变化。</p>\n<p>变化点在哪里，封装哪里 - Builder 模式主要在于应对 “复杂对象各个部分” 的频繁需求变动。其缺点在于难以应对 “分步骤构建算法” 的需求变动。</p>\n<p>在 Builder 模式中，要注意不同语言中构造器内调用虚函数的差别（C++ vs. C#）。</p>\n<h2 id=\"singleton单件模式\"><a class=\"anchor\" href=\"#singleton单件模式\">#</a> Singleton（单件模式）</h2>\n<h3 id=\"动机motivation-9\"><a class=\"anchor\" href=\"#动机motivation-9\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，经常有这样一些特殊的类，必须保证它们在系统中只存在一个实例，才能确保它们的逻辑正确性、以及良好的效率。</p>\n<p>如何绕过常规的构造器，提供一种机制来保证一个类只有一个实例？</p>\n<p>这应该是类设计者的责任，而不是使用者的责任。</p>\n<h3 id=\"模式定义-10\"><a class=\"anchor\" href=\"#模式定义-10\">#</a> 模式定义</h3>\n<p>保证一个类仅有一个实例，并提供一个该实例的全局访问点。</p>\n<h3 id=\"结构structure-10\"><a class=\"anchor\" href=\"#结构structure-10\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319163055869.png\" alt=\"image-20230319163055869\" /></p>\n<h3 id=\"要点总结-10\"><a class=\"anchor\" href=\"#要点总结-10\">#</a> 要点总结</h3>\n<p>Singleton 模式中的实例构造器可以设置为 protected 以允许子类派生。</p>\n<p>Singleton 模式一般不要支持拷贝构造函数和 Clone 接口，因为这有可能导致多个对象实例，与 Singleton 模式的初衷违背。</p>\n<p>如何实现多线程环境下安全的 Singleton? 注意对双检查锁的正确实现。</p>\n<h2 id=\"flyweight享元模式\"><a class=\"anchor\" href=\"#flyweight享元模式\">#</a> Flyweight（享元模式）</h2>\n<h3 id=\"动机motivation-10\"><a class=\"anchor\" href=\"#动机motivation-10\">#</a> 动机（Motivation）</h3>\n<p>在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价 -- 主要指内存需求方面的代价。</p>\n<p>如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</p>\n<h3 id=\"模式定义-11\"><a class=\"anchor\" href=\"#模式定义-11\">#</a> 模式定义</h3>\n<p>运用共享技术有效地支持大量细粒度的对象。</p>\n<h3 id=\"结构structure-11\"><a class=\"anchor\" href=\"#结构structure-11\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319163713933.png\" alt=\"image-20230319163713933\" /></p>\n<h3 id=\"要点总结-11\"><a class=\"anchor\" href=\"#要点总结-11\">#</a> 要点总结</h3>\n<p>面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑对象的代价问题。Flyweight 主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。</p>\n<p>Flyweight 采用对象共享的做法来降低系统中对象的个数，从而降低细粒度对象给系统带来的内存压力。在具体实现方面，要注意对象状态的处理。</p>\n<p>对象的数量太大从而导致对象内存开销加大 —— 什么样的数量才算大？这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</p>\n<h2 id=\"facade门面模式\"><a class=\"anchor\" href=\"#facade门面模式\">#</a> Facade（门面模式）</h2>\n<h3 id=\"动机motivation-11\"><a class=\"anchor\" href=\"#动机motivation-11\">#</a> 动机（Motivation）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319165543373.png\" alt=\"image-20230319165543373\" /></p>\n<p>上述 A 方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。</p>\n<p>如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</p>\n<h3 id=\"模式定义-12\"><a class=\"anchor\" href=\"#模式定义-12\">#</a> 模式定义</h3>\n<p>为子系统中的一组接口提供一个一致（稳定）的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。</p>\n<h3 id=\"结构structure-12\"><a class=\"anchor\" href=\"#结构structure-12\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319165854874.png\" alt=\"image-20230319165854874\" /></p>\n<h3 id=\"要点总结-12\"><a class=\"anchor\" href=\"#要点总结-12\">#</a> 要点总结</h3>\n<p>从客户程序的角度来看，Facade 模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种 “解耦” 的效果内部子系统的任何变化不会影响到 Facade 接口的变化。</p>\n<p>Facade 设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade 很多时候更是一种架构设计模式。Facade 设计模式并非一个集装箱，可以任意地放进任何多个对象。</p>\n<p>Facade 模式中组件的内部应该是 “相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。</p>\n<h2 id=\"proxy代理模式\"><a class=\"anchor\" href=\"#proxy代理模式\">#</a> Proxy（代理模式）</h2>\n<h3 id=\"动机motivation-12\"><a class=\"anchor\" href=\"#动机motivation-12\">#</a> 动机（Motivation）</h3>\n<p>在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等）直接访问会给使用者、或者系统结构带来很多麻烦。</p>\n<p>如何在不失去透明操作对象的同时来管理 / 控制这些对象特有的复杂性？增加一层间接层是软件开发中常见的解决方式。</p>\n<h3 id=\"模式定义-13\"><a class=\"anchor\" href=\"#模式定义-13\">#</a> 模式定义</h3>\n<p>为其他对象提供一种代理以控制（隔离，使用接口）对这个对象的访问。</p>\n<h3 id=\"结构structure-13\"><a class=\"anchor\" href=\"#结构structure-13\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319171028001.png\" alt=\"image-20230319171028001\" /></p>\n<h3 id=\"要点总结-13\"><a class=\"anchor\" href=\"#要点总结-13\">#</a> 要点总结</h3>\n<p>“增加一层间接层” 是软件系统中对许多复杂问题的一种常见解决方法。在面向对象系统中，直接使用某些对象会带来很多问题，作为间接层的 proxy 对象便是解决这一问题的常用手段。</p>\n<p>具体 proxy 设计模式的实现方法、实现粒度都相差很大，有些可能对单个对象做细粒度的控制，如 copy-on-write 技术，有些可能对组件模块提供抽象代理层，在架构层次对对象做 proxy。</p>\n<p>Proxy 并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候损及一些透明性是可以接受的。</p>\n<h2 id=\"adapter适配器\"><a class=\"anchor\" href=\"#adapter适配器\">#</a> Adapter（适配器）</h2>\n<h3 id=\"动机motivation-13\"><a class=\"anchor\" href=\"#动机motivation-13\">#</a> 动机（Motivation）</h3>\n<p>在软件系统中，由于应用环境的变化，常常需要将 “一些现存的对象” 放在新的环境中应用，但是新环境要求的接口是这些现存对象，所不满足的。</p>\n<p>如何应对这种 “迁移的变化”？如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口？</p>\n<h3 id=\"模式定义-14\"><a class=\"anchor\" href=\"#模式定义-14\">#</a> 模式定义</h3>\n<p>将一个类的接口转换成客户希望的另一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<h3 id=\"结构structure-14\"><a class=\"anchor\" href=\"#结构structure-14\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319172104852.png\" alt=\"image-20230319172104852\" /></p>\n<h3 id=\"要点总结-14\"><a class=\"anchor\" href=\"#要点总结-14\">#</a> 要点总结</h3>\n<p>Adapter 模式主要应用于 “希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</p>\n<p>GoF 23 定义了两种 Adapter 模式的实现结构：对象适配器和类适配器。但类适配器采用 “多继承” 的实现方式，一般不推荐使用。对象适配器采用 “对象组合” 的方式，更符合松耦合精神。</p>\n<p>Adapter 模式可以实现的非常灵活，不必拘泥于 GoF 23 中定义的两种结构。例如，完全可以将 Adapter 模式中的 “现存对象” 作为新的接口方法参数，来达到适配的目的。</p>\n<h2 id=\"mediator中介者\"><a class=\"anchor\" href=\"#mediator中介者\">#</a> Mediator（中介者）</h2>\n<h3 id=\"动机motivation-14\"><a class=\"anchor\" href=\"#动机motivation-14\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需求的更改，这种直接的引用关系将面临不断的变化。</p>\n<p>在这种情况下，我们可使用一个 “中介对象” 来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。</p>\n<h3 id=\"模式定义-15\"><a class=\"anchor\" href=\"#模式定义-15\">#</a> 模式定义</h3>\n<p>用一个中介对象来封装（封装变化）一系列的对象交互。中介者使各对象不需要显式的相互引用（编译时依赖→运行时依赖），从而使其耦合松散（管理变化），而且可以独立地改变它们之间的交互。</p>\n<h3 id=\"结构structure-15\"><a class=\"anchor\" href=\"#结构structure-15\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319180113216.png\" alt=\"image-20230319180113216\" /></p>\n<h3 id=\"要点总结-15\"><a class=\"anchor\" href=\"#要点总结-15\">#</a> 要点总结</h3>\n<p>将多个对象间复杂的关联关系解耦， Mediator 模式将多个对象间的控制逻辑进行集中管理，变 “多个对象互相关联” 为 “多个对象和一个中介者关联”，简化了系统的维护，抵御了可能的变化。</p>\n<p>随着控制逻辑的复杂化， Mediator 具体对象的实现可能相当复杂。这时候可以对 Mediator 对象进行分解处理。</p>\n<p>Facade 模式是解耦系统间（单向）的对象关联关系；Mediator 模式是解耦系统内各个对象之间（双向）的关联关系。</p>\n<h2 id=\"state状态模式\"><a class=\"anchor\" href=\"#state状态模式\">#</a> State（状态模式）</h2>\n<h3 id=\"动机motivation-15\"><a class=\"anchor\" href=\"#动机motivation-15\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</p>\n<p>如何在运行时根据对象的状态来透明地更改对象的行为？而不会为对象操作和状态转化之间引入紧耦合？</p>\n<h3 id=\"模式定义-16\"><a class=\"anchor\" href=\"#模式定义-16\">#</a> 模式定义</h3>\n<p>允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。</p>\n<h3 id=\"结构structure-16\"><a class=\"anchor\" href=\"#结构structure-16\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319183131177.png\" alt=\"image-20230319183131177\" /></p>\n<h3 id=\"要点总结-16\"><a class=\"anchor\" href=\"#要点总结-16\">#</a> 要点总结</h3>\n<p>State 模式将所有与一个特定状态相关的行为都放入一个 State 的子类对象中，在对象状态切换时，切换相应的对象；但同时维持 State 的接口，这样实现了具体操作与状态转换之间的解耦。</p>\n<p>为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况，因为转换是原子性的 —— 即要么彻底转换过来，要么不转换。</p>\n<p>如果 State 对象没有实例变量，那么各个上下文可以共享同一个 State 对象，从而节省对象开销。</p>\n<h2 id=\"memento备忘录\"><a class=\"anchor\" href=\"#memento备忘录\">#</a> Memento（备忘录）</h2>\n<h3 id=\"动机motivation-16\"><a class=\"anchor\" href=\"#动机motivation-16\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</p>\n<p>如何实现对象状态的良好保存与恢复？但同时又不会因此而破坏对象本身的封装性。</p>\n<h3 id=\"模式定义-17\"><a class=\"anchor\" href=\"#模式定义-17\">#</a> 模式定义</h3>\n<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</p>\n<h3 id=\"结构structure-17\"><a class=\"anchor\" href=\"#结构structure-17\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230319185145722.png\" alt=\"image-20230319185145722\" /></p>\n<h3 id=\"要点总结-17\"><a class=\"anchor\" href=\"#要点总结-17\">#</a> 要点总结</h3>\n<p>备忘录（Memento）存储原发器（Originator）对象的内部状态，在需要时恢复原发器状态。</p>\n<p>Memento 模式的核心是信息隐藏，即 Originator 需要向外接隐藏信息，保持其封装性。但同时又需要将状态保持到外界（Memento）。</p>\n<p>由于现代语言运行时（如 C#、Java 等）都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现 Memento 模式。</p>\n<h2 id=\"composite组合模式\"><a class=\"anchor\" href=\"#composite组合模式\">#</a> Composite（组合模式）</h2>\n<h3 id=\"动机motivation-17\"><a class=\"anchor\" href=\"#动机motivation-17\">#</a> 动机（Motivation）</h3>\n<p>在软件在某些情况下，客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口）的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</p>\n<p>如何将 “客户代码与复杂的对象容器结构” 解耦？让对象容器自己来实现自身的复杂结构，从而使得客户代码就像处理简单对象一样来处理复杂的对象容器？</p>\n<h3 id=\"模式定义-18\"><a class=\"anchor\" href=\"#模式定义-18\">#</a> 模式定义</h3>\n<p>将对象组合成树形结构以表示 “部分 - 整体” 的层次结构。Composite 使得用户对单个对象和组合对象的使用具有一致性（稳定）。</p>\n<h3 id=\"结构structure-18\"><a class=\"anchor\" href=\"#结构structure-18\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320092054885.png\" alt=\"image-20230320092054885\" /></p>\n<h3 id=\"要点总结-18\"><a class=\"anchor\" href=\"#要点总结-18\">#</a> 要点总结</h3>\n<p>Composite 模式采用树形结构来实现普遍存在的对象容器，从而将 “一对多” 的关系转化为 “一对一” 的关系，使得客户代码可以一致地（复用）处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</p>\n<p>将 “客户代码与复杂的对象容器结构” 解耦是 Composite 的核心思想，解耦之后，客户代码将与纯粹的抽象接口 -— 而非对象容器的内部实现结构 -- 发生依赖，从而更能 “应对变化”。</p>\n<p>Composite 模式在具体实现中，可以让父对象中的子对象反向追溯；如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。</p>\n<h2 id=\"iterator迭代器\"><a class=\"anchor\" href=\"#iterator迭代器\">#</a> Iterator（迭代器）</h2>\n<h3 id=\"动机motivation-18\"><a class=\"anchor\" href=\"#动机motivation-18\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素；同时这种 “透明遍历” 也为 “同一种算法在多种集合对象上进行操作” 提供了可能。</p>\n<p>使用面向对象技术将这种遍历机制抽象为 “迭代器对象” 为 “应对变化中的集合对象” 提供了一种优雅的方式。</p>\n<h3 id=\"模式定义-19\"><a class=\"anchor\" href=\"#模式定义-19\">#</a> 模式定义</h3>\n<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露（稳定）该对象的内部表示。</p>\n<h3 id=\"结构structure-19\"><a class=\"anchor\" href=\"#结构structure-19\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320092135992.png\" alt=\"image-20230320092135992\" /></p>\n<h3 id=\"要点总结-19\"><a class=\"anchor\" href=\"#要点总结-19\">#</a> 要点总结</h3>\n<p>迭代抽象：访问一个聚合对象的内容而无需暴露它的内部表示。</p>\n<p>迭代多态：为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。</p>\n<p>迭代器的健壮性考虑：遍历的同时更改迭代器所在的集合结构，会导致问题。</p>\n<h2 id=\"chain-of-responsibility职责链\"><a class=\"anchor\" href=\"#chain-of-responsibility职责链\">#</a> Chain of Responsibility（职责链）</h2>\n<h3 id=\"动机motivation-19\"><a class=\"anchor\" href=\"#动机motivation-19\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来一请求发送者与接受者的紧耦合。</p>\n<p>如何使请求的发送者不需要指定具体的接受者？让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。</p>\n<h3 id=\"模式定义-20\"><a class=\"anchor\" href=\"#模式定义-20\">#</a> 模式定义</h3>\n<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。</p>\n<h3 id=\"结构structure-20\"><a class=\"anchor\" href=\"#结构structure-20\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320092214650.png\" alt=\"image-20230320092214650\" /></p>\n<h3 id=\"要点总结-20\"><a class=\"anchor\" href=\"#要点总结-20\">#</a> 要点总结</h3>\n<p>Chain of Responsibility 模式的应用场合在于 “一个请求可能有多个接受者，但是最后真正的接受者只有一个”，这时候请求发送者与接受者的耦合有可能出现 “变化脆弱” 的症状，职责链的目的就是将二者解耦，从而更好地应对变化。</p>\n<p>应用了 Chain of Responsibility 模式后，对象的职责分派将更具灵活性。我们可以在运行时动态添加 / 修改请求的处理职责。</p>\n<p>如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。</p>\n<h2 id=\"cammand命令模式\"><a class=\"anchor\" href=\"#cammand命令模式\">#</a> Cammand（命令模式）</h2>\n<h3 id=\"动机motivation-20\"><a class=\"anchor\" href=\"#动机motivation-20\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，“行为请求者” 与 “行为实现者” 通常呈现一种 “紧耦合”。但在某些场合 -- 比如需要对行为进行 “记录、撤销 / 重（undo/redo）、事务” 等处理，这种无法抵御变化的紧耦合是不合适的。</p>\n<p>在这种情况下，如何将 “行为请求者” 与 “行为实现者” 解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p>\n<h3 id=\"模式定义-21\"><a class=\"anchor\" href=\"#模式定义-21\">#</a> 模式定义</h3>\n<p>将一个请求（行为）封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>\n<h3 id=\"结构structure-21\"><a class=\"anchor\" href=\"#结构structure-21\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320092306793.png\" alt=\"image-20230320092306793\" /></p>\n<h3 id=\"要点总结-21\"><a class=\"anchor\" href=\"#要点总结-21\">#</a> 要点总结</h3>\n<p>Command 模式的根本目的在于将 “行为请求者” 与 “行为实现者” 解耦，在面向对象语言中，常见的实现手段是 “将行为抽象为对象”。</p>\n<p>实现 Command 接口的具体命令对象 <code>ConcreteCommand</code>  有时候根据需要可能会保存一些额外的状态信息。通过使用 Composite 模式，可以将多个 “命令” 封装为一个 “复合命令” <code>MacroCommand</code> 。</p>\n<p>Command 模式与 C++ 中的函数对象有些类似。但两者定义行为接口的规范有所区别： Command 以面向对象中的 “接口 - 实现” 来定义行为接口规范，更严格，但有性能损失；C++ 函数对象以函数签名来定义行为接口规范，更灵活，性能更高。</p>\n<h2 id=\"vistor访问器\"><a class=\"anchor\" href=\"#vistor访问器\">#</a> Vistor（访问器）</h2>\n<h3 id=\"动机motivation-21\"><a class=\"anchor\" href=\"#动机motivation-21\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为（方法） ，如果直接在基类中做这样的更改，将会给子类带来很繁重的变更负担，甚至破坏原有设计。</p>\n<p>如何在不更改类层次结构的前提下，在运行时根据需要透明地为类层次结构上的各个类动态添加新的操作，从而避免上述问题？</p>\n<h3 id=\"模式定义-22\"><a class=\"anchor\" href=\"#模式定义-22\">#</a> 模式定义</h3>\n<p>表示一个作用于某对象结构中的各元素的操作。使得可以在不改变（稳定）各元素的类的前提下定义（扩展）作用于这些元素的新操作（变化）。</p>\n<h3 id=\"结构structure-22\"><a class=\"anchor\" href=\"#结构structure-22\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320092521965.png\" alt=\"image-20230320092521965\" /></p>\n<h3 id=\"要点总结-22\"><a class=\"anchor\" href=\"#要点总结-22\">#</a> 要点总结</h3>\n<p>Visitor 模式通过所谓双重分发（double dispatch）来实现在不更改（不添加新的操作 - 编译时） Element 类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作（支持变化）。</p>\n<p>所谓双重分发即 Visitor 模式中间包括了两个多态分发（注意其中的。多态机制）：第一个为 accept 方法的多态辨析；第二个为 <code>visitElementX</code>  方法的多态辨析。</p>\n<p>Visitor 模式的最大缺点在于扩展类层次结构（增添新的 Element 子类），会导致 Visitor 类的改变。因此 Visitor 模式适用于 “Element 类。层次结构稳定，而其中的操作却经常面临频繁改动”。</p>\n<h2 id=\"interpreter解析器\"><a class=\"anchor\" href=\"#interpreter解析器\">#</a> Interpreter（解析器）</h2>\n<h3 id=\"动机motivation-22\"><a class=\"anchor\" href=\"#动机motivation-22\">#</a> 动机（Motivation）</h3>\n<p>在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</p>\n<p>在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。</p>\n<h3 id=\"模式定义-23\"><a class=\"anchor\" href=\"#模式定义-23\">#</a> 模式定义</h3>\n<p>给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。</p>\n<h3 id=\"结构structure-23\"><a class=\"anchor\" href=\"#结构structure-23\">#</a> 结构（Structure）</h3>\n<p><img data-src=\"/2023/03/20/cpp/design-patterns/Design%20Patterns/image-20230320093646767.png\" alt=\"image-20230320093646767\" /></p>\n<h3 id=\"要点总结-23\"><a class=\"anchor\" href=\"#要点总结-23\">#</a> 要点总结</h3>\n<p>Interpreter 模式的应用场合是 Interpreter 模式应用中的难点，只有满足 “业务规则频繁变化，且类似的结构不断重复出现，并且容易抽象为语法规则的问题” 才适合使用 Interpreter 模式。</p>\n<p>使用 Interpreter 模式来表示文法规则，从而可以使用面向对象技巧来方便地 “扩展” 文法。</p>\n<p>Interpreter 模式比较适合简单的文法表示，对于复杂的文法表示，Interpreter 模式会产生比较大的类层次结构，需要求助于语法分析生成器这样的标准工具。</p>\n<h2 id=\"设计模式总结\"><a class=\"anchor\" href=\"#设计模式总结\">#</a> 设计模式总结</h2>\n<p><mark>管理变化，提高复用！</mark></p>\n<p><mark>分解 vs. 抽象</mark></p>\n<p><mark>八大原则</mark></p>\n<p><mark>重构技法</mark></p>\n",
            "tags": [
                "Design-Patterns",
                "学习笔记"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/02/10/csharp/clr-via-csharp/Chapter%2030%20Hybrid%20Thread%20Synchronization%20Constructs/",
            "url": "http://sakupinera.github.io/2023/02/10/csharp/clr-via-csharp/Chapter%2030%20Hybrid%20Thread%20Synchronization%20Constructs/",
            "title": "CLR via C# - Chapter 30 Hybrid Thread Synchronization",
            "date_published": "2023-02-09T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-30-hybrid-thread-synchronization-constructs\"><a class=\"anchor\" href=\"#chapter-30-hybrid-thread-synchronization-constructs\">#</a> Chapter 30 Hybrid Thread Synchronization Constructs</h1>\n<h2 id=\"a-simple-hybrid-lock\"><a class=\"anchor\" href=\"#a-simple-hybrid-lock\">#</a> A Simple Hybrid Lock</h2>\n<blockquote>\n<p>So, without further ado, let me start off by showing you an example of a hybrid thread synchronization lock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleHybridLock</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// The Int32 is used by the primitive user-mode constructs (Interlocked methods)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_waiters <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// The AutoResetEvent is the primitive kernel-mode construct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">AutoResetEvent</span> m_waiterLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AutoResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Indicate that this thread wants the lock</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Lock was free, no contention, just return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Another thread has the lock (contention), make this thread wait</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bad performance hit here</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// When WaitOne returns, this thread now has the lock</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// This thread is releasing the lock</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No other threads are waiting, just return</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// Other threads are waiting, wake 1 of them</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bad performance hit here</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The SimpleHybridLock contains two fields: an Int32, which will be manipulated via the primitive user-mode constructs, and an AutoResetEvent, which is a primitive kernel-mode construct.  To get great performance, the lock tries to use the Int32 and avoid using the AutoResetEvent as  much as possible. Just constructing a SimpleHybridLock object causes the AutoResetEvent to be  created, and this is a massive performance hit compared to the overhead associated with the Int32 field. Later in this chapter, we’ll see another hybrid construct (AutoResetEventSlim) that avoids the  performance hit of creating the AutoResetEvent until the first time contention is detected from  multiple threads accessing the lock at the same time. The Dispose method closes the AutoResetEvent, and this is also a big performance hit.</p>\n</blockquote>\n<blockquote>\n<p>Although it would be nice to improve the performance of constructing and disposing of a  SimpleHybridLock object, it would be better to focus on the performance of its Enter and Leave methods because these methods tend to be called many, many times over the object’s lifetime. Let’s  focus on these methods now.</p>\n</blockquote>\n<blockquote>\n<p>The first thread to call Enter causes Interlocked.Increment to add one to the m_waiters field, making its value 1. This thread sees that there were zero threads waiting for this lock, so the  thread gets to return from its call to Enter. The thing to appreciate here is that the thread acquired  the lock very quickly. Now, if another thread comes along and calls Enter, this second thread increments m_waiters to 2 and sees that another thread has the lock, so this thread blocks by calling  WaitOne using the AutoResetEvent. Calling WaitOne causes the thread to transition into the  Windows’ kernel, and this is a big performance hit. However, the thread must stop running anyway,  so it is not too bad to have a thread waste some time to stop completely. The good news is that the  thread is now blocked, and so it is not wasting CPU time by spinning on the CPU, which is what the  SimpleSpinLock’s Enter method, introduced in Chapter 29, does.</p>\n</blockquote>\n<blockquote>\n<p>Now let’s look at the Leave method. When a thread calls Leave, Interlocked.Decrement is  called to subtract 1 from the m_waiters field. If m_waiters is now 0, then no other threads are  blocked inside a call to Enter and the thread calling Leave can simply return. Again, think about  how fast this is: leaving a lock means that a thread subtracts 1 from an Int32, performs a quick if test, and then returns! On the other hand, if the thread calling Leave sees that m_waiters was not 1,  then the thread knows that there is contention and that there is at least one other thread blocked in  the kernel. This thread must wake up one (and only one) of the blocked threads. It does this by calling  Set on AutoResetEvent. This is a performance hit, because the thread must transition into the kernel and back, but this transition occurs only when there was contention. Of course, AutoResetEvent ensures that only one blocked thread wakes up; any other threads blocked on the AutoResetEvent will continue to block until the newly unblocked thread eventually calls Leave.</p>\n</blockquote>\n<p>💡注意：在实际应用中，任何线程可以在任何时间调用  <code>Leave</code> ， 因为  <code>Enter</code>  方法没有记录哪一个线程成功获得了锁。很容易添加字段和代码来维护这种信息，但会增大锁对象自身需要的内存，并损害  <code>Enter</code>  和  <code>Leave</code>  方法的性能，因为它们现在必须操作这个字段。我情愿有一个性能高超的锁，并确保我的代码以正确方式使用它。你会注意到，事件和信号量都没有维护这种信息，只有互斥体才有维护。</p>\n<p>💡小结： <code>SimpleHybridLock</code>  包含两个字段：一个  <code>Int32</code> ，由基元用户模式的构造来操作；以及一个  <code>AutoResetEvent</code> ，它是一个基元内核模式的构造。为了获得出色的性能，锁要尽量操作  <code>Int32</code> ，尽量少操作  <code>AutoResetEvent</code> 。每次构造  <code>SimpleHybridLock</code>  对象就会创建  <code>AutoResetEvent</code> ；和  <code>Int32</code>  字段相比，它对性能的影响大得多。多个线程同时访问锁时，只有在第一次检测到竞争时才会创建  <code>AutoResetEvent</code> ，这样就避免了性能损失。</p>\n<h2 id=\"spinning-thread-ownership-and-recursion\"><a class=\"anchor\" href=\"#spinning-thread-ownership-and-recursion\">#</a> Spinning, Thread Ownership, and Recursion</h2>\n<blockquote>\n<p>Because transitions into the kernel incur such a big performance hit and threads tend to hold on to a  lock for very short periods of time, an application’s overall performance can be improved by having  a thread spin in user mode for a little while before having the thread transition to kernel mode. If  the lock that the thread is waiting for becomes available while spinning, then the transition to kernel  mode is avoided.</p>\n</blockquote>\n<blockquote>\n<p>In addition, some locks impose a limitation where the thread that acquires the lock must be the  thread that releases the lock. And some locks allow the currently owning thread to own the lock recursively. The Mutex lock is an example of a lock that has these characteristics.1 Using some fancy  logic, it is possible to build a hybrid lock that offers spinning, thread ownership, and recursion. Here is  what the code looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnotherHybridLock</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// The Int32 is used by the primitive user-mode constructs (Interlocked methods)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_waiters <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// The AutoResetEvent is the primitive kernel-mode construct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">AutoResetEvent</span> m_waiterLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AutoResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// This field controls spinning in an effort to improve performance</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_spincount <span class=\"token operator\">=</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Arbitrarily chosen count</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// These fields indicate which thread owns the lock and how many times it owns it</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_owningThreadId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m_recursion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// If calling thread already owns the lock, increment recursion count and return</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token class-name\">Int32</span> threadId <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId <span class=\"token operator\">==</span> m_owningThreadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_recursion<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// The calling thread doesn't own the lock, try to get it</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token class-name\">SpinWait</span> spinwait <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SpinWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> spinCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> spinCount <span class=\"token operator\">&lt;</span> m_spincount<span class=\"token punctuation\">;</span> spinCount<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// If the lock was free, this thread got it; set some state and return</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_waiters<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> GotLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">// Black magic: give other threads a chance to run </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// in hopes that the lock will be released</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> spinwait<span class=\"token punctuation\">.</span><span class=\"token function\">SpinOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">// Spinning is over and the lock was still not obtained, try one more time</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token comment\">// Still contention, this thread must wait</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for the lock; performance hit</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token comment\">// When this thread wakes, it owns the lock; set some state and return</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> GotLock<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token comment\">// When a thread gets the lock, we record its ID and </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">// indicate that the thread owns the lock once</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> m_owningThreadId <span class=\"token operator\">=</span> threadId<span class=\"token punctuation\">;</span> m_recursion <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token comment\">// If the calling thread doesn't own the lock, there is a bug</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token class-name\">Int32</span> threadId <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId <span class=\"token operator\">!=</span> m_owningThreadId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SynchronizationLockException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lock not owned by calling thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// Decrement the recursion count. If this thread still owns the lock, just return</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>m_recursion <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> m_owningThreadId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No thread owns the lock now</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token comment\">// If no other threads are waiting, just return</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token comment\">// Other threads are waiting, wake 1 of them</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bad performance hit here</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_waiterLock<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>As you can see, adding extra behavior to the lock increases the number of fields it has, which increases its memory consumption. The code is also more complex, and this code must execute, which  decreases the lock’s performance. In Chapter 29’s “Event Constructs” section, I compared the performance of incrementing an Int32 without any locking, with a primitive user-mode construct, and with  a kernel-mode construct. I repeat the results of those performance tests here and I include the results  of using the SimpleHybridlock and the AnotherHybridLock. The results are in fastest to slowest order.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> Fastest</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> M<span class=\"token punctuation\">:</span> <span class=\"token number\">69</span> <span class=\"token operator\">~</span>9x slower</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> SpinLock<span class=\"token punctuation\">:</span> <span class=\"token number\">164</span> <span class=\"token operator\">~</span>21x slower</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> SimpleHybridLock<span class=\"token punctuation\">:</span> <span class=\"token number\">164</span> <span class=\"token operator\">~</span>21x slower <span class=\"token punctuation\">(</span>similar <span class=\"token class-name\">to</span> SpinLock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> AnotherHybridLock<span class=\"token punctuation\">:</span> <span class=\"token number\">230</span> <span class=\"token operator\">~</span>29x slower <span class=\"token punctuation\">(</span>due to ownership<span class=\"token operator\">/</span>recursion<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> SimpleWaitLock<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">854</span> <span class=\"token operator\">~</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>107x slower</pre></td></tr></table></figure><blockquote>\n<p>It is worth noting that the AnotherHybridLock hurts performance as compared to using the  SimpleHybridLock. This is due to the additional logic and error checking required managing the  thread ownership and recursion behaviors. As you see, every behavior added to a lock impacts its  performance.</p>\n</blockquote>\n<p>💡小结：由于转换为内核模式会造成巨大的性能损失，而且线程占有锁的时间通常都很短，所以为了提升应用程序的总体性能，可以让一个线程在用户模式中 “自旋” 一小段时间，再让线程转换为内核模式。如果线程正在等待的锁在线程 “自旋” 期间变得可用，就能避免向内核模式的转换了。此外，有的锁限制只能由获得锁的线程释放锁。有的锁允许当前拥有它的线程递归地拥有锁 (多次拥有)， <code>Mutex</code>  锁就是这样一个例子。为锁添加了额外的行为之后，会增大它拥有的字段数量，进而增大内存消耗。代码还变得更复杂了，而且这些代码必须执行，造成锁的性能的下降。</p>\n<h2 id=\"hybrid-constructs-in-the-framework-class-library\"><a class=\"anchor\" href=\"#hybrid-constructs-in-the-framework-class-library\">#</a> Hybrid Constructs in the Framework Class Library</h2>\n<blockquote>\n<p>The FCL ships with many hybrid constructs that use fancy logic to keep your threads in user mode,  improving your application’s performance. Some of these hybrid constructs also avoid creating the  kernel-mode construct until the first time threads contend on the construct. If threads never contend on the construct, then your application avoids the performance hit of creating the object and  also avoids allocating memory for the object. A number of the constructs also support the use of a  CancellationToken (discussed in Chapter 27, “Compute-Bound Asynchronous Operations”) so that  a thread can forcibly unblock other threads that might be waiting on the construct. In this section, I  introduce you to these hybrid constructs.</p>\n</blockquote>\n<h3 id=\"the-manualreseteventslim-and-semaphoreslim-classes\"><a class=\"anchor\" href=\"#the-manualreseteventslim-and-semaphoreslim-classes\">#</a> The ManualResetEventSlim and SemaphoreSlim Classes</h3>\n<blockquote>\n<p>The first two hybrid constructs are System.Threading.ManualResetEventSlim and System. Threading.SemaphoreSlim.2 These constructs work exactly like their kernel-mode counterparts,  except that both employ spinning in user mode, and they both defer creating the kernel-mode construct until the first time contention occurs. Their Wait methods allow you to pass a timeout and a  CancellationToken. Here is what these classes look like (some method overloads are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManualResetEventSlim</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ManualResetEventSlim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> spinCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsSet <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> SpinCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">WaitHandle</span> WaitHandle <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SemaphoreSlim</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">SemaphoreSlim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> initialCount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> maxCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> releaseCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// Special method for use with async and await (see Chapter 28)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Boolean<span class=\"token punctuation\">></span></span> <span class=\"token function\">WaitAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> CurrentCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">WaitHandle</span> AvailableWaitHandle <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"the-monitor-class-and-sync-blocks\"><a class=\"anchor\" href=\"#the-monitor-class-and-sync-blocks\">#</a> The Monitor Class and Sync Blocks</h3>\n<blockquote>\n<p>Probably the most-used hybrid thread synchronization construct is the Monitor class, which provides  a mutual-exclusive lock supporting spinning, thread ownership, and recursion. This is the most-used  construct because it has been around the longest, C# has a built-in keyword to support it, the just-intime (JIT) compiler has built-in knowledge of it, and the common language runtime (CLR) itself uses  it on your application’s behalf. However, as you’ll see, there are many problems with this construct,  making it easy to produce buggy code. I’ll start by explaining the construct, and then I’ll show the  problems and some ways to work around these problems.</p>\n</blockquote>\n<blockquote>\n<p>Every object on the heap can have a data structure, called a sync block, associated with it. A sync  block contains fields similar to that of the AnotherHybridLock class that appeared earlier in this  chapter. Specifically, it has fields for a kernel object, the owning thread’s ID, a recursion count, and  a waiting threads count. The Monitor class is a static class whose methods accept a reference to any heap object, and these methods manipulate the fields in the specified object’s sync block. Here is  what the most commonly used methods of the Monitor class look like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// You can also specify a timeout when entered the lock (not commonly used):</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// I’ll discuss the lockTaken argument later</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Boolean</span> lockTaken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TryEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Boolean</span> lockTaken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Now obviously, associating a sync block data structure with every object in the heap is quite  wasteful, especially because most objects’ sync blocks are never used. To reduce memory usage,  the CLR team uses a more efficient way to offer the functionality just described. Here’s how it works:  when the CLR initializes, it allocates an array of sync blocks in native heap. As discussed elsewhere in  this book, whenever an object is created in the heap, it gets two additional overhead fields associated  with it. The first overhead field, the type object pointer, contains the memory address of the type’s  type object. The second overhead field, the sync block index, contains an integer index into the array  of sync blocks.</p>\n</blockquote>\n<blockquote>\n<p>When an object is constructed, the object’s sync block index is initialized to -1, which indicates  that it doesn’t refer to any sync block. Then, when Monitor.Enter is called, the CLR finds a free sync  block in the array and sets the object’s sync block index to refer to the sync block that was found. In  other words, sync blocks are associated with an object on the fly. When Exit is called, it checks to  see whether there are any more threads waiting to use the object’s sync block. If there are no threads  waiting for it, the sync block is free, Exit sets the object’s sync block index back to -1, and the free  sync block can be associated with another object in the future.</p>\n</blockquote>\n<blockquote>\n<p>Figure 30-1 shows the relationship between objects in the heap, their sync block indexes, and  elements in the CLR’s sync block array. Object-A, Object-B, and Object-C all have their type object  pointer member set to refer to Type-T (a type object). This means that all three objects are of the  same type. As discussed in Chapter 4, “Type Fundamentals,” a type object is also an object in the  heap, and like all other objects, a type object has the two overhead members: a sync block index and  a type object pointer. This means that a sync block can be associated with a type object and a reference to a type object can be passed to Monitor’s methods. By the way, the sync block array is able  to create more sync blocks if necessary, so you shouldn’t worry about the system running out of sync  blocks if many objects are being synchronized simultaneously.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/10/csharp/clr-via-csharp/Chapter%2030%20Hybrid%20Thread%20Synchronization%20Constructs/image-20230207163104486.png\" alt=\"image-20230207163104486\" /></p>\n<blockquote>\n<p>Here is some code that demonstrates how the Monitor class was originally intended to be used.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PerformTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> m_timeOfLastTrans <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> LastTransaction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token class-name\">DateTime</span> temp <span class=\"token operator\">=</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>On the surface, this seems simple enough, but there is something wrong with this code. The problem is that each object’s sync block index is implicitly public. The following code demonstrates the  impact of this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SomeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This thread takes the object's public lock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Have a thread pool thread display the LastTransaction time</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// NOTE: The thread pool thread blocks until SomeMethod calls Monitor.Exit!</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>LastTransaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Execute some other code here... </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, the thread executing SomeMethod calls Monitor.Enter, taking the Transaction object’s publicly exposed lock. When the thread pool thread queries the LastTransaction property,  this property also calls Monitor.Enter to acquire the same lock, causing the thread pool thread  to block until the thread executing SomeMethod calls Monitor.Exit. Using a debugger, you can  determine that the thread pool thread is blocked inside the LastTransaction property, but it is very  hard to determine which other thread has the lock. If you do somehow figure out which thread has  the lock, then you have to figure out what code caused it to take the lock. This is very difficult, and  even worse, if you do figure it out, then the code might not be code that you have control over and  you might not be able to modify this code to fix the problem. Therefore, my suggestion to you is to  always use a private lock instead. Here’s how I’d fix the Transaction class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Object</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Each transaction has a PRIVATE lock now</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PerformTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Enter the private lock</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> m_timeOfLastTrans <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exit the private lock</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> LastTransaction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Enter the private lock</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token class-name\">DateTime</span> temp <span class=\"token operator\">=</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exit the private lock</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>If Transaction’s members were static, then simply make the m_lock field static, too, and  now the static members are thread safe.</p>\n</blockquote>\n<blockquote>\n<p>It should be clear from this discussion that Monitor should not have been implemented as a  static class; it should have been implemented like all the other locks: a class you instantiate and  call instance methods on. In fact, Monitor has many other problems associated with it that are all  because it is a static class. Here is a list of additional problems:</p>\n<ul>\n<li>\n<p>A variable can refer to a proxy object if the type of object it refers to is derived from the  System.MarshalByRefObject class (discussed in Chapter 22, “CLR Hosting and AppDomains”). When you call Monitor’s methods, passing a reference to a proxy object, you  are locking the proxy object, not the actual object that the proxy refers to.</p>\n</li>\n<li>\n<p>If a thread calls Monitor.Enter, passing it a reference to a type object that has been loaded  domain neutral (discussed in Chapter 22), the thread is taking a lock on that type across all  AppDomains in the process. This is a known bug in the CLR that violates the isolation that  AppDomains are supposed to provide. The bug is difficult to fix in a high-performance way,  so it never gets fixed. The recommendation is to never pass a reference to a type object into  Monitor’s methods.</p>\n</li>\n<li>\n<p>Because strings can be interned (as discussed in Chapter 14, “Chars, Strings, and Working with  Text”), two completely separate pieces of code could unknowingly get references to a single  String object in memory. If they pass the reference to the String object into Monitor’s  methods, then the two separate pieces of code are now synchronizing their execution with  each other unknowingly.</p>\n</li>\n<li>\n<p>When passing a string across an AppDomain boundary, the CLR does not make a copy of  the string; instead, it simply passes a reference to the string into the other AppDomain. This  improves performance, and in theory, it should be OK because String objects are immutable.  However, like all objects, String objects have a sync block index associated with them, which  is mutable, and this allows threads in different AppDomains to synchronize with each other  unknowingly. This is another bug in CLR’s AppDomain isolation story. The recommendation is  never to pass String references to Monitor’s methods.</p>\n</li>\n<li>\n<p>Because Monitor’s methods take an Object, passing a value type causes the value type to  get boxed, resulting in the thread taking a lock on the boxed object. Each time Monitor.Enter is called, a lock is taken on a completely different object and you get no thread synchronization at all.</p>\n</li>\n<li>\n<p>Applying the [MethodImpl(MethodImplOptions.Synchronized)] attribute to a method  causes the JIT compiler to surround the method’s native code with calls to Monitor.Enter and Monitor.Exit. If the method is an instance method, then this is passed to these methods, locking the implicitly public lock. If the method is static, then a reference to the type’s  type object is passed to these methods, potentially locking a domain-neutral type. The recommendation is to never use this attribute.</p>\n</li>\n<li>\n<p>When calling a type’s type constructor (discussed in Chapter 8, “Methods”), the CLR takes a  lock on the type’s type object to ensure that only one thread initializes the type object and its  static fields. Again, this type could be loaded domain neutral, causing a problem. For example,  if the type constructor’s code enters an infinite loop, then the type is unusable by all AppDomains in the process. The recommendation here is to avoid type constructors as much as  possible or least keep them short and simple.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Unfortunately, the story gets worse. Because it is so common for developers to take a lock, do  some work, and then release the lock within a single method, the C# language offers simplified syntax  via its lock keyword. Suppose that you write a method like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SomeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">lock</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>It <span class=\"token keyword\">is</span> <span class=\"token class-name\">equivalent</span> to having written the method like <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SomeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token class-name\">Boolean</span> lockTaken <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// An exception (such as ThreadAbortException) could occur here...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> lockTaken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lockTaken<span class=\"token punctuation\">)</span> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The first problem here is that the C# team felt that they were doing you a favor by calling  Monitor.Exit in a finally block. Their thinking was that this ensures that the lock is always  released no matter what happens inside the try block. However, this is not a good thing. If an  exception occurs inside the try block while changing state, then the state is now corrupted. When  the lock is exited in the finally block, another thread will now start manipulating the corrupted  state. It is better to have your application hang than it is to continue running with a corrupted  state and potential security holes. The second problem is that entering and leaving a try block  decreases the performance of the method. And some JIT compilers won’t inline a method that  contains a try block in it, which decreases performance even more. So now we have slower code  that lets threads access corrupted state.3 The recommendation is not to use C#’s lock statement.</p>\n</blockquote>\n<blockquote>\n<p>Now we get to the Boolean lockTaken variable. Here is the problem that this variable is trying  to solve. Let’s say that a thread enters the try block and before calling Monitor.Enter, the thread  is aborted (as discussed in Chapter 22). Now the finally block is called, but its code should not  exit the lock. The lockTaken variable solves this problem. It is initialized to false, which assumes  that the lock has not been entered into. Then, if Monitor.Enter is called and successfully takes the lock, it sets lockTaken to true. The finally block examines lockTaken to know whether to call  Monitor.Exit or not. By the way, the SpinLock structure also supports this lockTaken pattern.</p>\n</blockquote>\n<h3 id=\"the-readerwriterlockslim-class\"><a class=\"anchor\" href=\"#the-readerwriterlockslim-class\">#</a> The ReaderWriterLockSlim Class</h3>\n<blockquote>\n<p>It is common to have threads simply read the contents of some data. If this data is protected by a  mutual exclusive lock (like the SimpleSpinLock, SimpleWaitLock, SimpleHybridLock, AnotherHybridLock, SpinLock, Mutex, or Monitor), then if multiple threads attempt this access concurrently, only one thread gets to run and all the other threads are blocked, which can reduce scalability  and throughput in your application substantially. However, if all the threads want to access the data  in a read-only fashion, then there is no need to block them at all; they should all be able to access the  data concurrently. On the other hand, if a thread wants to modify the data, then this thread needs  exclusive access to the data. The ReaderWriterLockSlim construct encapsulates the logic to solve  this problem. Specifically, the construct controls threads like this:</p>\n<ul>\n<li>\n<p>When one thread is writing to the data, all other threads requesting access are blocked.</p>\n</li>\n<li>\n<p>When one thread is reading from the data, other threads requesting read access are allowed  to continue executing, but threads requesting write access are blocked.</p>\n</li>\n<li>\n<p>When a thread writing to the data has completed, either a single writer thread is unblocked  so it can access the data or all the reader threads are unblocked so that all of them can access  the data concurrently. If no threads are blocked, then the lock is free and available for the next  reader or writer thread that wants it.</p>\n</li>\n<li>\n<p>When all threads reading from the data have completed, a single writer thread is unblocked so  it can access the data. If no threads are blocked, then the lock is free and available for the next  reader or writer thread that wants it.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Here is what this class looks like (some method overloads are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReaderWriterLockSlim</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ReaderWriterLockSlim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LockRecursionPolicy</span> recursionPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterReadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryEnterReadLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitReadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryEnterWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Most applications will never query any of these properties </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsReadLockHeld <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsWriteLockHeld <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> CurrentReadCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> RecursiveReadCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> RecursiveWriteCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> WaitingReadCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> WaitingWriteCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">LockRecursionPolicy</span> RecursionPolicy <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">// Members related to upgrading from a reader to a writer not shown</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Here is some code that demonstrates the use of this construct.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ReaderWriterLockSlim</span> m_lock <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReaderWriterLockSlim</span><span class=\"token punctuation\">(</span>LockRecursionPolicy<span class=\"token punctuation\">.</span>NoRecursion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PerformTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">EnterWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// This code has exclusive access to the data...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_timeOfLastTrans <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">ExitWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> LastTransaction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">EnterReadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// This code has shared access to the data...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token class-name\">DateTime</span> temp <span class=\"token operator\">=</span> m_timeOfLastTrans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">ExitReadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>There are a few concepts related to this construct that deserve special mention. First, ReaderWriterLockSlim’s constructor allows you to pass in a LockRecursionPolicy flag, which is defined  as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LockRecursionPolicy</span> <span class=\"token punctuation\">&#123;</span> NoRecursion<span class=\"token punctuation\">,</span> SupportsRecursion <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>If you pass the SupportsRecursion flag, then the lock will add thread ownership and recursion  behaviors to the lock. As discussed earlier in this chapter, these behaviors negatively affect the lock’s  performance, so I recommend that you always pass LockRecursionPolicy.NoRecursion to the  constructor (as I’ve done). For a reader-writer lock, supporting thread ownership and recursion is phenomenally expensive, because the lock must keep track of all the reader threads that it has let into the  lock and keep a separate recursion count for each reader thread. In fact, to maintain all this information in a thread-safe way, the ReaderWriterLockSlim internally uses a mutually exclusive spinlock!  No, I’m not kidding.</p>\n</blockquote>\n<blockquote>\n<p>The ReaderWriterLockSlim class offers additional methods (not shown earlier) that allow a  reading thread to upgrade itself to a writer thread. Later, the thread can downgrade itself to a reader  thread. The thinking here is that a thread could start reading the data and based on the data’s contents, the thread might want to modify the data. To do this, the thread would upgrade itself from a  reader to a writer. Having the lock support this behavior deteriorates the lock’s performance, and I  don’t think that this is a useful feature at all. Here’s why: a thread can’t just turn itself from a reader into a writer. Other threads may be reading, too, and these threads will have to exit the lock completely before the thread trying to upgrade is allowed to become a writer. This is the same as having  the reader thread exit the lock and then immediately acquire it for writing.</p>\n</blockquote>\n<p>💡注意：FCL 还提供了一个  <code>ReaderWriterLock</code>  构造，它是在 Microsoft .NET Framework 1.0 中引入的。这个构造存在许多问题，所以 Microsoft 在 .NET Framework 3.5 中引入了  <code>ReaderWriterLockSlim</code>  构造。团队没有对原先的  <code>ReaderWriterLock</code>  构造进行改进，因为它们害怕失去和那些正在使用它的应用程序的兼容性。下面列举了  <code>ReaderWriterLock</code>  存在的几个问题。首先，即使不存在线程竞争，它的速度也非常慢。其次，线程所有权和递归行为是这个构造强加的，完全取消不了，这使锁变得更慢。最后，相比 writer 线程，它更青睐于 reader 线程，所以 writer 线程可能排起好长的队，却很少有机会获得服务，最终造成 “拒绝服务”(DoS) 问题。</p>\n<h3 id=\"the-onemanylock-class\"><a class=\"anchor\" href=\"#the-onemanylock-class\">#</a> The OneManyLock Class</h3>\n<blockquote>\n<p>I have created my own reader-writer construct that is faster than the FCL’s ReaderWriterLockSlim class. My class is called OneManyLock because it allows access to either one writer thread or many  reader threads. The class basically looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OneManyLock</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">OneManyLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> exclusive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Now I’d like to give you a sense of how it works. Internally, the class has an Int32 field for the  state of the lock, a Semaphore object that reader threads block on, and an AutoResetEvent object  that writer threads block on. The Int64 state field is divided into five subfields as follows:</p>\n<ul>\n<li>\n<p>Four bits represent the state of the lock itself. The possibilities are 0=Free, 1=OwnedByWriter,  2=OwnedByReaders, 3=OwnedByReadersAndWriterPending, and 4=ReservedForWriter. The  other values are not used.</p>\n</li>\n<li>\n<p>Twenty bits (a number from 0 to 1,048,575) represent the number of reader threads reading  (RR) that the lock has currently allowed in.</p>\n</li>\n<li>\n<p>Twenty bits represent the number of reader threads waiting (RW) to get into the lock. These  threads block on the auto-reset event object.</p>\n</li>\n<li>\n<p>Twenty bits represent the number of writer threads waiting (WW) to get into the lock. These  threads block on the other semaphore object.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Now, because all the information about the lock fits in a single Int64 field, I can manipulate this  field by using the methods of the Interlocked class so the lock is incredibly fast and causes a thread  to block only when there is contention.</p>\n</blockquote>\n<blockquote>\n<p>Here’s what happens when a thread enters the lock for shared access.</p>\n<ul>\n<li>\n<p>If the lock is Free: Set state to OwnedByReaders, RR=1, Return.</p>\n</li>\n<li>\n<p>If the lock is OwnedByReaders: RR++, Return.</p>\n</li>\n<li>\n<p>Else: RW++, Block reader thread. When the thread wakes, loop around and try again.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Here’s what happens when a thread that has shared access leaves the lock.</p>\n<ul>\n<li>\n<p>RR--</p>\n</li>\n<li>\n<p>If RR &gt; 0: Return</p>\n</li>\n<li>\n<p>If WW &gt; 0: Set state to ReservedForWriter, WW--, Release 1 blocked writer thread, Return</p>\n</li>\n<li>\n<p>If RW == 0 &amp;&amp; WW == 0: Set state to Free, Return</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Here’s what happens when a thread enters the lock for exclusive access:</p>\n<ul>\n<li>\n<p>If the lock is Free: Set state to OwnedByWriter, Return.</p>\n</li>\n<li>\n<p>If the lock is ReservedForWriter: Set state to OwnedByWriter, Return.</p>\n</li>\n<li>\n<p>If the lock is OwnedByWriter: WW++, Block writer thread. When thread wakes, loop around  and try again.</p>\n</li>\n<li>\n<p>Else: Set state to OwnedByReadersAndWriterPending, WW++, Block writer thread. When  thread wakes, loop around and try again.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Here’s what happens when a thread that has exclusive access leaves the lock:</p>\n<ul>\n<li>\n<p>If WW == 0 &amp;&amp; RW == 0: Set state to Free, Return</p>\n</li>\n<li>\n<p>If WW &gt; 0: Set state to ReservedForWriter, WW--, Release 1 blocked writer thread, Return</p>\n</li>\n<li>\n<p>If WW == 0 &amp;&amp; RW &gt; 0: Set state to Free , RW=0, Wake all blocked reader threads, Return</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Let’s say that there is currently one thread reading from the lock and another thread wants to  enter the lock for writing. The writer thread will first check to see if the lock is Free, and because it  is not, the thread will advance to perform the next check. However, at this point, the reader thread  could leave the lock, and seeing that RR and WW are both 0, the thread could set the lock’s state to  Free. This is a problem because the writer thread has already performed this test and moved on. Basically what happened is that the reader thread changed the state that the writer thread was accessing  behind its back. I needed to solve this problem so that the lock would function correctly.</p>\n</blockquote>\n<blockquote>\n<p>To solve the problem, all of these bit manipulations are performed using the technique I showed  in the “The Interlocked Anything Pattern” section from Chapter 29. If you recall, this pattern lets you  turn any operation into a thread-safe atomic operation. This is what allows this lock to be so fast  and have less state in it than other reader-writer locks. When I run performance tests comparing my  OneManyLock against the FCL’s ReaderWriterLockSlim and ReaderWriterLock classes, I get the  following results.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> OneManyLock<span class=\"token punctuation\">:</span> <span class=\"token number\">330</span> Fastest</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> ReaderWriterLockSlim<span class=\"token punctuation\">:</span> <span class=\"token number\">554</span> <span class=\"token operator\">~</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>7x slower </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> ReaderWriterLock<span class=\"token punctuation\">:</span> <span class=\"token number\">984</span> <span class=\"token operator\">~</span>3x slower</pre></td></tr></table></figure><blockquote>\n<p>Of course, because all reader-writer locks perform more logic than a mutually exclusive lock, their  performance can be slightly worse. However, you have to weigh this against the fact that a readerwriter lock allows multiple readers into the lock simultaneously.</p>\n</blockquote>\n<blockquote>\n<p>Before leaving this section, I’ll also mention that my Power Threading library (downloadable for free  from <span class=\"exturl\" data-url=\"aHR0cDovL1dpbnRlbGxlY3QuY29tL1Bvd2VyVGhyZWFkaW5nLmFzcHg=\">http://Wintellect.com/PowerThreading.aspx</span>) offers a slightly different version of this lock, called  OneManyResourceLock. This lock and others in the library offer many additional features, such as  deadlock detection, the ability to turn on lock ownership and recursion (albeit at a performance cost),  a unified programming model for all locks, and the ability to observe the run-time behavior of the  locks. For observing behavior, you can see the maximum amount of time that a thread ever waited to  acquire a lock, and you can see the minimum and maximum amount of time that a lock was held.</p>\n</blockquote>\n<h3 id=\"the-countdownevent-class\"><a class=\"anchor\" href=\"#the-countdownevent-class\">#</a> The CountdownEvent Class</h3>\n<blockquote>\n<p>The next construct is System.Threading.CountdownEvent. Internally, this construct uses a ManualResetEventSlim object. This construct blocks a thread until its internal counter reaches 0. In a way,  this construct’s behavior is the opposite of that of a Semaphore (which blocks threads while its count  is 0). Here is what this class looks like (some method overloads are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountdownEvent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">CountdownEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set CurrentCount to count</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> signalCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Increments CurrentCount by signalCount</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryAddCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> signalCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Increments CurrentCount by signalCount</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> signalCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Decrements CurrentCount by signameCount</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> CurrentCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsSet <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true if CurrentCount is 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">WaitHandle</span> WaitHandle <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>After a CountdownEvent’s CurrentCount reaches 0, it cannot be changed. The AddCount method throws InvalidOperationException when CurrentCount is 0, whereas the TryAddCount method simply returns false if CurrentCount is 0.</p>\n</blockquote>\n<h3 id=\"the-barrier-class\"><a class=\"anchor\" href=\"#the-barrier-class\">#</a> The Barrier Class</h3>\n<blockquote>\n<p>The System.Threading.Barrier construct is designed to solve a very rare problem, so it is unlikely  that you will have a use for it. Barrier is used to control a set of threads that are working together  in parallel so that they can step through phases of the algorithm together. Perhaps an example is in  order: when the CLR is using the server version of its garbage collector (GC), the GC algorithm creates one thread per core. These threads walk up different application threads’ stacks, concurrently  marking objects in the heap. As each thread completes its portion of the work, it must stop waiting  for the other threads to complete their portion of the work. After all threads have marked the objects,  then the threads can compact different portions of the heap concurrently. As each thread finishes  compacting its portion of the heap, the thread must block waiting for the other threads. After all the  threads have finished compacting their portion of the heap, then all the threads walk up the application’s threads’ stacks, fixing up roots to refer to the new location of the compacted object. Only after  all the threads have completed this work is the garbage collector considered complete and the application’s threads can be resumed.</p>\n</blockquote>\n<blockquote>\n<p>This scenario is easily solved using the Barrier class, which looks like this (some method overloads are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Barrier</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Barrier</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> participantCount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Barrier<span class=\"token punctuation\">></span></span> postPhaseAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int64</span> <span class=\"token function\">AddParticipants</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> participantCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Adds participants</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveParticipants</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> participantCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Subtracts participants</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">SignalAndWait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int64</span> CurrentPhaseNumber <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Indicates phase in process (starts at 0)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> ParticipantCount <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Number of participants</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> ParticipantsRemaining <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// # of threads needing to call SignalAndWait</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When you construct a Barrier, you tell it how many threads are participating in the work, and  you can also pass an Action delegate referring to code that will be invoked whenever  all participants complete a phase of the work. You can dynamically add and remove participating  threads from the Barrier by calling the AddParticipant and RemoveParticipant methods but,  in practice, this is rarely done. As each thread completes its phase of the work, it should call SignalAndWait, which tells the Barrier that the thread is done and the Barrier blocks the thread (using  a ManualResetEventSlim). After all participants call SignalAndWait, the Barrier invokes the  delegate (using the last thread that called SignalAndWait) and then unblocks all the waiting threads  so they can begin the next phase.</p>\n</blockquote>\n<h3 id=\"thread-synchronization-construct-summary\"><a class=\"anchor\" href=\"#thread-synchronization-construct-summary\">#</a> Thread Synchronization Construct Summary</h3>\n<blockquote>\n<p>My recommendation always is to avoid writing code that blocks any threads. When performing  asynchronous compute or I/O operations, hand the data off from thread to thread in such a way to  avoid the chance that multiple threads could access the data simultaneously. If you are unable to fully accomplish this, then try to use the Volatile and Interlocked methods because they are fast and  they also never block a thread. Unfortunately, these methods manipulate only simple types, but you  can perform rich operations on these types as described in the “The Interlocked Anything Pattern”  section in Chapter 29.</p>\n</blockquote>\n<blockquote>\n<p>There are two main reasons why you would consider blocking threads:</p>\n<ul>\n<li>\n<p>The programming model is simplified By blocking a thread, you are sacrificing some  resources and performance so that you can write your application code sequentially without  using callback methods. But C#’s async methods feature gives you a simplified programming  model without blocking threads.</p>\n</li>\n<li>\n<p>A thread has a dedicated purpose Some threads must be used for specific tasks. The  best example is an application’s primary thread. If an application’s primary thread doesn’t  block, then it will eventually return and the whole process will terminate. Another example  is an application’s GUI thread or threads. Windows requires that a window or control always  be manipulated by the thread that created it, so we sometimes write code that blocks a GUI  thread until some other operation is done, and then the GUI thread updates any windows and  controls as needed. Of course, blocking the GUI thread hangs the application and provides a  bad end-user experience.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>To avoid blocking threads, don’t mentally assign a label to your threads. For example, don’t create a spell-checking thread, a grammar-checking thread, a thread that handles this particular client  request, and so on. The moment you assign a label to a thread, you have also said to yourself that the  thread can’t do anything else. But threads are too expensive a resource to have them dedicated to a  particular purpose. Instead, you should use the thread pool to rent threads for short periods of time.  So, a thread pool thread starts out spell checking, then it changes to grammar checking, and then it  changes again to perform work on behalf of a client request, and so on.</p>\n</blockquote>\n<blockquote>\n<p>If, in spite of this discussion, you decide to block threads, then use the kernel object constructs if  you want to synchronize threads that are running in different AppDomains or processes. To atomically  manipulate state via a set of operations, use the Monitor class with a private field.5 Alternatively,  you could use a reader-writer lock instead of Monitor. Reader-writer locks are generally slower than  Monitor, but they allow multiple reader threads to execute concurrently, which improves overall  performance and minimizes the chance of blocking threads.</p>\n</blockquote>\n<blockquote>\n<p>In addition, avoid using recursive locks (especially recursive reader-writer locks) because they hurt  performance. However, Monitor is recursive and its performance is very good.6 Also, avoid releasing  a lock in a finally block because entering and leaving exception-handling blocks incurs a performance hit, and if an exception is thrown while mutating state, then the state is corrupted, and other  threads that manipulate it will experience unpredictable behavior and security bugs.</p>\n</blockquote>\n<blockquote>\n<p>Of course, if you do write code that holds a lock, your code should not hold the lock for a long  time, because this increases the likelihood of threads blocking. In the “Asynchronous Synchronization”  section later in this chapter, I will show a technique that uses collection classes as a way to avoid holding a lock for a long time.</p>\n</blockquote>\n<blockquote>\n<p>Finally, for compute-bound work, you can use tasks (discussed in Chapter 27) to avoid a lot of the  thread synchronization constructs. In particular, I love that each task can have one or more continuewith tasks associated with it that execute via some thread pool thread when some operation completes. This is much better than having a thread block waiting for some operation to complete. For  I/O-bound work, call the various XxxAsync methods that cause your code to continue running after  the I/O operation completes; this is similar to a task’s continue-with task.</p>\n</blockquote>\n<p>💡小结：FCL 自带了许多混合构造，它们通过一些别致的逻辑将你的线程保持在用户模式，从而增应用程序的性能。有的混合构造直到首次有线程在一个构造上发生竞争时，才会创建内核模式的构造。如果线程一直不在构造说上发生竞争，应用程序就可避免因为创建对象而产生的性能损失，同时避免为对象分配内存。许多构造还支持使用一个  <code>CancellationToken</code> ，使一个线程强迫解除可能正在构造上等待的其他线程的阻塞。 <code>System.Threading.ManualResetEventSlim</code>  和  <code>System.Threading.SemaphoreSlim</code>  这两个类。这两个构造的工作方式和对应的内核模式构造完全一致，只是它们都在用户模式中 “自旋”，而且都推迟到发生第一次竞争时，才创建内核模式的构造。它们的  <code>Wait</code>  方法允许传递一个超时值和一个  <code>CancellationToken</code> 。或许最常用的混合型线程同步构造就是  <code>Monitor</code>  类，它提供了支持自旋、线程所有权和递归和互斥锁。之所以最常用，是因为它资格最老，C# 有内建的关键字支持它，JIT 编译器对它知之甚详，而且 CLR 自己也在代表你的应用程序使用它。堆中的每个对象都可关联一个名为<strong>同步块</strong>的数据结构。同步块包含字段，这些字段和本章前面展示的  <code>AnotherHybridLock</code>  类的字段相似。具体地说，它对内核对象、拥有线程 (owning thread) 的 ID、递归计数 (recursion count) 以及等待线程 (waiting thread) 计数提供了相应的字段。 <code>Monitor</code>  是静态类，它的方法接收对任何堆对象的引用。这些方法对指定对象的同步块中的字段进行操作。为节省内存，CLR 团队采用一种更经济的方式提供刚才描述的功能。它的工作原理是：CLR 初始化时在堆中分配一个同步块数组。每当一个对象在堆中创建的时候，都有两个额外的开销字段与它关联。第一个 “类型对象指针”，包含类型的 “类型对象” 的内存地址。第二个是 “同步块索引”，包含同步块数组中的一个整数索引。一个对象在构造时，它的同步块索引初始化为 -1，表明不引用任何同步块。然后，调用  <code>Monitor.Enter</code>  时，CLR 在数组中找到一个空白同步块，并设置对象的同步块索引，让它引用该同步块。换言之，同步块和对象是动态关联的。调用  <code>Exit</code>  时，会检查是否有其他任何线程正在等待使用对象的同步块。如果没有线程在等待它，同步块就自由了， <code>Exit</code>  将对象的同步块索引设回  <code>-1</code> ，自由的同步块将来可以和另一个对象关联。和其他所有对象一样，类型对象有两个开销成员：同步块索引和类型对象指针。这意味着同步块可以和类型对象关联，而且可以将一个类型对象引用传给  <code>Monitor</code>  的方法。顺便说一句，如有必要，同步块数组能创建更多的同步块。所以，同时同步大量对象时，不必担心系统会用光同步块。 <code>Monitor</code>  根本就不该实现成静态类；它应该像其他所有同步构造那样实现。也就是说，应该是一个可以实例化并在上面调用实例方法的类。事实上，正因为  <code>Monitor</code>  被设计成一个静态类，所以它还存在其他许多问题。1. 调用  <code>Monitor</code>  的方法时，传递对代理对象的引用，锁定的是代理对象而不是代理引用的实际对象。2. 如果线程调用  <code>Monitor.Enter</code> ，向它传递对类型对象的引用，而且这个类型对象是以 “AppDomain 中立” 的方式加载的，线程就会跨越进程中的所有 AppDomain 在那个类型上获取锁。3. 由于字符串可以留用，所以两个完全独立的代码段可能在不知情的情况下获取对内存中的一个  <code>String</code>  对象的引用。如果将这个  <code>String</code>  对象引用传给  <code>Monitor</code>  的方法，两个独立的代码段现在就会在不知情的情况下以同步方式执行。4. 跨越 AppDomain 边界传递字符串时，CLR 不创建字符串的副本；相反，它只是将对字符串的一个引用传给其他 AppDomain。这增强了性能，理论上也是可行的，因为  <code>String</code>  对象本来就不可变 (不可修改)。但和其他所有对象一样， <code>String</code>  对象关联了一个同步索引块，这个索引是可变的 (可修改)，使不同 AppDomain 中的线程在不知情的情况下开始同步。5. 由于  <code>Monitor</code>  的方法要获取一个  <code>Object</code> ，所以传递值类型会导致值类型被装箱，造成线程在已装箱对象上个获取锁。每次调用  <code>Monitor.Enter</code>  都会在一个完全不同的对象上获取锁，造成完全无法实现线程同步。6. 向方法应用  <code>[MethodImpl(MethodImplOptions.Synchronized)]</code>  特性，会造成 JIT 编译器用  <code>Monitor.Entrer</code>  和  <code>Monitor.Exit</code>  调用包围方法的本机代码。如果方法是实例方法，会将  <code>this</code>  传给  <code>Monitor</code>  的这些方法，锁定隐式公共的锁。如果方法时静态的，对类型的类型对象的引用会传给这些方法，造成锁定 “AppDomain 中立” 的类型。7. 调用类型的类型构造器时，CLR 要获取类型对象上的一个锁，确保只有一个线程初始化类型对象及其静态字段。同样地，这个类型可能以 “AppDomain 中立” 的方式加载，所以会出问题。例如，假定类型构造器的代码进入死循环，进程中的所有 AppDomain 都无法使用该类型。如果所有线程都希望以只读方式访问数据，就根本没有必要阻塞它们；应该允许它们并发地访问数据。另一方面，如果一个线程希望修改数据，这个线程就需要对数据的独占式访问。 <code>ReaderWriterLockSlim</code>  构造封装了解决这个问题的逻辑。 <code>ReaderWriterLockSlim</code>  的构造器允许传递一个  <code>LockRecurionsPolicy</code>  标志，如果传递  <code>SupportsRecursion</code>  标志，锁就支持线程所有权和递归行为。如同本章早些时候讨论的那样，这些行为对锁的性能有负面影响。所以，建议总是向构造器传递  <code>LockRecursionPolicy.NoRecursion</code> 。reader-writer 锁支持线程所有权和递归的代价非常高昂，因为锁必须跟踪曾允许进入锁的所有 reader 线程，同时为每个线程都单独维护递归计数。 <code>ReaderWriterLockSlim</code>  类提供了一些额外的方法 (前面没有列出) 允许一个 reader 线程升级为 writer 线程。以后，线程可以把自己降级回 reader 线程。锁如果支持这个行为，性能会大打折扣。线程并不是直接从 reader 变成 writer 的。当时可能还有其他线程正在读取，这些线程必须完全退出锁。在此之后，尝试升级的线程才允许成为 writer。这相当于先让 reader 线程退出锁，再立即获取这个锁以进行写入。下一个结构是  <code>System.Threading.CountdownEvent</code> 。这个构造使用了一个  <code>ManualResetEventSlim</code>  对象。这个构造阻塞一个线程，直到它的内部计数器变成 0。从某种角度说，这个构造的行为和  <code>Semaphore</code>  的行为相反 ( <code>Semaphore</code>  是在计数为 0 时阻塞线程)。 <code>System.Threading.Barrier</code>  构造用于解决一个非常稀有的问题。 <code>Barrier</code>  控制的一系列线程需要并行工作，从而在一个算法的不同阶段推进。当 CLR 使用它的垃圾回收器 (GC) 的服务器版本时，GC 算法为每个内核都创建一个线程。这些线程在不同应用程序线程的栈汇总向上移动，并发标记堆中的对象。每个线程完成了它自己的那一部分工作之后，必须停下来等待其他线程完成。所有线程都标记好对象后，线程就可以并发地压缩 (compact) 堆的不同部分。每个线程都完成了对它的那一部分的堆的压缩之后，所有线程都要在应用程序的线程的栈中上行，对根进行修正，使之引用因为压缩而发生了移动的对象的新位置。只有在所有线程都完成这个工作之后，垃圾回收器的工作才算正真完成，应用程序的线程现在可以恢复执行了。构造  <code>Barrier</code>  时要告诉它有多少个线程准备参与工作，还可传递一个  <code>Action&lt;Barrier&gt;</code>  委托来引用所有参与者完成一个阶段的工作后要调用的代码。执行异步计算或 I/O 操作时，将数据从一个线程交给另一个线程时，应避免多个线程同时访问数据。如果不能完全做到这一点，请尽量使用  <code>Volatile</code>  和  <code>Interlocked</code>  的方法，因为它们的速度很快，而且绝不阻塞线程。要避免阻塞线程，就不要刻意地为线程打上标签。例如，不要创建一个拼写检查线程、一个语法检查线程、一个处理特定客户端请求的线程等。为线程打上标签，其实是在告诫自己该线程不能做其他任何事情。但由于线程是如此昂贵，所以不能把它们专门用于某个目的。相反，应通过线程池将线程出租短暂时间。所以正确方式是一个线程池线程开始拼写检查，再改为语法检查，再代表一个客户端请求执行工作，以此类推。如果一定要阻塞线程，为了同步在不同 AppDomain 或进程中运行的线程，请使用内核对象构造。</p>\n<h2 id=\"the-famous-double-check-locking-technique\"><a class=\"anchor\" href=\"#the-famous-double-check-locking-technique\">#</a> The Famous Double-Check Locking Technique</h2>\n<blockquote>\n<p>There is a famous technique called double-check locking, which is used by developers who want to  defer constructing a singleton object until an application requests it (sometimes called lazy initialization). If the application never requests the object, it never gets constructed, saving time and memory.  A potential problem occurs when multiple threads request the singleton object simultaneously. In  this case, some form of thread synchronization must be used to ensure that the singleton object gets  constructed just once.</p>\n</blockquote>\n<blockquote>\n<p>This technique is not famous because it is particularly interesting or useful. It is famous because  there has been much written about it. This technique was used heavily in Java, and later it was  discovered that Java couldn’t guarantee that it would work everywhere. The famous document that  describes the problem can be found on this webpage: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcy51bWQuZWR1L35wdWdoL2phdmEvbWVtb3J5TW9kZWwv\">www.cs.umd.edu/~pugh/java/memoryModel/</span> DoubleCheckedLocking.html.</p>\n</blockquote>\n<blockquote>\n<p>Anyway, you’ll be happy to know that the CLR supports the double-check locking technique just  fine because of its memory model and volatile field access (described in Chapter 29). Here is code that  demonstrates how to implement the double-check locking technique in C#.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// s_lock is required for thread safety and having this object assumes that creating </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// the singleton object is more expensive than creating a System.Object object and that </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// creating the singleton object may not be necessary at all. Otherwise, it is more </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// efficient and easier to just create the singleton object in a class constructor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Object</span> s_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// This field will refer to the one Singleton object</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> s_value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Private constructor prevents any code outside this class from creating an instance </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Code to initialize the one Singleton object goes here...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Public, static method that returns the Singleton object (creating it if necessary) </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Singleton</span> <span class=\"token function\">GetSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// If the Singleton was already created, just return it (this is fast)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>s_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Not created, let 1 thread create it</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// Still not created, create it</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token class-name\">Singleton</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token comment\">// Save the reference in s_value (see discussion for details)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> Volatile<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> s_value<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>s_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token comment\">// Return a reference to the one Singleton object </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">return</span> s_value<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The idea behind the double-check locking technique is that a call to the GetSingleton method  quickly checks the s_value field to see if the object has already been created, and if it has, the  method returns a reference to it. The beautiful thing here is that no thread synchronization is required after the object has been constructed; the application will run very fast. On the other hand,  if the first thread that calls the GetSingleton method sees that the object hasn’t been created, it  takes a thread synchronization lock to ensure that only one thread constructs the single object. This  means that a performance hit occurs only the first time a thread queries the singleton object.</p>\n</blockquote>\n<blockquote>\n<p>Now, let me explain why this pattern didn’t work in Java. The Java Virtual Machine read the value  of s_value into a CPU register at the beginning of the GetSingleton method and then just queried  the register when evaluating the second if statement, causing the second if statement to always  evaluate to true, and multiple threads ended up creating Singleton objects. Of course, this happened only if multiple threads called GetSingleton at exactly the same time, which in most applications is very unlikely. This is why it went undetected in Java for so long.</p>\n</blockquote>\n<blockquote>\n<p>In the CLR, calling any lock method is a full memory fence, and any variable writes you have before  the fence must complete before the fence and any variable reads after the fence must start after it.  For the GetSingleton method, this means that the s_value field must be reread after the call to  Monitor.Enter; it cannot be cached in a register across this method call.</p>\n</blockquote>\n<blockquote>\n<p>Inside GetSingleton, you see the call to Volatile.Write. Here’s the problem that this is solving. Let’s say that what you had inside the second if statement was the following line of code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s_value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is what you'd ideally like to write</span></pre></td></tr></table></figure><blockquote>\n<p>You would expect the compiler to produce code that allocates the memory for a Singleton, calls  the constructor to initialize the fields, and then assigns the reference into the s_value field. Making  a value visible to other threads is called publishing. But the compiler could do this instead: allocate  memory for the Singleton, publish (assign) the reference into s_value, and then call the constructor. From a single thread’s perspective, changing the order like this has no impact. But what if, after  publishing the reference into s_value and before calling the constructor, another thread calls the  GetSingleton method? This thread will see that s_value is not null and start to use the Singleton object, but its constructor has not finished executing yet! This can be a very hard bug to track down,  especially because it is all due to timing.</p>\n</blockquote>\n<blockquote>\n<p>The call to Volatile.Write fixes this problem. It ensures that the reference in temp can be  published into s_value only after the constructor has finished executing. Another way to solve this  problem would be to mark the s_value field with C#’s volatile keyword. This makes the write  to s_value volatile, and again, the constructor has to finish running before the write can happen.  Unfortunately, this makes all reads volatile, too, and because there is no need for this, you are hurting  your performance with no benefit.</p>\n</blockquote>\n<blockquote>\n<p>In the beginning of this section, I mentioned that the double-check locking technique is not  that interesting. In my opinion, developers think it is cool, and they use it far more often than they  should. In most scenarios, this technique actually hurts efficiency. Here is a much simpler version of  the Singleton class that behaves the same as the previous version. This version does not use the  double-check locking technique.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> s_value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Private constructor prevents any code outside this class from creating an instance </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Code to initialize the one Singleton object goes here...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Public, static method that returns the Singleton object (creating it if necessary) </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Singleton</span> <span class=\"token function\">GetSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> s_value<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Because the CLR automatically calls a type’s class constructor the first time code attempts to access  a member of the class, the first time a thread queries Singleton’s GetSingleton method, the CLR  will automatically call the class constructor, which creates an instance of the object. Furthermore, the  CLR already ensures that calls to a class constructor are thread safe. I explained all of this in Chapter 8.  The one downside of this approach is that the type constructor is called when any member of a class  is first accessed. If the Singleton type defined some other static members, then the Singleton object would be created when any one of them was accessed. Some people work around this problem  by defining nested classes.</p>\n</blockquote>\n<blockquote>\n<p>Let me show you a third way of producing a single Singleton object.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> s_value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Private constructor prevents any code outside this class from creating an instance </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Code to initialize the one Singleton object goes here...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Public, static method that returns the Singleton object (creating it if necessary) </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Singleton</span> <span class=\"token function\">GetSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Create a new Singleton and root it if another thread didn't do it first</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">Singleton</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> s_value<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// If this thread lost, then the second Singleton object gets GC'd</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">return</span> s_value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Return reference to the single object</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>If multiple threads call GetSingleton simultaneously, then this version might create two (or more)  Singleton objects. However, the call to Interlocked.CompareExchange ensures that only one  of the references is ever published into the s_value field. Any object not rooted by this field will be  garbage collected later on. Because, in most applications, it is unlikely that multiple threads will call  GetSingleton at the same time, it is unlikely that more than one Singleton object will ever be created.</p>\n</blockquote>\n<blockquote>\n<p>Now it might upset you that multiple Singleton objects could be created, but there are many  benefits to this code. First, it is very fast. Second, it never blocks a thread; if a thread pool thread is  blocked on a Monitor or any other kernel-mode thread synchronization construct, then the thread  pool creates another thread to keep the CPUs saturated with work. So now, more memory is allocated  and initialized and all the DLLs get a thread attach notification. With CompareExchange, this can  never happen. Of course, you can use this technique only when the constructor has no side effects.</p>\n</blockquote>\n<blockquote>\n<p>The FCL offers two types that encapsulate the patterns described in this section. The generic  System.Lazy class looks like this (some methods are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Lazy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> valueFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LazyThreadSafetyMode</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsValueCreated <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> Value <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>This code demonstrates how it works.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Create a lazy-initialization wrapper around getting the DateTime</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">Lazy<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToLongTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>IsValueCreated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns false because Value not queried yet</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The delegate is invoked now</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>IsValueCreated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns true because Value was queried</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait 10 seconds and display the time again</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The delegate is NOT invoked now; same result</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I run this, I get the following output.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>False</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span> PM</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>True</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span> PM ß Notice that the time did <span class=\"token keyword\">not</span> change <span class=\"token number\">10</span> seconds later</pre></td></tr></table></figure><blockquote>\n<p>The preceding code constructed an instance of the Lazy class and passed one of the LazyThreadSafetyMode flags into it. Here is what these flags look like and what they mean.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LazyThreadSafetyMode</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> None<span class=\"token punctuation\">,</span> <span class=\"token comment\">// No thread-safety support at all (good for GUI apps)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> ExecutionAndPublication <span class=\"token comment\">// Uses the double-check locking technique</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> PublicationOnly<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Uses the Interlocked.CompareExchange technique</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In some memory-constrained scenarios, you might not even want to create an instance of the  Lazy class. Instead, you can call static methods of the System.Threading.LazyInitializer class. The class looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// These two methods use Interlocked.CompareExchange internally: </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">EnsureInitialized</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">T</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">EnsureInitialized</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">T</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> valueFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// These two methods pass the syncLock to Monitor's Enter and Exit methods internally</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">EnsureInitialized</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">T</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Boolean</span> initialized<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Object</span> syncLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">EnsureInitialized</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">T</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Boolean</span> initialized<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Object</span> syncLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> valueFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Also, being able to explicitly specify a synchronization object to the EnsureInitialized method’s syncLock parameter allows multiple initialization functions and fields to be protected by the  same lock.</p>\n</blockquote>\n<blockquote>\n<p>Here is an example using a method from this class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Because name is null, the delegate runs and initializes name</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> LazyInitializer<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureInitialized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Jeffrey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Displays \"Jeffrey\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Because name is not null, the delegate does not run; name doesn’t change</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> LazyInitializer<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureInitialized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Richter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Also displays \"Jeffrey\" </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：双检锁 (Double-Check Locking) 是一个非常著名的技术，开发人员用它将单实例 (singleton) 对象的构造推迟到应用程序首次请求该对象时进行。这有时也称为<strong>延迟初始化</strong> (lazy Initialization)。如果应用程序永远不请求对象，对象就永远不会构造，从而节省了时间和内存。CLR 很好地支持双检锁技术，这应该归功于 CLR 的内存模型以及  <code>volatile</code>  字段访问。双检锁技术背后的思路在于，对  <code>GetSingleton</code>  方法的一个调用可以快速地检查  <code>s_value</code>  字段，判断对象是否创建。如果是，方法就返回对它的引用。这里的妙处在于，如果对象已经构造好，就不需要线程同步；应用程序会运行得非常快。另一方面，如果调用  <code>GetSingleton</code>  方法的第一个线程发现对象还没有创建，就会获取一个线程同步锁来确保只有一个线程构造单实例对象。这意味着只有线程第一次查询单实例对象时，才会出现性能上的损失。在 CLR 中，对任何锁方法的调用都构成了一个完整的内存栅栏，在栅栏之前写入的任何变量必须在栅栏之前完成；在栅栏之后的任何变量读取都必须在栅栏之后开始。对于  <code>GetSingleton</code>  方法，这意味着  <code>s_value</code>  字段的值必须在调用了  <code>Monitor.Enter</code>  之后重新读取；调用前缓存到寄存器中的东西作不了数。 <code>GetSingleton</code>  内部有一个  <code>Volatile.Write</code>  调用。使一个值对其他线程可见称为<strong>发布</strong> (publishing)。如果不这么写，编译器可能这样做：为  <code>Singleton</code>  分配内存，将引用发布到 (赋给) <code>s_value</code> ，再调用构造器，从而影响了线程安全性。对  <code>Volatile.Write</code>  的调用修正了这个问题。它保证  <code>temp</code>  中的引用只有在构造器结束执行之后，才发布到  <code>s_value</code>  中。FCL 有两个类型封装了本书描述的模式。一个是泛型  <code>Syste.Lazy</code>  类，内存有限可能不想创建  <code>Lazy</code>  类的实例，这时可调用  <code>System.Threading.LazyInitializer</code>  类的静态方法。</p>\n<h2 id=\"the-condition-variable-pattern\"><a class=\"anchor\" href=\"#the-condition-variable-pattern\">#</a> The Condition Variable Pattern</h2>\n<blockquote>\n<p>Let’s say that a thread wants to execute some code when a complex condition is true. One option  would be to let the thread spin continuously, repeatedly testing the condition. But this wastes CPU  time, and it is also not possible to atomically test multiple variables that are making up the complex  condition. Fortunately, there is a pattern that allows threads to efficiently synchronize their operations  based on a complex condition.</p>\n</blockquote>\n<blockquote>\n<p>This pattern is called the condition variable pattern, and we use it via the following methods defined inside the Monitor class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Pulse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PulseAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Here is what the pattern looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConditionVariablePattern</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Object</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> m_condition <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Acquire a mutual-exclusive lock</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// While under the lock, test the complex condition \"atomically\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// If condition is not met, wait for another thread to change the condition</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Temporarily release lock so other threads can get it</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// The condition was met, process the data...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Permanently release lock</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Acquire a mutual-exclusive lock</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// Process data and modify the condition...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> m_condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// Monitor.Pulse(m_lock); // Wakes one waiter AFTER lock is released</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">PulseAll</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wakes all waiters AFTER lock is released</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Release lock</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, the thread executing the Thread1 method enters a mutual-exclusive lock and then  tests a condition. Here, I am just checking a Boolean field, but this condition can be arbitrarily complex. For example, you could check to see if it is a Tuesday in March and if a certain collection object  has 10 elements in it. If the condition is false, then you want the thread to spin on the condition, but  spinning wastes CPU time, so instead, the thread calls Wait. Wait releases the lock so that another  thread can get it and blocks the calling thread.</p>\n</blockquote>\n<blockquote>\n<p>The Thread2 method shows code that the second thread executes. It calls Enter to take ownership of the lock, processes some data, which results in changing the state of the condition, and then  calls Pulse or PulseAll, which will unblock a thread from its Wait call. Pulse unblocks the longest  waiting thread (if any), whereas PulseAll unblocks all waiting threads (if any). However, any unblocked threads don’t wake up yet. The thread executing Thread2 must call Monitor.Exit, allowing  the lock to be owned by another thread. Also, if PulseAll is called, the other threads do not unblock  simultaneously. When a thread that called Wait is unblocked, it becomes the owner of the lock, and  because it is a mutual-exclusive lock, only one thread at a time can own it. Other threads can get it  after an owning thread calls Wait or Exit.</p>\n</blockquote>\n<blockquote>\n<p>When the thread executing Thread1 wakes, it loops around and tests the condition again. If the  condition is still false, then it calls Wait again. If the condition is true, then it processes the data as it  likes and ultimately calls Exit, leaving the lock so other threads can get it. The nice thing about this  pattern is that it is possible to test several variables making up a complex condition using simple synchronization logic (just one lock), and multiple waiting threads can all unblock without causing any  logic failure, although the unblocking threads might waste some CPU time.</p>\n</blockquote>\n<blockquote>\n<p>Here is an example of a thread-safe queue that can have multiple threads enqueuing and dequeuing items to it. Note that threads attempting to dequeue an item block until an item is available  for them to process.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedQueue<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Object</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Queue<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> m_queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// After enqueuing an item, wake up any/all waiters</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">PulseAll</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Loop while the queue is empty (the condition)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_queue<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// Dequeue an item from the queue and return it for processing</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token class-name\">T</span> item <span class=\"token operator\">=</span> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：这个模式的妙处在于，可以使用简单的同步逻辑 (只是一个锁) 来测试构成一个复合条件的几个变量，而且多个正在等待的线程可以全部解除阻塞，而不会造成任何逻辑错误。唯一的缺点就是解除线程的阻塞可能浪费一些 CPU 时间。</p>\n<h2 id=\"asynchronous-synchronization\"><a class=\"anchor\" href=\"#asynchronous-synchronization\">#</a> Asynchronous Synchronization</h2>\n<blockquote>\n<p>I’m not terribly fond of any of the thread synchronization constructs that use kernel-mode primitives,  because all of these primitives exist to block a thread from running, and threads are just too expensive to create and not have them run. Here is an example that hopefully clarifies the problem.</p>\n</blockquote>\n<blockquote>\n<p>Imagine a website into which clients make requests. When a client request arrives, a thread pool  thread starts processing the client’s request. Let’s say that this client wants to modify some data in the  server in a thread-safe way, so it acquires a reader-writer lock for writing. Let’s pretend that this lock  is held for a long time. As the lock is held, another client request comes in, so that thread pool creates  a new thread for the client request, and then the thread blocks trying to acquire the reader-writer  lock for reading. In fact, as more and more client requests come in, the thread pool creates more and  more threads. Thus, all these threads are just blocking themselves on the lock. The server is spending  all its time creating threads so that they can stop running! This server does not scale well at all.</p>\n</blockquote>\n<blockquote>\n<p>Then, to make matters worse, when the writer thread releases the lock, all the reader threads unblock simultaneously and get to run, but now there may be lots of threads trying to run on relatively  few CPUs, so Windows is context switching between the threads constantly. The result is that the  workload is not being processed as quickly as it could because of all the overhead associated with the  context switches.</p>\n</blockquote>\n<blockquote>\n<p>If you look over all the constructs shown in this chapter, many of the problems that these constructs  are trying to solve can be much better accomplished using the Task class discussed in Chapter 27. Take  the Barrier class, for example: you could spawn several Task objects to work on a phase and then,  when all these tasks complete, you could continue with one or more other Task objects. Compared to  many of the constructs shown in this chapter, tasks have many advantages:</p>\n<ul>\n<li>\n<p>Tasks use much less memory than threads and they take much less time to create and destroy.</p>\n</li>\n<li>\n<p>The thread pool automatically scales the tasks across available CPUs.</p>\n</li>\n<li>\n<p>As each task completes a phase, the thread running that task goes back to the thread pool,  where it can do other work, if any is available for it.</p>\n</li>\n<li>\n<p>The thread pool has a process-global view of tasks and, as such, it can better schedule these  tasks, reducing the number of threads in the process and also reducing context switching.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Locks are popular but, when held for a long time, they introduce significant scalability issues. What  would really be useful is if we had asynchronous synchronization constructs where your code indicates that it wants a lock. If the thread can’t have it, it can just return and perform some other work,  rather than blocking indefinitely. Then, when the lock becomes available, your code somehow gets  resumed, so it can access the resource that the lock protects. I came up with this idea after trying to  solve a big scalability problem for a customer, and I then sold the patent rights to Microsoft. In 2009,  the Patent Office issued the patent (Patent #7,603,502).</p>\n</blockquote>\n<blockquote>\n<p>The SemaphoreSlim class implements this idea via its WaitAsync method. Here is the signature  for the most complicated overload of this method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">WaitAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>With this, you can synchronize access to a resource asynchronously (without blocking any thread).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AccessResourceViaAsyncSynchronization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SemaphoreSlim</span> asyncLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// TODO: Execute whatever code you want here...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">await</span> asyncLock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Request exclusive access to a resource via its lock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// When we get here, we know that no other thread is accessing the resource</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// TODO: Access the resource (exclusively)...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// When done accessing resource, relinquish lock so other code can access the resource</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> asyncLock<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// TODO: Execute whatever code you want here...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The SemaphoreSlim’s WaitAsync method is very useful but, of course, it gives you semaphore  semantics. Usually, you’ll create the SemaphoreSlim with a maximum count of 1, which gives you  mutual-exclusive access to the resource that the SemaphoreSlim protects. So, this is similar to the  behavior you get when using Monitor, except that SemaphoreSlim does not offer thread ownership  and recursion semantics (which is good).</p>\n</blockquote>\n<blockquote>\n<p>But, what about reader-writer semantics? Well, the .NET Framework has a class called ConcurrentExclusiveSchedulerPair, which looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentExclusiveSchedulerPair</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ConcurrentExclusiveSchedulerPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TaskScheduler</span> ExclusiveScheduler <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TaskScheduler</span> ConcurrentScheduler <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Other methods not shown...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>An instance of this class comes with two TaskScheduler objects that work together to provide  reader/writer semantics when scheduling tasks. Any tasks scheduled by using ExclusiveScheduler will execute one at a time, as long as no tasks are running that were scheduled using the ConcurrentScheduler. And, any tasks scheduled using the ConcurrentScheduler can all run simultaneously, as  long as no tasks are running that were scheduled by using the ExclusiveScheduler. Here is some  code that demonstrates the use of this class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConcurrentExclusiveSchedulerDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cesp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentExclusiveSchedulerPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tfExclusive <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskFactory</span><span class=\"token punctuation\">(</span>cesp<span class=\"token punctuation\">.</span>ExclusiveScheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tfConcurrent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskFactory</span><span class=\"token punctuation\">(</span>cesp<span class=\"token punctuation\">.</span>ConcurrentScheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> operation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> operation <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> operation<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exclusive <span class=\"token operator\">=</span> operation <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// For demo, I make 2 exclusive &amp; 3 concurrent</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exclusive <span class=\"token punctuation\">?</span></span> tfExclusive <span class=\"token punctuation\">:</span> tfConcurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125; access\"</span><span class=\"token punctuation\">,</span> exclusive <span class=\"token punctuation\">?</span> <span class=\"token string\">\"exclusive\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"concurrent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// TODO: Do exclusive write or concurrent read computation here...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Unfortunately, the .NET Framework doesn’t come with an asynchronous lock offering reader-writer  semantics. However, I have built such a class, which I call AsyncOneManyLock. You use it the same  way that you’d use a SemaphoreSlim. Here is an example.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AccessResourceViaAsyncSynchronization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncOneManyLock</span> asyncLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// TODO: Execute whatever code you want here...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Pass OneManyMode.Exclusive or OneManyMode.Shared for wanted concurrent access</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">await</span> asyncLock<span class=\"token punctuation\">.</span><span class=\"token function\">AcquireAsync</span><span class=\"token punctuation\">(</span>OneManyMode<span class=\"token punctuation\">.</span>Shared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Request shared access</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// When we get here, no threads are writing to the resource; other threads may be reading</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// TODO: Read from the resource...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// When done accessing resource, relinquish lock so other code can access the resource</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> asyncLock<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// TODO: Execute whatever code you want here...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The following is the code for my AsyncOneManyLock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OneManyMode</span> <span class=\"token punctuation\">&#123;</span> Exclusive<span class=\"token punctuation\">,</span> Shared <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncOneManyLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Lock code</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">SpinLock</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SpinLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Don't use readonly with a SpinLock</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Boolean</span> taken <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> taken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Lock state and helper methods</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Boolean</span> IsFree <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_state <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Boolean</span> IsOwnedByWriter <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_state <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Boolean</span> IsOwnedByReaders <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_state <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">AddReaders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_state <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">SubtractReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>m_state<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MakeWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MakeFree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// For the no-contention case to improve performance and reduce memory consumption</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Task</span> m_noContentionAccessGranter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// Each waiting writers wakes up via their own TaskCompletionSource queued here</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Queue<span class=\"token punctuation\">&lt;</span>TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> m_qWaitingWriters <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span>TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">// All waiting readers wake up by signaling a single TaskCompletionSource</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span> m_waitingReadersSignal <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_numWaitingReaders <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">AsyncOneManyLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> m_noContentionAccessGranter <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromResult</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">WaitAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OneManyMode</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token class-name\">Task</span> accressGranter <span class=\"token operator\">=</span> m_noContentionAccessGranter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assume no contention</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token keyword\">case</span> OneManyMode<span class=\"token punctuation\">.</span>Exclusive<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsFree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token function\">MakeWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No contention</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token comment\">// Contention: Queue new writer task &amp; return it so writer waits</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tcs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> m_qWaitingWriters<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>tcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> accressGranter <span class=\"token operator\">=</span> tcs<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token keyword\">case</span> OneManyMode<span class=\"token punctuation\">.</span>Shared<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsFree <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>IsOwnedByReaders <span class=\"token operator\">&amp;&amp;</span> m_qWaitingWriters<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token function\">AddReaders</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No contention</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Contention</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token comment\">// Contention: Increment waiting readers &amp; return reader task so reader waits</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> m_numWaitingReaders<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> accressGranter <span class=\"token operator\">=</span> m_waitingReadersSignal<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> <span class=\"token keyword\">return</span> accressGranter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span> accessGranter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assume no code is released</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsOwnedByWriter<span class=\"token punctuation\">)</span> <span class=\"token function\">MakeFree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The writer left</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> <span class=\"token keyword\">else</span> <span class=\"token function\">SubtractReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A reader left</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsFree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token comment\">// If free, wake 1 waiting writer or all waiting readers</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_qWaitingWriters<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> <span class=\"token function\">MakeWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre> accessGranter <span class=\"token operator\">=</span> m_qWaitingWriters<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_numWaitingReaders <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre> <span class=\"token function\">AddReaders</span><span class=\"token punctuation\">(</span>m_numWaitingReaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre> m_numWaitingReaders <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre> accessGranter <span class=\"token operator\">=</span> m_waitingReadersSignal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre> <span class=\"token comment\">// Create a new TCS for future readers that need to wait</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre> m_waitingReadersSignal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre> <span class=\"token comment\">// Wake the writer/reader outside the lock to reduce</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre> <span class=\"token comment\">// chance of contention improving performance</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessGranter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> accessGranter<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>As I said, this code never blocks a thread. The reason is because it doesn’t use any kernel constructs internally. Now, it does use a SpinLock that internally uses user-mode constructs. But, if you  recall from the discussion about SpinLocks in Chapter 29, a SpinLock can only be used when held  over sections of code that are guaranteed to execute in a short and finite amount of time. If you  examine my WaitAsync method, you’ll notice that all I do while holding the lock is some integer calculations and comparison and perhaps construct a TaskCompletionSource and add it to a queue.  This can’t take very long at all, so the lock is guaranteed to be held for a very short period of time.</p>\n</blockquote>\n<blockquote>\n<p>Similarly, if you examine my Release method, you’ll notice that all I do is some integer calculations, a comparison and perhaps dequeue a TaskCompletionSource or possibly construct a TaskCompletionSource. Again, this can’t take very long either. The end result is that I feel very comfortable using a SpinLock to guard access to the Queue. Therefore, threads never block when using this  lock, which allows me to build responsive and scalable software.</p>\n</blockquote>\n<p>💡小结：和本章展示的大量构造相比，任务具有下述许多优势：1. 任务使用的内存比线程少得多，创建和销毁所需的时间也少得多。2. 线程池根据可用 CPU 数量自动伸缩任务规模。3. 每个任务完成一个阶段后，运行任务的线程回到线程池，在哪里能接受新任务。4. 每个任务完成一个阶段后，运行任务的线程回到线程池，在哪里能接受新任务。5. 线程池是站在整个进程的高度观察任务。所以，它能更好地调度这些任务，减少进程中的线程数，并减少上下文切换。锁很流行，但长时间拥有会带来巨大的伸缩性问题。如果代码能通过异步的同步构造指出它想要一个锁，那么会非常有用。在这种情况下，如果线程得不到锁，可直接返回并执行其他工作，而不必在那里傻傻地阻塞。以后当锁可用时，代码可恢复执行并访问锁所保护的资源。 <code>SemaphoreSlim</code>  的  <code>WaitAsync</code>  方法很有用，但它提供的是信号量语义。一般创建最大计数为 1 的 <code>SemaphoreSlim</code> ，从而对 <code>SemaphoreSlim</code>  保护的资源进行互斥访问。所以，这和使用  <code>Monitor</code>  时的行为相似，只是  <code>SemaphoreSlim</code>  不支持线程所有权和递归语义 (这是好事)。.NET Framework 提供了  <code>ConcurrentExclusiveSchedulerPair</code>  类，这个类的实例带有两个  <code>TaskScheduler</code>  对象，它们在代用任务时负责提供 reader/writer 语义。只要当前没有运行使用  <code>ConcurrentScheduler</code>  调度的任务，使用  <code>ExclusiveScheduler</code>  调度的任何任务将独占式地运行 (一次只能运行一个)。另外，只要当前没有运行使用  <code>ExclusiveScheduler</code>  调度的任务，使用  <code>ConcurrentScheduler</code>  调度的任务就可同时运行 (一次运行多个)。遗憾的是，.NET Framework 没有提供具有 reader-writer 语义的异步锁。作者构建了这样的一个类，称为  <code>AsyncOneManyLock</code> 。它的用法和  <code>SemaphoreSlim</code>  一样。线程在使用这种锁时永远不会阻塞，能构建响应灵敏的、可伸缩的软件。</p>\n<h2 id=\"the-concurrent-collection-classes\"><a class=\"anchor\" href=\"#the-concurrent-collection-classes\">#</a> The Concurrent Collection Classes</h2>\n<blockquote>\n<p>The FCL ships with four thread-safe collection classes, all of which are in the System.Collections. Concurrent namespace: ConcurrentQueue, ConcurrentStack, ConcurrentDictionary, and  ConcurrentBag. Here is what some of their most commonly used members look like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Process items in a first-in, first-out order (FIFO)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IProducerConsumerCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ConcurrentQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Process items in a last-in, first-out order (LIFO)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentStack<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IProducerConsumerCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ConcurrentStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryPop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// An unordered set of items where duplicates are allowed</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentBag<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IProducerConsumerCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ConcurrentBag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryTake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// An unordered set of key/value pairs</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token class-name\">IDictionary</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ConcurrentDictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TValue</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> newValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> comparisonValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TValue</span> <span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> addValue<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span> updateValueFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TValue</span> <span class=\"token function\">GetOrAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>All these collection classes are non-blocking. That is, if a thread tries to extract an element when  no such element exists, the thread returns immediately; the thread does not block waiting for an  element to appear. This is why methods like TryDequeue, TryPop, TryTake, and TryGetValue all  return true if an item was obtained and returns false, if not.</p>\n</blockquote>\n<blockquote>\n<p>These non-blocking collections are not necessarily lock-free. The ConcurrentDictionary class  uses Monitor internally, but the lock is held for a very short time while manipulating the item in the  collection. ConcurrentQueue and ConcurrentStack are lock-free; these both internally use Interlocked methods to manipulate the collection. A single ConcurrentBag object internally consists of a  mini-collection object per thread. When a thread adds an item to the bag, Interlocked methods are  used to add the item to the calling thread’s mini-collection. When a thread tries to extract an element  from the bag, the bag checks the calling thread’s mini-collection for the item. If the item is there, then  an Interlocked method is used to extract the item. If the thread’s mini-collection doesn’t have the item, then a Monitor is taken internally to extract an item from another thread’s mini-collection. We  say that the thread is stealing the item from another thread.</p>\n</blockquote>\n<blockquote>\n<p>You’ll notice that all the concurrent classes offer a GetEnumerator method, which is typically  used with C#’s foreach statement, but can also be used with Language Integrated Query (LINQ).  For the ConcurrentStack, ConcurrentQueue, and ConcurrentBag, the GetEnumerator method  takes a snapshot of the collection’s contents and returns elements from this snapshot; the contents of  the actual collection may change while enumerating over the snapshot. ConcurrentDictionary’s  GetEnumerator method does not take a snapshot of its contents, so the contents of the dictionary  may change while enumerating over the dictionary; beware of this. Also note that the Count property  returns the number of elements that are in the collection at the moment you query it. The count may  immediately become incorrect if other threads are adding or removing elements from the collection  at the same time.</p>\n</blockquote>\n<blockquote>\n<p>Three of the concurrent collection classes, ConcurrentStack, ConcurrentQueue, and  ConcurrentBag, implement the IProducerConsumerCollection interface, which is defined  as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProducerConsumerCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryTake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token return-type class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Any class that implements this interface can be turned into a blocking collection, where threads  producing (adding) items will block if the collection is full and threads consuming (removing) items  will block if the collection is empty. Of course, I’d try to avoid using blocking collections because their  purpose in life is to block threads. To turn a non-blocking collection into a blocking collection, you  construct a System.Collections.Concurrent.BlockingCollection class by passing in a reference to a non-blocking collection to its constructor. The BlockingCollection class looks like this  (some methods are not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">BlockingCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IProducerConsumerCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> collection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">Int32</span> boundedCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> msTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">TryTake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">T</span> item<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> msTimeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> BoundedCapacity <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsAddingCompleted <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true if CompleteAdding is called</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsCompleted <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true if IsAddingComplete is true and Count==0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When you construct a BlockingCollection, the boundedCapacity parameter indicates the  maximum number of items that you want in the collection. If a thread calls Add when the underlying  collection has reached its capacity, the producing thread will block. If preferred, the producing thread  can call TryAdd, passing a timeout (in milliseconds) and/or a CancellationToken, so that the thread  blocks until the item is added, the timeout expires, or the CancellationToken is canceled (see  Chapter 27 for more information about the CancellationToken class).</p>\n</blockquote>\n<blockquote>\n<p>The BlockingCollection class implements the IDisposable interface. When you call Dispose,  it calls Dispose on the underlying collection. It also disposes of two SemaphoreSlim objects that the  class uses internally to block producers and consumers.</p>\n</blockquote>\n<blockquote>\n<p>When producers will not be adding any more items into the collection, a producer should call  the CompleteAdding method. This will signal the consumers that no more items will be produced.  Specifically, this causes a foreach loop that is using GetConsumingEnumerable to terminate.  The following example code demonstrates how to set up a producer/consumer scenario and signal  completion.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// A thread pool thread will do the consuming</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span>ConsumeItems<span class=\"token punctuation\">,</span> bl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Add 5 items to the collection</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> item <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> item <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> item<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Producing: \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> bl<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Tell the consuming thread(s) that no more items will be added to the collection</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> bl<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// For testing purposes</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConsumeItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>BlockingCollection<span class=\"token operator\">&lt;</span>Int32<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// Block until an item shows up, then process it</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> bl<span class=\"token punctuation\">.</span><span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consuming: \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// The collection is empty and no more items are going into it</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All items have been consumed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I execute the preceding code, I get the following output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Producing: 0\nProducing: 1\nProducing: 2\nProducing: 3\nProducing: 4\nConsuming: 0\nConsuming: 1\nConsuming: 2\nConsuming: 3\nConsuming: 4\nAll items have been consumed\n</code></pre>\n<blockquote>\n<p>If you run this yourself, the Producing and Consuming lines could be interspersed, but the All  items have been consumed line will always be last.</p>\n</blockquote>\n<blockquote>\n<p>The BlockingCollection class also has static AddToAny, TryAddToAny, TakeFromAny, and  TryTakeFromAny methods. All of these methods take a BlockingCollection[], in addition to  an item, a timeout, and a CancellationToken. The (Try)AddToAny methods cycle through all the  collections in the array until they find a collection that can accept the item because it is below capacity. The (Try)TakeFromAny methods cycle through all the collections in the array until they find a  collection to remove an item from.</p>\n</blockquote>\n<p>💡小结：FCL 自带 4 个线程安全的集合类，全部在  <code>System.Collections.Concurrent</code>  命名空间中定义。它们是  <code>ConcurrentQueue</code> ， <code>ConcurrentStack</code> ， <code>ConcurrentDictionary</code>  和  <code>ConcurrentBag</code> 。所有这些集合类都是 “非阻塞” 的。换言之，如果一个线程试图提取一个不存在的元素 (数据项)，线程会立即返回；线程不会阻塞在那里，等着一个元素的出现。正是由于这个原因，所以如果获取了一个数据项，像  <code>TryDequeue</code> ， <code>TryPop</code> ， <code>TryTake</code>  和  <code>TryGetValue</code>  这样的方法全都返回 <code>true</code> ；否则返回  <code>false</code> 。一个集合 “非阻塞”，并不意味着它就就不需要锁了。 <code>ConcurrentDictionary</code>  类在内部使用了  <code>Monitor</code> 。 但是，对集合中的项进行操作时，锁只被占有极短的时间。 <code>ConcurrentQueue</code>  和  <code>ConcurrentStack</code>  确实不需要锁；它们两个在内部都使用  <code>Interlocked</code>  的方法来操纵集合。一个  <code>ConcurrentBag</code>  对象 (一个 bag) 由大量迷你集合对象构成，每个线程一个。线程将一个项添加到 bag 中时，就用  <code>Interlocked</code>  的方法将这个项添加到调用线程的迷你集合中。一个线程试图从 bag 中提取一个元素时，bag 就检查调用线程的迷你集合，试图从中取出数据项。如果数据项在那里，就用一个  <code>Interlocked</code>  方法提取这个项。如果不在，就在内部获取一个  <code>Monitor</code> ，以便从另一个线程的迷你集合提取一个项。这称为一个线程从另一个线程 “窃取” 一个数据项。注意，所有并发集合类都提供了  <code>GetEnumerator</code>  方法，它一般用于 C# 的  <code>foreach</code>  语句，但也可用于 LINQ。对于  <code>ConcurrentStack</code> ， <code>ConcurrentQueue</code>  和 <code>ConcurrentBag</code>  类， <code>GetEnumerator</code>  方法获取集合内容的一个 “快照”，并从这个快照返回元素；实际集合的内容可能在使用快照枚举时发生改变。 <code>ConcurrentDictionary</code>  的  <code>GetEnumerator</code>  方法不获取它的内容的快照。因此，在枚举字典期间，字典的内容可能改变；这一点务必注意。还要注意的是， <code>Count</code>  属性返回的是查询时集合中的元素数量。如果其他线程同时正在集合中增删元素，这个计数可能马上就变得不正确了。 <code>ConcurrentStack</code> ， <code>ConcurrentQueue</code>  和  <code>ConcurrentBag</code>  这三个并发集合类都实现了  <code>IProducerConsumerCollection</code>  接口。实现了这个接口的任何类都能转变成一个阻塞集合。如果集合已满，那么负责生产 (添加) 数据项的线程会阻塞；如果集合已空，那么负责消费 (移除) 数据项的线程会阻塞。要将非阻塞的集合转变成阻塞集合，需要构造一个  <code>System.Collecitons.Concurrent.BlockingCollection</code>  类，向它的构造器传递对非阻塞集合的引用。构造一个  <code>BlockingCollection</code>  时， <code>boundedCapacity</code>  参数指出你想在集合中最多容纳多少个数据项。在基础集合已满的时候，如果一个线程调用 <code>Add</code> ，生产线程就会阻塞。如果愿意，生产线程可调用  <code>TryAdd</code> ，传递一个超时值 (以毫秒为单位) 和 / 或一个  <code>CancellationToken</code> ，使线程一直阻塞，直到数据项成功添加、超时到期或者  <code>CancellationToken</code>  被取消。 <code>BlockingCollection</code>  类实现了  <code>IDisposable</code>  接口。调用  <code>Dispose</code>  时，这个  <code>Dispose</code>  会调用基础集合的  <code>Dispose</code> 。它还会对类内部用于阻塞生产者和消费者的两个  <code>SemaphoreSlim</code>  对象进行清理。生产者不再向集合添加更多的项时，生产者应调用  <code>CompleteAdding</code>  方法。这会向消费者发出信号，让它们知道不会再生产更多的项了。具体地说，这会造成正在使用  <code>GetConsumingEnumerable</code>  的一个  <code>foreach</code>  循环终止。 <code>BlockingCollection</code>  类还提供了静态  <code>AddToAny</code> ， <code>TryAddToAny</code> ， <code>TakeFromAny</code>  和  <code>TryTakeFromAny</code>  方法。所有这些方法都获取一个 <code>BlockingCollection&lt;T&gt;[]</code> ，以及一个数据项、一个超时值以及一个  <code>CancellationToken</code> 。 <code>(Try)AddToAny</code>  方法遍历数组中的所有集合，直到发现因为容量还没有到达 (还没有满)，而能够接受数据项的一个集合。 <code>(Try)TakeFromAny</code>  方法则遍历数组中的所有集合，直到发现一个能从中移除一个数据项的集合。</p>\n",
            "tags": [
                "CSharp",
                "CLR-via-CSharp",
                "读书笔记",
                "C#"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/02/09/csharp/clr-via-csharp/Chapter%2029%20Primitive%20Thread%20Synchronization%20Constructs/",
            "url": "http://sakupinera.github.io/2023/02/09/csharp/clr-via-csharp/Chapter%2029%20Primitive%20Thread%20Synchronization%20Constructs/",
            "title": "CLR via C# - Chapter 29 Primitive Thread Synchronization",
            "date_published": "2023-02-08T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-29-primitive-thread-synchronization-constructs\"><a class=\"anchor\" href=\"#chapter-29-primitive-thread-synchronization-constructs\">#</a> Chapter 29 Primitive Thread Synchronization Constructs</h1>\n<blockquote>\n<p>When a thread pool thread blocks, the thread pool creates additional threads, and the time and  memory resources required to create, destroy, and schedule threads is very expensive. When many  developers see that they have threads in their program that are not doing anything useful, they tend  to create more threads in hopes that the new threads will do something useful. The key to building  scalable and responsive applications is to not block the threads you have so that they can be used  and reused to execute other tasks. Chapter 27, “Compute-Bound Asynchronous Operations,” focused  on how to use existing threads to perform compute-bound operations, and Chapter 28, “I/O-Bound  Asynchronous Operations,” focused on how to use threads when performing I/O-bound operations.</p>\n</blockquote>\n<blockquote>\n<p>In this chapter, I focus on thread synchronization. Thread synchronization is used to prevent corruption when multiple threads access shared data at the same time. I emphasize at the same time,  because thread synchronization is all about timing. If you have some data that is accessed by two  threads and those threads cannot possibly touch the data simultaneously, then thread synchronization is not required at all. In Chapter 28, I discussed how different sections of async functions can  be executed by different threads. Here we could potentially have two different threads accessing  the same variables and data. But async functions are implemented in such a way that it is impossible  for two threads to access this same data at the same time. Therefore, no thread synchronization is  required when code accesses data contained within the async function.</p>\n</blockquote>\n<blockquote>\n<p>This is ideal because thread synchronization has many problems associated with it. First, it is  tedious and extremely error-prone. In your code, you must identify all data that could potentially be  touched by multiple threads at the same time. Then you must surround this code with additional code  that acquires and releases a thread synchronization lock. The lock ensures that only one thread at a  time can access the resource. If you forget to surround just one block of code with a lock, then the  data will become corrupted. Also, there is no way to prove that you have added all your locking code  correctly. You just have to run your application, stress-test it a lot, and hope that nothing goes wrong. In fact, you should test your application on a machine that has as many CPUs as possible because the  more CPUs you have, the better chance that two or more threads will attempt to access the resource  at the same time, making it more likely you’ll detect a problem.</p>\n</blockquote>\n<blockquote>\n<p>The second problem with locks is that they hurt performance. It takes time to acquire and release  a lock because there are additional method calls, and because the CPUs must coordinate with each  other to determine which thread will acquire the lock first. Having the CPUs in the machine communicate with each other this way hurts performance. For example, let’s say that you have code that adds  a node to the head of a linked list.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// This class is used by the LinkedList class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">internal</span> <span class=\"token class-name\">Node</span> m_next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Other members not shown</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> m_head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> newNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// The following two lines perform very fast reference assignments</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> newNode<span class=\"token punctuation\">.</span>m_next <span class=\"token operator\">=</span> m_head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> m_head <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>This Add method simply performs two reference assignments that can execute extremely fast.  Now, if we want to make Add thread safe so that multiple threads can call it simultaneously without  corrupting the linked list, then we need to have the Add method acquire and release a lock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">SomeKindOfLock</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SomeKindOfLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> m_head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> newNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// The following two lines perform very fast reference assignments</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> newNode<span class=\"token punctuation\">.</span>m_next <span class=\"token operator\">=</span> m_head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_head <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Although Add is now thread safe, it has also become substantially slower. How much slower depends on the kind of lock chosen; I will compare the performance of various locks in this chapter and  in Chapter 30, “Hybrid Thread Synchronization Constructs.” But even the fastest lock could make the  Add method several times slower than the version of it that didn’t have any lock code in it at all. Of  course, the performance becomes significantly worse if the code calls Add in a loop to insert several  nodes into the linked list.</p>\n</blockquote>\n<blockquote>\n<p>The third problem with thread synchronization locks is that they allow only one thread to access  the resource at a time. This is the lock’s whole reason for existing, but it is also a problem, because  blocking a thread causes more threads to be created. So, for example, if a thread pool thread attempts to acquire a lock that it cannot have, it is likely that the thread pool will create a new thread  to keep the CPUs saturated with work. As discussed in Chapter 26, “Thread Basics,” creating a thread  is very expensive in terms of both memory and performance. And to make matters even worse, when  the blocked thread gets to run again, it will run with this new thread pool thread; Windows is now  scheduling more threads than there are CPUs, and this increases context switching, which also hurts  performance.</p>\n</blockquote>\n<blockquote>\n<p>The summary of all of this is that thread synchronization is bad, so you should try to design your  applications to avoid as much of it as possible. To that end, you should avoid shared data such as  static fields. When a thread uses the new operator to construct an object, the new operator returns  a reference to the new object. At this point in time, only the thread that constructs the object has a  reference to it; no other thread can access that object. If you avoid passing this reference to another  thread that might use the object at the same time as the creating thread, then there is no need to  synchronize access to the object.</p>\n</blockquote>\n<blockquote>\n<p>Try to use value types because they are always copied, so each thread operates on its own copy.  Finally, it is OK to have multiple threads accessing shared data simultaneously if that access is readonly. For example, many applications create some data structures during their initialization. Once  initialized, the application can create as many threads as it wants; if all these threads just query the  data, then all the threads can do this simultaneously without acquiring or releasing any locks. The  String type is an example of this: after a String object is created, it is immutable; so many threads  can access a single String object at the same time without any chance of the String object becoming corrupted.</p>\n</blockquote>\n<p>💡小结：为了构建可伸缩的、响应灵敏的应用程序，关键在于不要阻塞你拥有的线程，使它们能用于 (和重用于) 执行其他任务。多个线程<strong>同时</strong>访问共享数据时，线程同步能防止数据损坏。之所以要强调<strong>同时</strong>，是因为线程同步问题其实就是计时问题。如果一些数据由两个线程访问，但那些线程不可能同时接触到数据，就完全用不着线程同步。可能有两个不同的线程访问相同的变量和数据，但根据异步函数的实现方式，不可能有两个线程<strong>同时</strong>访问相同的数据。所以，在代码访问异步函数中包含的数据时不需要线程同步。不需要线程同步是最理想的情况，因为线程同步存在许多问题。第一个问题是它比较繁琐，而且很容易写错。在你的代码中，必须标识出所有可能由多个线程同时访问的数据。然后，必须用额外的代码将这些代码包围起来，并获取和释放一个线程同步锁。锁的作用是确保一次只有一个线程访问资源。只要有一个代码块忘记用锁包围，数据就会损坏。另外，没有办法证明你已正确添加了所有锁定代码。只能运行应用程序，对它进行大量压力测试，并寄希望于没有什么地方出错。事实上，应该在 CPU (或 CPU 内核) 数量尽可能多的机器上测试应用程序。因为 CPU 越多，两个或多个线程同时访问资源的机率越大，越容易检测到问题。锁的第二个问题在于，它们会损害性能。获取和释放锁是需要时间的，因为要调用一些额外的方法，而且不同的 CPU 必须进行协调，以决定哪个线程先取得锁。让机器中的 CPU 以这种方式相互通信，会对性能造成影响。线程同步锁的第三个问题在于，它们一次只允许一个线程访问资源。这是锁的全部意义之所在，但也是问题之所在，因为阻塞一个线程会造成更多的线程被创建。创建线程时一个昂贵的操作，会耗费大量内存和时间。更不妙的是，当阻塞的线程再次运行时，它会和这个新的线程池线程共同运行。也就是说，Windows 现在要调度比 CPU 数量更多的线程，这会增大上下文切换的机率，进一步损害到性能。综上所述，线程同步是一件不好的事情，所以在设计自己的应用程序时，应该尽可能地避免进行线程同步。具体就是避免使用像静态字段这样的共享数据。线程用  <code>new</code>  操作符构造对象时， <code>new</code>  操作符会返回对新对象的引用。在这个时刻，只要构造对象的线程才有对它的引用；其他任何线程都不能访问那个对象。如果能避免将这个引用传给可能同时使用对象的另一个线程，就不必同步对该对象的访问。可试着使用值类型，因为它们总是被复制，每个线程操作的都是它自己的副本。最后，多个线程同时对共享数据进行只读访问是没有任何问题的。</p>\n<h2 id=\"class-libraries-and-thread-safety\"><a class=\"anchor\" href=\"#class-libraries-and-thread-safety\">#</a> Class Libraries and Thread Safety</h2>\n<blockquote>\n<p>Now, I’d like to say a quick word about class libraries and thread synchronization. Microsoft’s Framework Class Library (FCL) guarantees that all static methods are thread safe. This means that if two  threads call a static method at the same time, no data will get corrupted. The FCL had to do this  internally because there is no way that multiple companies producing different assemblies could coordinate on a single lock for arbitrating access to the resource. The Console class contains a static field, inside which many of its methods acquire and release to ensure that only one thread at a time is  accessing the console.</p>\n</blockquote>\n<blockquote>\n<p>For the record, making a method thread safe does not mean that it internally takes a thread  synchronization lock. A thread-safe method means that data doesn’t get corrupted if two threads  attempt to access the data at the same time. The System.Math class has a static Max method  implemented as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> val1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> val2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>val1 <span class=\"token operator\">&lt;</span> val2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> val2 <span class=\"token punctuation\">:</span> val1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>This method is thread safe even though it doesn’t take any lock. Because Int32 is a value type,  the two Int32 values passed to Max are copied into it and so, multiple threads could be calling Max simultaneously, but each thread is working on its own data, isolated from any other thread.</p>\n</blockquote>\n<blockquote>\n<p>On the other hand, the FCL does not guarantee that instance methods are thread safe because  adding all the locking code would hurt performance too much. And, in fact, if every instance method  acquires and releases a lock, then you ultimately end up having just one thread running in your application at any given time, which hurts performance even more. As mentioned earlier, when a thread  constructs an object, only this thread has a reference to the object, no other thread can access that  object, and no thread synchronization is required when invoking instance methods. However, if the  thread then exposes the reference to the object—by placing it in a static field, passing as the state  argument to ThreadPool.QueueUserWorkItem or to a Task, and so on—then thread synchronization is required if the threads could attempt simultaneous non-read-only access</p>\n</blockquote>\n<blockquote>\n<p>It is recommended that your own class libraries follow this pattern; that is, make all your static  methods thread safe and make all your instance methods not thread safe. There is one caveat to this  pattern: if the purpose of the instance method is to coordinate threads, then the instance method  should be thread safe. For example, one thread can cancel an operation by calling CancellationTokenSource’s Cancel method, and another thread detects that it should stop what it’s doing by  querying the corresponding CancellationToken’s IsCancellationRequested property. These  two instance members have some special thread synchronization code inside them to ensure that the  coordination of the two threads goes as expected.</p>\n</blockquote>\n<p>💡小结：Microsoft 的 Framework Class Library (FCL) 保证所有静态方法都是线程安全的。这意味着假如两个线程同时调用一个静态方法，不会发生数据被破坏的情况。FCL 必须在内部做到这一点，因为开发不同程序集的多个公司不可能事先协商好使用一个锁来仲裁对资源的访问。 <code>Console</code>  类包含了一个静态字段，类的许多方法都要获取和释放这个字段上的锁，确保一次只有一个线程访问控制台。要郑重声明的是，使一个方法线程安全，并不是说它一定要在内部获取一个线程同步锁。线程安全的方法意味着在两个线程试图同时访问数据时，数据不会被破坏。另一方面，FCL 不保证实例方法是线程安全的，因为假如全部添加锁定，会造成性能的巨大损失。另外，假如每个实例方法都需要获取和释放一个锁，事实上会造成最终在任何给定的时刻，你的应用程序只有一个线程在运行，这对性能的影响是显而易见的。如前所述，调用实例方法时无需线程同步。然而，如果线程随后公开了这个对象引用 ———— 把它放到一个静态字段中，把它作为状态实参传给一个  <code>ThreadPool.QueueUserWorkItem</code>  或  <code>Task</code>  ———— 那么在多个线程可能同时进行非读只读访问的前提下，就需要线程同步。建议你自己的类库也遵循 FCL 的这个模式；也就是说，使自己的所有静态方法都线程安全，使所有实例方法都非线程安全。这个模式有一点要注意：如果实例方法的目的是协调线程，则实例方法应该是线程安全的。</p>\n<h2 id=\"primitive-user-mode-and-kernel-mode-constructs\"><a class=\"anchor\" href=\"#primitive-user-mode-and-kernel-mode-constructs\">#</a> Primitive User-Mode and Kernel-Mode Constructs</h2>\n<blockquote>\n<p>n this chapter, I explain the primitive thread synchronization constructs. By primitive, I mean the  simplest constructs that are available to use in your code. There are two kinds of primitive constructs:  user-mode and kernel-mode. Whenever possible, you should use the primitive user-mode constructs,  because they are significantly faster than the kernel-mode constructs because they use special CPU  instructions to coordinate threads. This means that the coordination is occurring in hardware (which  is what makes it fast). But this also means that the Windows operating system never detects that a  thread is blocked on a primitive user-mode construct. Because a thread pool thread blocked on a  user-mode primitive construct is never considered blocked, the thread pool will not create a new  thread to replace the temporarily blocked thread. In addition, these CPU instructions block the thread  for an incredibly short period of time.</p>\n</blockquote>\n<blockquote>\n<p>Wow! All of this sounds great, doesn’t it? And it is great, which is why I recommend using these  constructs as much as possible. However, there is a downside—only the Windows operating system  kernel can stop a thread from running so that it is not wasting CPU time. A thread running in user  mode can be preempted by the system, but the thread will be scheduled again as soon as possible.  So, a thread that wants to acquire some resource, but can’t get it, spins in user mode. This potentially wastes a lot of CPU time, which would be better spent performing other work or even just letting the  CPU go idle to conserve power.</p>\n</blockquote>\n<blockquote>\n<p>This brings us to the primitive kernel-mode constructs. The kernel-mode constructs are provided  by the Windows operating system itself. As such, they require that your application’s threads call  functions implemented in the operating system kernel. Having threads transition from user mode to  kernel mode and back incurs a big performance hit, which is why kernel-mode constructs should be  avoided.2 However, they do have a positive feature—when a thread uses a kernel-mode construct to  acquire a resource that another thread has, Windows blocks the thread so that it is no longer wasting  CPU time. Then, when the resource becomes available, Windows resumes the thread, allowing it to  access the resource.</p>\n</blockquote>\n<blockquote>\n<p>A thread waiting on a construct might block forever if the thread currently holding the construct  never releases it. If the construct is a user-mode construct, the thread is running on a CPU forever,  and we call this a livelock. If the construct is a kernel-mode construct, the thread is blocked forever,  and we call this a deadlock. Both of these are bad, but of the two, a deadlock is always preferable to  a livelock, because a livelock wastes both CPU time and memory (the thread’s stack, etc.), whereas a  deadlock wastes only memory.</p>\n</blockquote>\n<blockquote>\n<p>In an ideal world, we’d like to have constructs that take the best of both worlds. That is, we’d like a  construct that is fast and non-blocking (like the user-mode constructs) when there is no contention.  But when there is contention for the construct, we’d like it to be blocked by the operating system  kernel. Constructs that work like this do exist; I call them hybrid constructs, and I will discuss them in  Chapter 30. It is very common for applications to use the hybrid constructs, because in most applications, it is rare for two or more threads to attempt to access the same data at the same time. A hybrid  construct keeps your application running fast most of the time, and occasionally it runs slowly to  block the thread. The slowness usually doesn’t matter at this point, because your thread is going to be  blocked anyway.</p>\n</blockquote>\n<blockquote>\n<p>Many of the CLR’s thread synchronization constructs are really just object-oriented class wrappers around Win32 thread synchronization constructs. After all, CLR threads are Windows threads,  which means that Windows schedules and controls the synchronization of threads. Windows thread  synchronization constructs have been around because 1992, and a ton of material has been written  about them.4 Therefore, I give them only cursory treatment in this chapter.</p>\n</blockquote>\n<p>💡小结：<strong>基元</strong> (primitive) 是指可以在代码中使用的最简单的构造。有两种基元构造；用户模式 (user-mode) 和内核模式 (kernel-mode)。应尽量使用基元用户模式构造，它们的速度要显著快于内核模式的构造。这是因为它们使用了特殊 CPU 指令来协调线程。这意味着协调是在硬件中发生的 (所以才这么快)。但这也意味着 Microsoft Windows 操作系统永远检测不到一个线程在基元用户模式的构造上阻塞了。由于在用户模式的基元构造上阻塞的线程池线程永远不认为已阻塞，所以线程池不会创建新线程来替换这种临时阻塞的线程。此外，这些 CPU 指令只阻塞线程相当短的时间。但它们也有一个缺点：只有 Windows 操作系统内核才能停止一个线程的运行 (防止它浪费 CPU 时间)。在用户模式中运行的线程可能被系统抢占 (preempted)，但线程会以最快的速度再次调度。所以，想要取得资源但暂时取不到的线程会一直在用户模式中 “自旋”，这可能浪费大量 CPU 时间，而这些 CPU 时间本可用于执行其他更有用的工作。即便没有其他更有用的工作，更好的做法也是让 CPU 空闲，这至少能省一点电。核模式的构造是由 Windows 操作系统自身提供的。所以，它们要求在应用程序的线程中调用由操作系统内核实现的函数。将线程从用户模式切换为内核模式 (或相反) 会招致巨大的性能损失，这正是为什么要避免使用内核模式构造的原因。&lt;sup&gt;①&lt;/sup &gt; 但它们有一个重要的优点：线程通过内核模式的构造获取其他线程拥有的资源时，Windows 会阻塞线程以避免它浪费 CPU 时间。当资源变得可用时，Windows 会恢复线程，允许它访问资源。对于在一个构造上等待的线程，如果拥有这个构造的线程一直不释放它，前者就可能一直阻塞。如果是用户模式的构造，线程将一直在一个 CPU 上运行，我们称为 “活锁”(deadlock)。两种情况都不好。但在两者之间，死锁总是优于活锁，因为活锁既浪费 CPU 时间，又浪费内存 (线程栈等)，而死锁只浪费内存。理想中的构造应兼具两者的长处。也就是说，在没有竞争的情况下，这个构造应该快而且不会阻塞 (就像用户模式的构造)。但如果存在对构造的竞争，我希望它被操作系统内核阻塞。像这样的构造确实存在；我把它们称为<strong>混合构造</strong> (hybrid construct)。混合构造使你的应用程序在大多数时间都快速运行，偶尔运行得比较慢是为了阻塞线程。CLR 的许多线程同步构造实际只是 &quot;Win32 线程同步构造&quot; 的一些面向对象的类包装器。毕竟，CLR 线程就是 Windows 线程，这意味着要由 Windows 调度线程和控制线程同步。</p>\n<h2 id=\"user-mode-constructs\"><a class=\"anchor\" href=\"#user-mode-constructs\">#</a> User-Mode Constructs</h2>\n<blockquote>\n<p>The CLR guarantees that reads and writes to variables of the following data types are atomic: Boolean,  Char, (S)Byte, (U)Int16, (U)Int32, (U)IntPtr, Single, and reference types. This means that  all bytes within that variable are read from or written to all at once. So, for example, if you have the  following class:</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>and if a thread executes this line of code:</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SomeType<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0x01234567</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>then the x variable will change from 0x00000000 to 0x01234567 all at once (atomically). Another  thread cannot possibly see the value in an intermediate state. For example, it is impossible for some  other read to query SomeType.x and get a value of 0x01230000. Suppose that the x field in the  preceding SomeType class is an Int64. If a thread executes this line of code:</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SomeType<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0x0123456789abcdef</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>it is possible that another thread could query x and get a value of 0x0123456700000000 or  0x0000000089abcdef, because the read and write operations are not atomic. This is called a torn  read.</p>\n</blockquote>\n<blockquote>\n<p>Although atomic access to variable guarantees that the read or write happens all at once, it does  not guarantee when the read or write will happen due to compiler and CPU optimizations. The primitive user-mode constructs discussed in this section are used to enforce the timing of these atomic  read and write operations. In addition, these constructs can also force atomic and timed access to  variables of additional data types: (U)Int64 and Double.</p>\n</blockquote>\n<blockquote>\n<p>There are two kinds of primitive user-mode thread synchronization constructs:</p>\n<ul>\n<li>\n<p>Volatile constructs, which perform an atomic read or write operation on a variable containing  a simple data type at a specific time</p>\n</li>\n<li>\n<p>Interlocked constructs, which perform an atomic read and write operation on a variable containing a simple data type at a specific time</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>All the volatile and interlocked constructs require you to pass a reference (memory address) to a  variable containing a simple data type.</p>\n</blockquote>\n<h3 id=\"volatile-constructs\"><a class=\"anchor\" href=\"#volatile-constructs\">#</a> Volatile Constructs</h3>\n<blockquote>\n<p>Back in the early days of computing, software was written using assembly language. Assembly language is very tedious, because programmers must explicitly state everything—use this CPU register  for this, branch to that, call indirect through this other thing, and so on. To simplify programming, higher-level languages were introduced. These higher-level languages introduced common useful  constructs, like if/else, switch/case, various loops, local variables, arguments, virtual method  calls, operator overloads, and much more. Ultimately, these language compilers must convert the  high-level constructs down to the low-level constructs so that the computer can actually do what you  want it to do.</p>\n</blockquote>\n<blockquote>\n<p>In other words, the C# compiler translates your C# constructs into Intermediate Language (IL),  which is then converted by the just-in-time (JIT) compiler into native CPU instructions, which must  then be processed by the CPU itself. In addition, the C# compiler, the JIT compiler, and even the CPU  itself can optimize your code. For example, the following ridiculous method can ultimately be compiled into nothing.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OptimizedAway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Constant expression is computed at compile time resulting in zero</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// If value is 0, the loop never executes</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// There is no need to compile the code in the loop because it can never execute</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jeff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, the compiler can see that value will always be 0; therefore, the loop will never execute and consequently, there is no need to compile the code inside the loop. This method could be  compiled down to nothing. In fact, when JITting a method that calls OptimizedAway, the JITter will  try to inline the OptimizedAway method’s code. Because there is no code, the JITter will even remove  the code that tries to call OptimizedAway. We love this feature of compilers. As developers, we get  to write the code in the way that makes the most sense to us. The code should be easy to write, read,  and maintain. Then compilers translate our intentions into machine-understandable code. We want  our compilers to do the best job possible for us.</p>\n</blockquote>\n<blockquote>\n<p>When the C# compiler, JIT compiler, and CPU optimize our code, they guarantee us that the intention of the code is preserved. That is, from a single-threaded perspective, the method does what we  want it to do, although it may not do it exactly the way we described in our source code. However, the  intention might not be preserved from a multithreaded perspective. Here is an example where the  optimizations make the program not work as expected.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StrangeBehavior</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// As you'll see later, mark this field as volatile to fix the problem</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> s_stopWorker <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main: letting worker run for 5 seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span>Worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> s_stopWorker <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main: waiting for worker to stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s_stopWorker<span class=\"token punctuation\">)</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Worker: stopped when x=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, the Main method creates a new thread that executes the Worker method. This  Worker method counts as high as it can before being told to stop. The Main method allows the  Worker thread to run for five seconds before telling it to stop by setting the static Boolean field to  true. At this point, the Worker thread should display what it counted up to, and then the thread will  terminate. The Main thread waits for the Worker thread to terminate by calling Join, and then the  Main thread returns, causing the whole process to terminate.</p>\n</blockquote>\n<blockquote>\n<p>Looks simple enough, right? Well, the program has a potential problem due to all the optimizations that could happen to it. You see, when the Worker method is compiled, the compiler sees  that s_stopWorker is either true or false, and it also sees that this value never changes inside  the Worker method itself. So the compiler could produce code that checks s_stopWorker first. If  s_stopWorker is true, then Worker: stopped when x=0 will be displayed. If s_stopWorker is  false, then the compiler produces code that enters an infinite loop that increments x forever. You  see, the optimizations cause the loop to run very fast because checking s_stopWorker only occurs  once before the loop; it does not get checked with each iteration of the loop.</p>\n</blockquote>\n<blockquote>\n<p>If you actually want to see this in action, put this code in a .cs file and compile the code by using  C#’s /platform:x86 and /optimize+ switches. Then run the resulting EXE file, and you’ll see that  the program runs forever. Note that you have to compile for x86, ensuring that the x86 JIT compiler  is used at run time. The x86 JIT compiler is more mature than the x64 JIT compiler, so it performs  more aggressive optimizations. The x64 JIT compiler does not perform this particular optimization,  and therefore the program runs to completion. This highlights another interesting point about all of  this. Whether your program behaves as expected depends on a lot of factors, such as which compiler  version and compiler switches are used, which JIT compiler is used, and which CPU your code is running on. In addition, to see the preceding program run forever, you must not run the program under  a debugger because the debugger causes the JIT compiler to produce unoptimized code that is easier  to step through.</p>\n</blockquote>\n<blockquote>\n<p>Let’s look at another example, which has two threads that are both accessing two fields.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadsSharingData</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// This method is executed by one thread </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Note: These could execute in reverse order</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> m_value <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// This method is executed by another thread </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Note: m_value could be read before m_flag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>m_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The problem with this code is that the compilers/CPU could translate the code in such a way as to  reverse the two lines of code in the Thread1 method. After all, reversing the two lines of code does  not change the intention of the method. The method needs to get a 5 in m_value and a 1 in m_flag.  From a single-threaded application’s perspective, the order of executing this code is unimportant.  If these two lines do execute in reverse order, then another thread executing the Thread2 method  could see that m_flag is 1 and then display 0.</p>\n</blockquote>\n<blockquote>\n<p>Let’s look at this code another way. Let’s say that the code in the Thread1 method executes in  program order (the way it was written). When compiling the code in the Thread2 method, the compiler must generate code to read m_flag and m_value from RAM into CPU registers. It is possible  that RAM will deliver the value of m_value first, which would contain a 0. Then the Thread1 method  could execute, changing m_value to 5 and m_flag to 1. But Thread2’s CPU register doesn’t see that  m_value has been changed to 5 by this other thread, and then the value in m_flag could be read  from RAM into a CPU register and the value of m_flag becomes 1 now, causing Thread2 to again  display 0.</p>\n</blockquote>\n<blockquote>\n<p>This is all very scary stuff and is more likely to cause problems in a release build of your program  than in a debug build of your program, making it particularly tricky to detect these problems and correct your code. Now, let’s talk about how to correct your code.</p>\n</blockquote>\n<blockquote>\n<p>The static System.Threading.Volatile class offers two static methods that look like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Volatile</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>These methods are special. In effect, these methods disable some optimizations usually performed  by the C# compiler, the JIT compiler, and the CPU itself. Here’s how the methods work:</p>\n<ul>\n<li>\n<p>The Volatile.Write method forces the value in location to be written to at the point of  the call. In addition, any earlier program-order loads and stores must occur before the call to  Volatile.Write.</p>\n</li>\n<li>\n<p>The Volatile.Read method forces the value in location to be read from at the point of  the call. In addition, any later program-order loads and stores must occur after the call to  Volatile.Read.</p>\n</li>\n</ul>\n</blockquote>\n<p>💡重要提示：我知道目前这些概念很容易令人迷惑，所以让我归纳一条简单的规则：当线程通过共享内存相互通信时，调用  <code>Volatile.Write</code>  来写入最后一个值，调用  <code>Volatile.Read</code>  来读取第一个值。</p>\n<blockquote>\n<p>So now we can fix the ThreadsSharingData class by using these methods.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadsSharingData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// This method is executed by one thread </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Note: 5 must be written to m_value before 1 is written to m_flag</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> m_value <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Volatile<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_flag<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// This method is executed by another thread </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Note: m_value must be read after m_flag is read </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Volatile<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>m_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>First, notice that we are following the rule. The Thread1 method writes two values out to fields  that are shared by multiple threads. The last value that we want written (setting m_flag to 1) is performed by calling Volatile.Write. The Thread2 method reads two values from fields shared by  multiple threads, and the first value being read (m_flag) is performed by calling Volatile.Read.</p>\n</blockquote>\n<blockquote>\n<p>But what is really happening here? Well, for the Thread1 method, the Volatile.Write call  ensures that all the writes above it are completed before a 1 is written to m_flag. Because m_value  = 5 is before the call to Volatile.Write, it must complete first. In fact, if there were many variables  being modified before the call to Volatile.Write, they would all have to complete before 1 is written to m_flag. Note that the writes before the call to Volatile.Write can be optimized to execute  in any order; it’s just that all the writes have to complete before the call to Volatile.Write.</p>\n</blockquote>\n<blockquote>\n<p>For the Thread2 method, the Volatile.Read call ensures that all variable reads after it start after  the value in m_flag has been read. Because reading m_value is after the call to Volatile.Read,  the value must be read after having read the value in m_flag. If there were many reads after the call  to Volatile.Read, they would all have to start after the value in m_flag has been read. Note that  the reads after the call to Volatile.Read can be optimized to execute in any order; it’s just that the  reads can’t start happening until after the call to Volatile.Read.</p>\n</blockquote>\n<h3 id=\"cs-support-for-volatile-fields\"><a class=\"anchor\" href=\"#cs-support-for-volatile-fields\">#</a> C#’s Support for Volatile Fields</h3>\n<blockquote>\n<p>Making sure that programmers call the Volatile.Read and Volatile.Write methods correctly is  a lot to ask. It’s hard for programmers to keep all of this in their minds and to start imagining what  other threads might be doing to shared data in the background. To simplify this, the C# compiler  has the volatile keyword, which can be applied to static or instance fields of any of these types:  Boolean, (S)Byte, (U)Int16, (U)Int32, (U)IntPtr, Single, or Char. You can also apply the  volatile keyword to reference types and any enum field as long as the enumerated type has an  underlying type of (S)Byte, (U)Int16, or (U)Int32. The JIT compiler ensures that all accesses to  a volatile field are performed as volatile reads and writes, so that it is not necessary to explicitly call  Volatile's static Read or Write methods. Furthermore, the volatile keyword tells the C# and JIT  compilers not to cache the field in a CPU register, ensuring that all reads to and from the field actually cause the value to be read from memory.</p>\n</blockquote>\n<blockquote>\n<p>Using the volatile keyword, we can rewrite the ThreadsSharingData class as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadsSharingData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Int32</span> m_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// This method is executed by one thread </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Note: 5 must be written to m_value before 1 is written to m_flag</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> m_value <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// This method is executed by another thread </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Note: m_value must be read after m_flag is read </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>m_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>There are some developers (and I am one of them) who do not like C#’s volatile keyword, and  they think that the language should not provide it.6 Our thinking is that most algorithms require few  volatile read or write accesses to a field and that most other accesses to the field can occur normally,  improving performance; seldom is it required that all accesses to a field be volatile. For example, it is  difficult to interpret how to apply volatile read operations to algorithms like this one.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_amount <span class=\"token operator\">=</span> m_amount <span class=\"token operator\">+</span> m_amount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assume m_amount is a volatile field defined in a class</span></pre></td></tr></table></figure><blockquote>\n<p>Normally, an integer number can be doubled simply by shifting all bits left by 1 bit, and many  compilers can examine the preceding code and perform this optimization. However, if m_amount is a volatile field, then this optimization is not allowed. The compiler must produce code to read  m_amount into a register and then read it again into another register, add the two registers together, and then write the result back out to the m_amount field. The unoptimized code is certainly bigger  and slower; it would be unfortunate if it were contained inside a loop.</p>\n</blockquote>\n<blockquote>\n<p>Furthermore, C# does not support passing a volatile field by reference to a method. For example, if m_amount is defined as a volatile Int32, attempting to call Int32’s TryParse method  causes the compiler to generate a warning as shown here.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> success <span class=\"token operator\">=</span> Int32<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> m_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// The preceding line causes the C# compiler to generate a warning: </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// CS0420: a reference to a volatile field will not be treated as volatile</span></pre></td></tr></table></figure><blockquote>\n<p>Finally, volatile fields are not Common Language Specification (CLS) compliant because many languages (including Visual Basic) do not support them.</p>\n</blockquote>\n<h3 id=\"interlocked-constructs\"><a class=\"anchor\" href=\"#interlocked-constructs\">#</a> Interlocked Constructs</h3>\n<blockquote>\n<p>Volatile’s Read method performs an atomic read operation, and its Write method performs an  atomic write operation. That is, each method performs either an atomic read operation or an atomic  write operation. In this section, we look at the static System.Threading.Interlocked class’s methods. Each of the methods in the Interlocked class performs an atomic read and write operation. In  addition, all the Interlocked methods are full memory fences. That is, any variable writes before the  call to an Interlocked method execute before the Interlocked method, and any variable reads  after the call execute after the call.</p>\n</blockquote>\n<blockquote>\n<p>The static methods that operate on Int32 variables are by far the most commonly used methods.  I show them here.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Interlocked</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// return (++location) </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// return (--location) </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// return (location += value) </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Note: value can be a negative number allowing subtraction </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Int32 old = location; location = value; return old; </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Int32 old = location; </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// if (location == comparand) location = value;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// return old; </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> comparand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>There are also overloads of the preceding methods that operate on Int64 values. Furthermore,  the Interlocked class offers Exchange and CompareExchange methods that take Object, IntPtr,  Single, and Double, and there is also a generic version in which the generic type is constrained to  class (any reference type).</p>\n</blockquote>\n<blockquote>\n<p>Personally, I love the Interlocked methods, because they are relatively fast and you can do so  much with them. Let me show you some code that uses the Interlocked methods to asynchronously  query several web servers and concurrently process the returned data. This code is pretty short, never  blocks any threads, and uses thread pool threads to scale automatically, consuming up to the number  of CPUs available if its workload could benefit from it. In addition, the code, as is, supports accessing  up to 2,147,483,647 (Int32.MaxValue) web servers. In other words, this code is a great model to follow for your own scenarios.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiWebRequests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// This helper class coordinates all the asynchronous operations</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">AsyncCoordinator</span> m_ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AsyncCoordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Set of web servers we want to query &amp; their responses (Exception or Int32)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// NOTE: Even though multiple could access this dictionary simultaneously,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// there is no need to synchronize access to it because the keys are </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// read-only after construction</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">></span></span> m_servers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"http://Wintellect.com/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"http://Microsoft.com/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"http://1.1.1.1/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">MultiWebRequests</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> timeout <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Asynchronously initiate all the requests all at once</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> server <span class=\"token keyword\">in</span> m_servers<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> m_ac<span class=\"token punctuation\">.</span><span class=\"token function\">AboutToBegin</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetByteArrayAsync</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> <span class=\"token function\">ComputeResult</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">// Tell AsyncCoordinator that all operations have been initiated and to call</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token comment\">// AllDone when all operations complete, Cancel is called, or the timeout occurs</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> m_ac<span class=\"token punctuation\">.</span><span class=\"token function\">AllBegun</span><span class=\"token punctuation\">(</span>AllDone<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ComputeResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> server<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>Exception <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> result <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>InnerException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token comment\">// Process I/O completion here on thread pool thread(s)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">// Put your own compute-intensive algorithm here...</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> result <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// This example just returns the length</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token comment\">// Save result (exception/sum) and indicate that 1 operation completed</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> m_servers<span class=\"token punctuation\">[</span>server<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> m_ac<span class=\"token punctuation\">.</span><span class=\"token function\">JustEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token comment\">// Calling this method indicates that the results don't matter anymore</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_ac<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token comment\">// This method is called after all web servers respond, </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">// Cancel is called, or the timeout occurs</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AllDone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CoordinationStatus</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token keyword\">case</span> CoordinationStatus<span class=\"token punctuation\">.</span>Cancel<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Operation canceled.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token keyword\">case</span> CoordinationStatus<span class=\"token punctuation\">.</span>Timeout<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Operation timed-out.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> <span class=\"token keyword\">case</span> CoordinationStatus<span class=\"token punctuation\">.</span>AllDone<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Operation completed; results below:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> server <span class=\"token keyword\">in</span> m_servers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125; \"</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token keyword\">is</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed due to &#123;0&#125;.\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returned &#123;0:N0&#125; bytes.\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OK, the preceding code doesn’t actually use any Interlocked methods directly, because I encapsulated all the coordination code in a reusable class called AsyncCoordinator, which I’ll explain  shortly. Let me first explain what this class is doing. When the MultiWebRequest class is constructed, it initializes an AsyncCoordinator and a dictionary containing the set of server URIs (and their  future result). It then issues all the web requests asynchronously one right after the other. It does  this by first calling AsyncCoordinator’s AboutToBegin method, passing it the number of requests  about to be issued.7 Then it initiates the request by calling HttpClient’s GetByteArrayAsync. This  returns a Task and I then call ContinueWith on this Task so that when the server replies with the  bytes, they can be processed by my ComputeResult method concurrently via many thread pool  threads. After all the web servers’ requests have been made, the AsyncCoordinator’s AllBegun method is called, passing it the name of the method (AllDone) that should execute when all the  operations complete and a timeout value. As each web server responds, various thread pool threads will call the MultiWebRequests’s ComputeResult method. This method processes the bytes returned from the server (or any error that may have occurred) and saves the result in the dictionary  collection. After storing each result, AsyncCoordinator’s JustEnded method is called to let the  AsyncCoordinator object know that an operation completed.</p>\n</blockquote>\n<blockquote>\n<p>If all the operations have completed, then the AsyncCoordinator will invoke the AllDone method  to process the results from all the web servers. The code executing the AllDone method will be the  thread pool thread that just happened to get the last web server response. If timeout or cancellation  occurs, then AllDone will be invoked via whatever thread pool thread notifies the AsyncCoordinator of timeout or using whatever thread happened to call the Cancel method. There is also a chance that  the thread issuing the web server requests could invoke AllDone itself if the last request completes  before AllBegun is called.</p>\n</blockquote>\n<blockquote>\n<p>Note that there is a race because it is possible that all web server requests complete, AllBegun is called, timeout occurs, and Cancel is called all at the exact same time. If this happens, then the  AsyncCoordinator will select a winner and three losers, ensuring that the AllDone method is never  called more than once. The winner is identified by the status argument passed into AllDone, which  can be one of the symbols defined by the CoordinationStatus type.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CoordinationStatus</span> <span class=\"token punctuation\">&#123;</span> AllDone<span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">,</span> Cancel <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Now that you get a sense of what happens, let’s take a look at how it works. The AsyncCoordinator class encapsulates all the thread coordination logic in it. It uses Interlocked methods for everything to ensure that the code runs extremely fast and that no threads ever  block. Here is the code for this class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncCoordinator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_opCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Decremented when AllBegun calls JustEnded</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_statusReported <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0=false, 1=true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>CoordinationStatus<span class=\"token punctuation\">></span></span> m_callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Timer</span> m_timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// This method MUST be called BEFORE initiating an operation </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AboutToBegin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> opsToAdd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_opCount<span class=\"token punctuation\">,</span> opsToAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// This method MUST be called AFTER an operation’s result has been processed </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">JustEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_opCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token function\">ReportStatus</span><span class=\"token punctuation\">(</span>CoordinationStatus<span class=\"token punctuation\">.</span>AllDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// This method MUST be called AFTER initiating ALL operations</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AllBegun</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>CoordinationStatus<span class=\"token punctuation\">></span></span> callback<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token class-name\">Int32</span> timeout <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> m_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">!=</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> m_timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Timer</span><span class=\"token punctuation\">(</span>TimeExpired<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token function\">JustEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TimeExpired</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">ReportStatus</span><span class=\"token punctuation\">(</span>CoordinationStatus<span class=\"token punctuation\">.</span>Timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">ReportStatus</span><span class=\"token punctuation\">(</span>CoordinationStatus<span class=\"token punctuation\">.</span>Cancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReportStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CoordinationStatus</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token comment\">// If status has never been reported, report it; else ignore it</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_statusReported<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token function\">m_callback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The most important field in this class is the m_opCount field. This field keeps track of the number  of asynchronous operations that are still outstanding. Just before each asynchronous operation is  started, AboutToBegin is called. This method calls Interlocked.Add to add the number passed  to it to the m_opCount field in an atomic way. Adding to m_opCount must be performed atomically  because web servers could be processing responses on thread pool threads as more operations are  being started. As web server responses are processed, JustEnded is called. This method calls Interlocked.Decrement to atomically subtract 1 from m_opCount. Whichever thread happens to set  m_opCount to 0 calls ReportStatus.</p>\n</blockquote>\n<p>💡注意： <code>m_opCount</code>  字段初始化为 1 (而非 0)，这一点很重要。执行构造器方法的线程在发出 <strong>Web</strong> 服务器请求期间，由于  <code>m_opCount</code>  字段为 1，所以能保证  <code>AllDone</code>  不会被调用。构造器调用  <code>AllBegun</code>  之前， <code>m_opCount</code>  永远不不可能变成 0 。构造器调用  <code>AllBegun</code>  时， <code>AllBegun</code>  内部调用  <code>JustEnded</code>  来递减  <code>m_opCount</code> ，所以事实上撤销 ( <code>undo</code> ) 了把它初始化成 1 的效果。现在  <code>m_opCount</code>  能变成 0 了，但只能是在发起了所有 Web 服务器请求之后。</p>\n<blockquote>\n<p>The ReportStatus method arbitrates the race that can occur among all the operations completing, the timeout occurring, and Cancel being called. ReportStatus must make sure that only one  of these conditions is considered the winner so that the m_callback method is invoked only once.  Arbitrating the winner is done via calling Interlocked.Exchange, passing it a reference to the  m_statusReported field. This field is really treated as a Boolean variable; however, it can’t actually  be a Boolean variable because there are no Interlocked methods that accept a Boolean variable.  So I use an Int32 variable instead where 0 means false and 1 means true.</p>\n</blockquote>\n<blockquote>\n<p>Inside ReportStatus, the Interlocked.Exchange call will change m_statusReported to 1. But  only the first thread to do this will see Interlocked.Exchange return a 0, and only this thread will  invoke the callback method. Any other threads that call Interlocked.Exchange will get a return  value of 1, effectively notifying these threads that the callback method has already been invoked and  therefore it should not be invoked again.</p>\n</blockquote>\n<h3 id=\"implementing-a-simple-spin-lock\"><a class=\"anchor\" href=\"#implementing-a-simple-spin-lock\">#</a> Implementing a Simple Spin Lock</h3>\n<blockquote>\n<p>The Interlocked methods are great, but they mostly operate on Int32 values. What if you need  to manipulate a bunch of fields in a class object atomically? In this case, we need a way to stop all  threads but one from entering the region of code that manipulates the fields. Using Interlocked methods, we can build a thread synchronization lock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SimpleSpinLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_ResourceInUse<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0=false (default), 1=true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Always set resource to in-use</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// When this thread changes it from not in-use, return</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_ResourceInUse<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Black magic goes here...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Set resource to not in-use</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> Volatile<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_ResourceInUse<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And here is a class that shows how to use the SimpleSpinLock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeResource</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">SimpleSpinLock</span> m_sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SimpleSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AccessResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> m_sl<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Only one thread at a time can get in here to access the resource...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> m_sl<span class=\"token punctuation\">.</span><span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The SimpleSpinLock implementation is very simple. If two threads call Enter at the same time,  Interlocked.Exchange ensures that one thread changes m_resourceInUse from 0 to 1 and sees  that m_resourceInUse was 0. This thread then returns from Enter so that it can continue executing  the code in the AccessResource method. The other thread will change m_resourceInUse from a  1 to a 1. This thread will see that it did not change m_resourceInUse from a 0, and this thread will  now start spinning continuously, calling Exchange until the first thread calls Leave.</p>\n</blockquote>\n<blockquote>\n<p>When the first thread is done manipulating the fields of the SomeResource object, it calls Leave,  which internally calls Volatile.Write and changes m_resourceInUse back to a 0. This causes  the spinning thread to then change m_resourceInUse from a 0 to a 1, and this thread now gets to  return from Enter so that it can access SomeResource object’s fields.</p>\n</blockquote>\n<blockquote>\n<p>There you have it. This is a simple implementation of a thread synchronization lock. The big potential problem with this lock is that it causes threads to spin when there is contention for the lock. This spinning wastes precious CPU time, preventing the CPU from doing other, more useful work. As a  result, spin locks should only ever be used to guard regions of code that execute very quickly.</p>\n</blockquote>\n<blockquote>\n<p>Spin locks should not typically be used on single-CPU machines, because the thread that holds the  lock can’t quickly release it if the thread that wants the lock is spinning. The situation becomes much  worse if the thread holding the lock is at a lower priority than the thread wanting to get the lock,  because now the thread holding the lock may not get a chance to run at all, resulting in a livelock situation. Windows sometimes boosts a thread’s priority dynamically for short periods of time. Therefore,  boosting should be disabled for threads that are using spin locks; see the PriorityBoostEnabled properties of System.Diagnostics.Process and System.Diagnostics.ProcessThread. There  are issues related to using spin locks on hyperthreaded machines, too. In an attempt to circumvent  these kinds of problems, many spin locks have some additional logic in them; I refer to the additional  logic as Black Magic. I’d rather not go into the details of Black Magic because it changes over time as  more people study locks and their performance. However, I will say this: The FCL ships with a structure,  System.Threading.SpinWait, which encapsulates the state-of-the-art thinking around this Black  Magic.</p>\n</blockquote>\n<p><strong>在线程处理中引入延迟</strong></p>\n<p>“黑科技” 旨在让希望获得资源的线程暂停执行，使当前拥有资源的线程能执行它的代码并让出资源。为此， <code>SpinWait</code>  结构内部调用  <code>Thread</code>  的静态  <code>Sleep</code> ， <code>Yield</code>  和  <code>SpinWait</code>  方法。在这里的补充内容中，我想简单解释一下这些方法。</p>\n<p>线程可告诉系统它在指定时间内不想被调度，这是调用  <code>Thread</code>  的静态  <code>Sleep</code>  方法来实现的：</p>\n<pre><code class=\"language-C#\">public static void Sleep(Int32 millisecondsTimeout);\npublic static void Sleep(TimeSpan timeout);\n</code></pre>\n<p>这个方法导致线程在指定时间内挂起。调用  <code>Sleep</code>  允许线程自愿放弃它的时间片的剩余部分。系统会使线程在大致指定的时间里不被调度。没有错 ———— 如果告诉系统你希望一个线程睡眠 100 毫秒，那么会睡眠大致那么长的时间，但也有可能会多睡眠几秒、甚至几分钟的时间。记住，Windows 不是实时操作系统。你的线程可能在正确的时间唤醒，但具体是否这样，要取决于系统中正在发生的别的事情。</p>\n<p>可以调用  <code>Sleep</code> ，并为  <code>millisecondsTimeout</code>  参数传递  <code>System.Threading.Timeout.Infinite</code>  中的值 (定义为  <code>-1</code> )。这告诉系统永远不调度线程，但这样做没什么意义。更好的做法是让线程退出，回收它的栈和内核对象。可以向  <code>Sleep</code>  传递  <code>0</code> ，告诉系统调用线程放弃了它当前时间片的剩余部分，强迫系统调度另一个线程。但系统可能重新调度刚才调用了  <code>Sleep</code>  的线程 (如果没有相同或更高优先级的其他可调度线程，就会发生这种情况)。</p>\n<p>线程可要求 Windows 在当前 CPU 上调度另一个线程，这是通过  <code>Thread</code>  的  <code>Yield</code>  方法来实现的：</p>\n<pre><code class=\"language-C#\">public static Boolean Yield();\n</code></pre>\n<p>如果 Windows 发现有另一个线程准备好在当前处理器上运行， <code>Yield</code>  就会返回  <code>true</code>  ，调用  <code>Yield</code>  的线程会提前结束它的时间片 &lt;sup&gt;①&lt;/sup&gt;，所选的线程得以运行一个时间片。然后，调用  <code>Yield</code>  的线程被再次调度，开始用一个全新的时间片运行。如果 Windows 发现没有其他线程准备在当前处理器上运行， <code>Yield</code>  就会返回  <code>false</code> ，调用  <code>Yield</code>  的线程继续运行它的时间片。</p>\n<p><code>Yield</code>  方法旨在使 “饥饿” 状态的、具有相等或更低优先级的线程有机会运行。如果一个线程希望获得当前另一个线程拥有的资源，就调用这个方法。如果运气好，Windows 会调度当前拥有资源的线程，而那个线程会让出资源。然后，当调用  <code>Yield</code>  的线程再次运行时就会拿到资源。</p>\n<p>调用  <code>Yield</code>  的效果介于调用  <code>Thread.Sleep(0)</code>  和  <code>Thread.Sleep(1)</code>  之间。 <code>Thread.Sleep(0)</code>  不允许较低优先级的线程运行，而 <code>Thread.Sleep(1)</code>  总是强迫进行上下文切换，而由于内部系统计时器的解析度的问题， Windows 总是强迫线程睡眠超过 1 毫秒的时间。</p>\n<p>事实上，超线程 CPU 一次只允许一个线程运行。所以，在这些 CPU 上执行 “自旋” 循环时，需要强迫当前线程暂停，使 CPU 有机会切换到另一个线程并允许它运行。线程可调用  <code>Thread</code>  的  <code>SpinWait</code>  方法强迫它自身暂停，允许超线程 CPU 切换到另一线程：</p>\n<pre><code class=\"language-C#\">public static void SpinWait(Int32 iterations);\n</code></pre>\n<p>调用这个方法实际会执行一个特殊的 CPU 指令；它不告诉 Windows 做任何事情 (因为 Windows 已经认为它在 CPU 上调度了两个线程)。在非超线程 CPU 上，这个特殊 CPU 指令会被忽略。</p>\n<p>要更多地了解这些方法，请参见它们的 Win32 等价函数： <code>Sleep</code> ， <code>SwitchToThread</code>  和  <code>YieldProcessor</code> 。另外，要想进一步了解如何调整系统计时器的解析度，请参考 Win32  <code>timeBeginPeriod</code>  和  <code>timeEndPeriod</code>  函数。</p>\n<blockquote>\n<p>The FCL also includes a System.Threading.SpinLock structure that is similar to my SimpleSpinLock class shown earlier, except that it uses the SpinWait structure to improve performance.  The SpinLock structure also offers timeout support. By the way, it is interesting to note that my  SimpleSpinLock and the FCL’s SpinLock are both value types. This means that they are lightweight,  memory-friendly objects. A SpinLock is a good choice if you need to associate a lock with each item  in a collection, for example. However, you must make sure that you do not pass SpinLock instances around, because they are copied and you will lose any and all synchronization. And although you can  define instance SpinLock fields, do not mark the field as readonly, because its internal state must  change as the lock is manipulated.</p>\n</blockquote>\n<h3 id=\"the-interlocked-anything-pattern\"><a class=\"anchor\" href=\"#the-interlocked-anything-pattern\">#</a> The Interlocked Anything Pattern</h3>\n<blockquote>\n<p>Many people look at the Interlocked methods and wonder why Microsoft doesn't create a richer  set of interlocked methods that can be used in a wider range of scenarios. For example, it would be  nice if the Interlocked class offered Multiply, Divide, Minimum, Maximum, And, Or, Xor, and a  bunch of other methods. Although the Interlocked class doesn’t offer these methods, there is a  well-known pattern that allows you to perform any operation on an Int32 in an atomic way by using  Interlocked.CompareExchange. In fact, because Interlocked.CompareExchange has additional  overloads that operate on Int64, Single, Double, Object, and a generic reference type, this pattern will actually work for all these types, too.</p>\n</blockquote>\n<blockquote>\n<p>This pattern is similar to optimistic concurrency patterns used for modifying database records.  Here is an example of the pattern that is being used to create an atomic Maximum method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Maximum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Int32</span> currentVal <span class=\"token operator\">=</span> target<span class=\"token punctuation\">,</span> startVal<span class=\"token punctuation\">,</span> desiredVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Don't access target in the loop except in an attempt </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// to change it because another thread may be touching it </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Record this iteration's starting value</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> startVal <span class=\"token operator\">=</span> currentVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Calculate the desired value in terms of startVal and value</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> desiredVal <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>startVal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// NOTE: the thread could be preempted here!</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// if (target == startVal) target = desiredVal</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Value prior to potential change is returned</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> currentVal <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> target<span class=\"token punctuation\">,</span> desiredVal<span class=\"token punctuation\">,</span> startVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// If the starting value changed during this iteration, repeat </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>startVal <span class=\"token operator\">!=</span> currentVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// Return the maximum value when this thread tried to set it</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> desiredVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Now let me explain exactly what is going on here. Upon entering the method, currentVal is  initialized to the value in target at the moment the method starts executing. Then, inside the loop,  startVal is initialized to this same value. Using startVal, you can perform any operation you want.  This operation can be extremely complex, consisting of thousands of lines of code. But, ultimately,  you must end up with a result that is placed into desiredVal. In my example, I simply determine  whether startVal or value contains the larger value.</p>\n</blockquote>\n<blockquote>\n<p>Now, while this operation is running, another thread could change the value in target. It is unlikely that this will happen, but it is possible. If this does happen, then the value in desiredVal is based  off an old value in startVal, not the current value in target, and therefore, we should not change  the value in target. To ensure that the value in target is changed to desiredVal if no thread has  changed target behind our thread’s back, we use Interlocked.CompareExchange. This method  checks whether the value in target matches the value in startVal (which identifies the value that  we thought was in target before starting to perform the operation). If the value in target didn’t  change, then CompareExchange changes it to the new value in desiredVal. If the value in target did change, then CompareExchange does not alter the value in target at all.</p>\n</blockquote>\n<blockquote>\n<p>CompareExchange returns the value that is in target at the time when CompareExchange is  called, which I then place in currentVal. Then, a check is made comparing startVal with the new  value in currentVal. If these values are the same, then a thread did not change target behind our  thread’s back, target now contains the value in desiredVal, the while loop does not loop around,  and the method returns. If startVal is not equal to currentVal, then a thread did change the  value in target behind our thread’s back, target did not get changed to our value in desiredVal,  and the while loop will loop around and try the operation again, this time using the new value in  currentVal that reflects the other thread’s change.</p>\n</blockquote>\n<blockquote>\n<p>Personally, I have used this pattern in a lot of my own code and, in fact, I made a generic method,  Morph, which encapsulates this pattern.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token generic-method\"><span class=\"token function\">Morpher</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">,</span> TArgument<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> startValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TArgument</span> argument<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">out</span> <span class=\"token class-name\">TResult</span> morphResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TResult</span> <span class=\"token generic-method\"><span class=\"token function\">Morph</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">,</span> TArgument<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Int32</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TArgument</span> argument<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">Morpher<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">,</span> TArgument<span class=\"token punctuation\">></span></span> morpher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\">TResult</span> morphResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">Int32</span> currentVal <span class=\"token operator\">=</span> target<span class=\"token punctuation\">,</span> startVal<span class=\"token punctuation\">,</span> desiredVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> startVal <span class=\"token operator\">=</span> currentVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> desiredVal <span class=\"token operator\">=</span> <span class=\"token function\">morpher</span><span class=\"token punctuation\">(</span>startVal<span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> morphResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> currentVal <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> target<span class=\"token punctuation\">,</span> desiredVal<span class=\"token punctuation\">,</span> startVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>startVal <span class=\"token operator\">!=</span> currentVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">return</span> morphResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：CLR 保证对以下数据类型的变量的读写是原子性的： <code>Boolean</code> ， <code>Char</code> ， <code>(S)Byte</code> ， <code>(U)Int16</code> ， <code>(U)Int32</code> ， <code>(U)IntPtr</code> ， <code>Single</code>  以及引用类型。这意味着变量中的所有字节都一次性读取或写入。虽然对变量的原子访问可保证读取或写入操作一次性完成，但由于编译器和 CPU 的优化，不保证操作 <strong>什么时候</strong> 发生。基元用户模式构造用于规划好这些原子性读取 / 写入 操作的时间。此外，这些构造还可强制对  <code>(U)Int64</code>  和  <code>Double</code>  类型的变量进行原子性的、规划好了时间的访问。有两种基元用户模式线程同步构造：<strong>易变构造 (volatile construct)</strong>  在特定的时间，它在包含一个简单数据类型的变量上执行原子性的读或写操作；<strong>互锁构造 (interlocked construct)</strong>  在特定的时间，它在包含一个简单数据类型的变量上执行原子性的读和写操作。C# 编译器将你的 C# 构造转换成中间语言 (IL)。然后，JIT 将 IL 转换成本机 CPU 指令，然后由 CPU 亲自处理这些指令。此外，C# 编译器、JIT 编译器、甚至 CPU 本身都可能优化你的代码。C# 编译器、JIT 编译器和 CPU 对代码进行优化时，它们保证我们的意图会得到保留。也就是说，从单线程的角度看，方法会做我们希望它做的事情，虽然做的方式可能有别于我们在源代码中描述的方式。但从多线程的角度看，我们的意图并不一定能得到保留。x86 JIT 编译器比 x64 编译器更成熟，所以它在执行优化的时候更大胆。其他 JIT 编译器不执行这个特定的优化，所以程序会像预期的那样正常运行到结束。这使我们注意另一个有趣的地方；程序是否如预想的那样工作要取决于大量因素，比如使用的是编译器的什么版本和什么开关，使用的是哪个 JIT 编译器，以及代码在什么 CPU 上运行等。除此之外，要看到上面这个程序进入死循环，一定不能在调试器中运行它，因为调试器会造成 JIT 编译器生成未优化的代码 (目的是方便你进行单步调试)。静态  <code>System.Threading.Volatile</code>  类提供了两个静态方法，这些方法比较特殊。它们事实上会禁止 C# 编译器、JIT 编译器和 CPU 平常执行的一些优化。 <code>Volatile.Write</code>  方法强迫  <code>location</code>  中的值在调用时写入。此外，按照编码顺序，之前的加载和存储操作必须在调用  <code>Volatile.Write</code>  <em>之前</em>发生。 <code>Volatile.Write</code>  方法强迫  <code>location</code>  中的值在调用时读取。此外，按照编码顺序，之后的加载和存储操作必须在调用  <code>Volatile.Read</code>  <em>之后</em>发生。为了简化编程，C# 编译器提供了  <code>volatile</code>  关键字，它可应用于以下任何类型的静态或实例字段： <code>Boolean</code> ， <code>(S)Byte</code> ， <code>(U)Int16</code> ， <code>(U)Int32</code> , <code>(U)IntPtr</code> ， <code>Single</code>  和  <code>Char</code> ，还可将  <code>volatile</code>  关键字应用于引用类型的字段，以及基础类型为  <code>(S)Byte</code> ， <code>(U)Int16</code>  或 <code>(U)Int32</code>  的任何枚举字段。JIT 编译器确保对易变字段的所有访问都是以易变读取或写入的方式执行，不必显示调用  <code>Volatile</code>  的静态  <code>Read</code>  或  <code>Write</code>  方法。另外， <code>volatile</code>  关键字告诉 C# 和 JIT 编译器不将字段缓存到 CPU 的寄存器中，确保字段的所有读写操作都在 RAM 中进行。 <code>Interlocked</code>  类中的每个方法都执行一次原子读写以及写入操作。此外， <code>Interlocked</code>  的所有方法都建立了完整的内存栅栏 (memory fence)。换言之，调用某个  <code>Interlocked</code>  方法之前的任何变量写入都在这个  <code>Interlocked</code>  方法调用之前执行；而这个调用之后的任何变量读取的都在这个调用之后读取。 <code>Interlocked</code>  的方法很好用，但主要用于操作  <code>Int32</code>  值。可以使用  <code>Interlocked</code>  的方法构造一个线程同步块来实现一个简单的自旋锁。这种锁最大的问题在于，在存在对锁的竞争的前提下，会造成线程 “自旋”。这个 “自旋” 会浪费宝贵的 CPU 时间，阻止 CPU 做其他更有用的工作。因此，自旋锁只应该用于保护那些会执行得非常快的代码区域。自旋锁一般不要在单 CPU 机器上使用，因为在这种机器上，一方面是希望获得锁的线程自旋，一方面是占有锁的线程不能快速释放锁。如果占有锁的线程的优先级低于想要获取锁的线程 (自旋线程)，局面还会变得糟糕，因为占有所得线程可能根本没有机会运行 。这会造成 “活锁” 情形。Windows 有时会短时间地动态提升一个线程的优先级。因此，对于正在使用自旋锁的线程，应该禁止像这样的优先级提升。超线程机器同样存在自旋锁的问题。为了解决这些问题，许多自旋锁内部都有一些额外的逻辑；我将这些额外的逻辑称为 “黑科技”(Black Magic)。这里不打算过多讲解其中的细节，因为随着越来越多的人开始研究锁及其性能，这些逻辑也可能发生变化。FCL 提供了一个名为  <code>System.Threading.SpinWait</code>  的结构，它封装了人们关于这种 “黑科技” 的最新研究成果。FCL 还包含了一个  <code>System.Threading.SpinLock</code>  结构，它和前面展示的  <code>SimpleSpinLock</code>  类相似，只是使用了  <code>SpinWait</code>  结构来增强性能。 <code>SpinLink</code>  结构还提供了超时支持。很有器的一点是，我的  <code>SimpleSpinLock</code>  和 FCL 的  <code>SpinLink</code>  都是值类型。这意味着它们是轻量级的、内存友好的对象。但一定不要到底传递  <code>SpinLock</code>  实例，否则它们会被复制，而你会失去所有同步。虽然可以定义实例  <code>SpinLock</code>  字段，但不要将字段标记为  <code>readonly</code> ，因为在操作锁的时候，它的内部状态必须改变。</p>\n<h2 id=\"kernel-mode-constructs\"><a class=\"anchor\" href=\"#kernel-mode-constructs\">#</a> Kernel-Mode Constructs</h2>\n<blockquote>\n<p>Windows offers several kernel-mode constructs for synchronizing threads. The kernel-mode constructs are much slower than the user-mode constructs. This is because they require coordination  from the Windows operating system itself. Also, each method call on a kernel object causes the  calling thread to transition from managed code to native user-mode code to native kernel-mode  code and then return all the way back. These transitions require a lot of CPU time and, if performed  frequently, can adversely affect the overall performance of your application.</p>\n</blockquote>\n<blockquote>\n<p>However, the kernel-mode constructs offer some benefits over the primitive user-mode constructs,  such as:</p>\n<ul>\n<li>\n<p>When a kernel-mode construct detects contention on a resource, Windows blocks the losing  thread so that it is not spinning on a CPU, wasting processor resources.</p>\n</li>\n<li>\n<p>Kernel-mode constructs can synchronize native and managed threads with each other.</p>\n</li>\n<li>\n<p>Kernel-mode constructs can synchronize threads running in different processes on the same  machine.</p>\n</li>\n<li>\n<p>Kernel-mode constructs can have security applied to them to prevent unauthorized accounts  from accessing them.</p>\n</li>\n<li>\n<p>A thread can block until all kernel-mode constructs in a set are available or until any one  kernel-mode construct in a set has become available.</p>\n</li>\n<li>\n<p>A thread can block on a kernel-mode construct specifying a timeout value; if the thread can’t  have access to the resource it wants in the specified amount of time, then the thread is unblocked and can perform other tasks.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>The two primitive kernel-mode thread synchronization constructs are events and semaphores.  Other kernel-mode constructs, such as mutex, are built on top of the two primitive constructs. For  more information about the Windows kernel-mode constructs, see the book, Windows via C/C++,  Fifth Edition (Microsoft Press, 2007) by myself and Christophe Nasarre.</p>\n</blockquote>\n<blockquote>\n<p>The System.Threading namespace offers an abstract base class called WaitHandle. The WaitHandle class is a simple class whose sole purpose is to wrap a Windows kernel object handle. The FCL  provides several classes derived from WaitHandle. All classes are defined in the System.Threading namespace. The class hierarchy looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WaitHandle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \tEventWaitHandle</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t\tAutoResetEvent</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t\tManualResetEvent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \tSemaphore</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \tMutex</pre></td></tr></table></figure><blockquote>\n<p>Internally, the WaitHandle base class has a SafeWaitHandle field that holds a Win32 kernel  object handle. This field is initialized when a concrete WaitHandle-derived class is constructed. In  addition, the WaitHandle class publicly exposes methods that are inherited by all the derived classes.  Every method called on a kernel-mode construct represents a full memory fence. WaitHandle’s  interesting public methods are shown in the following code (some overloads for some methods are  not shown).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaitHandle</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MarshalByRefObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// WaitOne internally calls the Win32 WaitForSingleObjectEx function. </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeSpan</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// WaitAll internally calls the Win32 WaitForMultipleObjectsEx function </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// WaitAny internally calls the Win32 WaitForMultipleObjectsEx function </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">WaitAny</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">WaitAny</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> millisecondsTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">public</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">WaitAny</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waitHandles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Int32</span> WaitTimeout <span class=\"token operator\">=</span> <span class=\"token number\">258</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returned from WaitAny if a timeout occurs</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// Dispose internally calls the Win32 CloseHandle function – DON’T CALL THIS.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>There are a few things to note about these methods:</p>\n<ul>\n<li>\n<p>You call WaitHandle’s WaitOne method to have the calling thread wait for the underlying  kernel object to become signaled. Internally, this method calls the Win32 WaitForSingleObjectEx function. The returned Boolean is true if the object became signaled or false if a timeout occurs.</p>\n</li>\n<li>\n<p>You call WaitHandle’s static WaitAll method to have the calling thread wait for all the kernel  objects specified in the WaitHandle[] to become signaled. The returned Boolean is true if  all of the objects became signaled or false if a timeout occurs. Internally, this method calls  the Win32 WaitForMultipleObjectsEx function, passing TRUE for the bWaitAll parameter.</p>\n</li>\n<li>\n<p>You call WaitHandle’s static WaitAny method to have the calling thread wait for any one of  the kernel objects specified in the WaitHandle[] to become signaled. The returned Int32 is the index of the array element corresponding to the kernel object that became signaled, or  WaitHandle.WaitTimeout if no object became signaled while waiting. Internally, this method  calls the Win32 WaitForMultipleObjectsEx function, passing FALSE for the bWaitAll parameter.</p>\n</li>\n<li>\n<p>The array that you pass to the WaitAny and WaitAll methods must contain no more than 64  elements or else the methods throw a System.NotSupportedException.</p>\n</li>\n<li>\n<p>You call WaitHandle’s Dispose method to close the underlying kernel object handle. Internally, these methods call the Win32 CloseHandle function. You can only call Dispose explicitly in your code if you know for a fact that no other threads are using the kernel object. This  puts a lot of burden on you as you write your code and test it. So, I would strongly discourage  you from calling Dispose; instead, just let the garbage collector (GC) do the cleanup. The GC  knows when no threads are using the object anymore, and then it will get rid of it. In a way,  the GC is doing thread synchronization for you automatically!</p>\n</li>\n</ul>\n</blockquote>\n<p>💡注意：在某些情况下，当一个 COM 单线程套间线程阻塞时，线程可能在内部醒来以 pump 消息。例如，阻塞的线程会醒来处理发自另一个线程的 Windows 消息。这个设计是为了支持 COM 互操作性。对于大多数应用程序，这都不是一个问题 ———— 事实上，反而是一件好事。然而，如果你的代码在处理消息期间获得另一个线程同步锁，就可能发生死锁。如第 30 章所述，所有混合锁都在内部调用这些方法。所以，使用混合锁存在相同的利与弊。</p>\n<blockquote>\n<p>The versions of the WaitOne and WaitAll that do not accept a timeout parameter should be prototyped as having a void return type, not Boolean. The reason is because these methods will return  only true because the implied timeout is infinite (System.Threading.Timeout.Infinite). When  you call any of these methods, you do not need to check their return value.</p>\n</blockquote>\n<blockquote>\n<p>As already mentioned, the AutoResetEvent, ManualResetEvent, Semaphore, and Mutex classes  are all derived from WaitHandle, so they inherit WaitHandle’s methods and their behavior. However, these classes introduce additional methods of their own, and I’ll address those now.</p>\n</blockquote>\n<blockquote>\n<p>First, the constructors for all of these classes internally call the Win32 CreateEvent (passing  FALSE for the bManualReset parameter) or CreateEvent (passing TRUE for the bManualReset parameter), CreateSemaphore, or CreateMutex functions. The handle value returned from all of these  calls is saved in a private SafeWaitHandle field defined inside the WaitHandle base class.</p>\n</blockquote>\n<blockquote>\n<p>Second, the EventWaitHandle, Semaphore, and Mutex classes all offer static OpenExisting methods, which internally call the Win32 OpenEvent, OpenSemaphore, or OpenMutex functions,  passing a String argument that identifies an existing named kernel object. The handle value returned from all of these functions is saved in a newly constructed object that is returned from the  OpenExisting method. If no kernel object exists with the specified name, a WaitHandleCannotBeOpenedException is thrown.</p>\n</blockquote>\n<blockquote>\n<p>A common usage of the kernel-mode constructs is to create the kind of application that allows  only one instance of itself to execute at any given time. Examples of single-instance applications are  Microsoft Outlook, Windows Live Messenger, Windows Media Player, and Windows Media Center.  Here is how to implement a single-instance application.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\">Boolean</span> createdNew<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Try to create a kernel object with the specified name</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SomeUniqueStringIdentifyingMyApp\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> createdNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>createdNew<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// This thread created the kernel object so no other instance of this</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// application must be running. Run the rest of the application here...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// This thread opened an existing kernel object with the same string name;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// another instance of this application must be running now.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// There is nothing to do in here, let's just return from Main to terminate</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// this second instance of the application.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, I am using a Semaphore, but it would work just as well if I had used an EventWaitHandle or a Mutex because I’m not actually using the thread synchronization behavior that the  object offers. However, I am taking advantage of some thread synchronization behavior that the  kernel offers when creating any kind of kernel object. Let me explain how the preceding code works.  Let’s say that two instances of this process are started at exactly the same time. Each process will  have its own thread, and both threads will attempt to create a Semaphore with the same string name  (“SomeUniqueStringIdentifyingMyApp,” in my example). The Windows kernel ensures that only  one thread actually creates a kernel object with the specified name; the thread that created the object  will have its createdNew variable set to true.</p>\n</blockquote>\n<blockquote>\n<p>For the second thread, Windows will see that a kernel object with the specified name already exists; the second thread does not get to create another kernel object with the same name, although if  this thread continues to run, it can access the same kernel object as the first process’s thread. This is  how threads in different processes can communicate with each other via a single kernel object. However, in this example, the second process’s thread sees that its createdNew variable is set to false.  This thread now knows that another instance of this process is running, and the second instance of  the process exits immediately.</p>\n</blockquote>\n<h3 id=\"event-constructs\"><a class=\"anchor\" href=\"#event-constructs\">#</a> Event Constructs</h3>\n<blockquote>\n<p>Events are simply Boolean variables maintained by the kernel. A thread waiting on an event blocks  when the event is false and unblocks when the event is true. There are two kinds of events. When  an auto-reset event is true, it wakes up just one blocked thread, because the kernel automatically  resets the event back to false after unblocking the first thread. When a manual-reset event is true,  it unblocks all threads waiting for it because the kernel does not automatically reset the event back  to false; your code must manually reset the event back to false. The classes related to events look  like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventWaitHandle</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">WaitHandle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sets Boolean to true; always returns true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sets Boolean to false; always returns true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoResetEvent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EventWaitHandle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">AutoResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManualResetEvent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EventWaitHandle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ManualResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Using an auto-reset event, we can easily create a thread synchronization lock whose behavior is  similar to the SimpleSpinLock class I showed earlier.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleWaitLock</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">AutoResetEvent</span> m_available<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">SimpleWaitLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> m_available <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AutoResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initially free</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Block in kernel until resource available</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Let another thread access the resource</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>You would use this SimpleWaitLock exactly the same way that you’d use the SimpleSpinLock.  In fact, the external behavior is exactly the same; however, the performance of the two locks is radically different. When there is no contention on the lock, the SimpleWaitLock is much slower than  the SimpleSpinLock, because every call to SimpleWaitLock’s Enter and Leave methods forces  the calling thread to transition from managed code to the kernel and back—which is bad. But when  there is contention, the losing thread is blocked by the kernel and is not spinning and wasting CPU cycles—which is good. Note also that constructing the AutoResetEvent object and calling Dispose on it also causes managed to kernel transitions, affecting performance negatively. These calls usually  happen rarely, so they are not something to be too concerned about.</p>\n</blockquote>\n<blockquote>\n<p>To give you a better feel for the performance differences, I wrote the following code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Int32</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 million</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// How long does it take to increment x 10 million times?</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\">Stopwatch</span> sw <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incrementing x: &#123;0:N0&#125;\"</span><span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>ElapsedMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// How long does it take to increment x 10 million times </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// adding the overhead of calling a method that does nothing?</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> sw<span class=\"token punctuation\">.</span><span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incrementing x in M: &#123;0:N0&#125;\"</span><span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>ElapsedMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// How long does it take to increment x 10 million times </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// adding the overhead of calling an uncontended SimpleSpinLock?</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token class-name\">SpinLock</span> sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SpinLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> sw<span class=\"token punctuation\">.</span><span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token class-name\">Boolean</span> taken <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> taken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incrementing x in SpinLock: &#123;0:N0&#125;\"</span><span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>ElapsedMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token comment\">// How long does it take to increment x 10 million times </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token comment\">// adding the overhead of calling an uncontended SimpleWaitLock?</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleWaitLock</span> swl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SimpleWaitLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> sw<span class=\"token punctuation\">.</span><span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> swl<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> swl<span class=\"token punctuation\">.</span><span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incrementing x in SimpleWaitLock: &#123;0:N0&#125;\"</span><span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>ElapsedMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MethodImpl</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>MethodImplOptions<span class=\"token punctuation\">.</span>NoInlining<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* This method does nothing but return */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>When I run the <span class=\"token class-name\">preceding</span> code<span class=\"token punctuation\">,</span> I <span class=\"token keyword\">get</span> the following <span class=\"token class-name\">output<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Incrementing</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> Fastest</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> M<span class=\"token punctuation\">:</span> <span class=\"token number\">69</span> <span class=\"token operator\">~</span>9x slower</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> SpinLock<span class=\"token punctuation\">:</span> <span class=\"token number\">164</span> <span class=\"token operator\">~</span>21x slower</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token class-name\">Incrementing</span> x <span class=\"token keyword\">in</span> SimpleWaitLock<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">854</span> <span class=\"token operator\">~</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>107x slower</pre></td></tr></table></figure><blockquote>\n<p>As you can clearly see, just incrementing x took only 8 milliseconds. To call empty methods before  and after incrementing x made the operation take nine times longer! Then, executing code in a  method that uses a user-mode construct caused the code to run 21 (164 / 8) times slower. But now,  see how much slower the program ran using a kernel-mode construct: 1,107 (8,854 / 8) times slower!  So, if you can avoid thread synchronization, you should. If you need thread synchronization, then try  to use the user-mode constructs. Always try to avoid the kernel-mode constructs.</p>\n</blockquote>\n<h3 id=\"semaphore-constructs\"><a class=\"anchor\" href=\"#semaphore-constructs\">#</a> Semaphore Constructs</h3>\n<blockquote>\n<p>Semaphores are simply Int32 variables maintained by the kernel. A thread waiting on a semaphore  blocks when the semaphore is 0 and unblocks when the semaphore is greater than 0. When a thread  waiting on a semaphore unblocks, the kernel automatically subtracts 1 from the semaphore’s count.  Semaphores also have a maximum Int32 value associated with them, and the current count is never  allowed to go over the maximum count. Here is what the Semaphore class looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Semaphore</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">WaitHandle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> initialCount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> maximumCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calls Release(1); returns previous count</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> releaseCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns previous count</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>So now let me summarize how these three kernel-mode primitives behave:</p>\n<ul>\n<li>\n<p>When multiple threads are waiting on an auto-reset event, setting the event causes only one thread to become unblocked.</p>\n</li>\n<li>\n<p>When multiple threads are waiting on a manual-reset event, setting the event causes all threads to become unblocked.</p>\n</li>\n<li>\n<p>When multiple threads are waiting on a semaphore, releasing the semaphore causes  releaseCount threads to become unblocked (where releaseCount is the argument  passed to Semaphore’s Release method).</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Therefore, an auto-reset event behaves very similarly to a semaphore whose maximum count  is 1. The difference between the two is that Set can be called multiple times consecutively on an  auto-reset event, and still only one thread will be unblocked, whereas calling Release multiple times  consecutively on a semaphore keeps incrementing its internal count, which could unblock many  threads. By the way, if you call Release on a semaphore too many times, causing its count to exceed  its maximum count, then Release will throw a SemaphoreFullException.</p>\n</blockquote>\n<blockquote>\n<p>Using a semaphore, we can re-implement the SimpleWaitLock as follows, so that it gives multiple  threads concurrent access to a resource (which is not necessarily a safe thing to do unless all threads  access the resource in a read-only fashion).</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleWaitLock</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Semaphore</span> m_available<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">SimpleWaitLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> maxConcurrent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> m_available <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Semaphore</span><span class=\"token punctuation\">(</span>maxConcurrent<span class=\"token punctuation\">,</span> maxConcurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Block in kernel until resource available</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Let another thread access the resource</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_available<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"mutex-constructs\"><a class=\"anchor\" href=\"#mutex-constructs\">#</a> Mutex Constructs</h3>\n<blockquote>\n<p>A Mutex represents a mutual-exclusive lock. It works similar to an AutoResetEvent or a Semaphore with a count of 1 because all three constructs release only one waiting thread at a time. The following  shows what the Mutex class looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mutex</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">WaitHandle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Mutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReleaseMutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Mutexes have some additional logic in them, which makes them more complex than the other  constructs. First, Mutex objects record which thread obtained it by querying the calling thread’s  Int32 ID. When a thread calls ReleaseMutex, the Mutex makes sure that the calling thread is the  same thread that obtained the Mutex. If the calling thread is not the thread that obtained the Mutex,  then the Mutex object’s state is unaltered and ReleaseMutex throws a System.ApplicationException. Also, if a thread owning a Mutex terminates for any reason, then some thread waiting  on the Mutex will be awakened by having a System.Threading.AbandonedMutexException thrown. Usually, this exception will go unhandled, terminating the whole process. This is good because a thread acquired the Mutex and it is likely that the thread terminated before it finished updating the data that the Mutex was protecting. If a thread catches AbandonedMutexException, then it  could attempt to access the corrupt data, leading to unpredictable results and security problems.</p>\n</blockquote>\n<blockquote>\n<p>Second, Mutex objects maintain a recursion count indicating how many times the owning thread  owns the Mutex. If a thread currently owns a Mutex and then that thread waits on the Mutex again,  the recursion count is incremented and the thread is allowed to continue running. When that thread  calls ReleaseMutex, the recursion count is decremented. Only when the recursion count becomes 0 can another thread become the owner of the Mutex.</p>\n</blockquote>\n<blockquote>\n<p>Most people do not like this additional logic. The problem is that these “features” have a cost  associated with them. The Mutex object needs more memory to hold the additional thread ID and  recursion count information. And, more importantly, the Mutex code has to maintain this information,  which makes the lock slower. If an application needs or wants these additional features, then the application code could have done this itself; the code doesn’t have to be built into the Mutex object. For  this reason, a lot of people avoid using Mutex objects.</p>\n</blockquote>\n<blockquote>\n<p>Usually a recursive lock is needed when a method takes a lock and then calls another method that  also requires the lock, as the following code demonstrates.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Mutex</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Mutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Do whatever...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">Method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Method2 recursively acquires the lock</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseMutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Do whatever...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseMutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In the preceding code, code that uses a SomeClass object could call Method1, which acquires  the Mutex, performs some thread-safe operation, and then calls Method2, which also performs some  thread-safe operation. Because Mutex objects support recursion, the thread will acquire the lock  twice and then release it twice before another thread can own the Mutex. If SomeClass has used an  AutoResetEvent instead of a Mutex, then the thread would block when it called Method2’s WaitOne method.</p>\n</blockquote>\n<blockquote>\n<p>If you need a recursive lock, then you could create one easily by using an AutoResetEvent.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecursiveAutoResetEvent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">AutoResetEvent</span> m_lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AutoResetEvent</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_owningThreadId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Int32</span> m_recursionCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Obtain the calling thread's unique Int32 ID</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token class-name\">Int32</span> currentThreadId <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// If the calling thread owns the lock, increment the recursion count</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_owningThreadId <span class=\"token operator\">==</span> currentThreadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> m_recursionCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// The calling thread doesn't own the lock, wait for it</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">WaitOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// The calling now owns the lock, initialize the owning thread ID &amp; recursion count</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> m_owningThreadId <span class=\"token operator\">=</span> currentThreadId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> m_recursionCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// If the calling thread doesn't own the lock, we have an error</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_owningThreadId <span class=\"token operator\">!=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">// Subtract 1 from the recursion count</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>m_recursionCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token comment\">// If the recursion count is 0, then no thread owns the lock</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> m_owningThreadId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wake up 1 waiting thread (if any)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Although the behavior of the RecursiveAutoResetEvent class is identical to that of the Mutex class, a RecursiveAutoResetEvent object will have far superior performance when a thread tries  to acquire the lock recursively, because all the code that is required to track thread ownership and  recursion is now in managed code. A thread has to transition into the Windows kernel only when first  acquiring the AutoResetEvent or when finally relinquishing it to another thread.</p>\n</blockquote>\n<p>💡小结：Windows 提供了几个内核模式的构造来同步线程。内核模式的构造比用户模式的构造慢得多，一个原因是它们要求 Windows 操作系统自身的配合，另一个原因是在内核对象上调用的每个方法都造成调用线程从托管代码转换为本机 (native) 用户模式代码，再转换为本机 (native) 内核模式代码。然后，还要朝相反的方向一路返回。这些转换需要大量 CPU 时间；经常执行会对应用程序的总体性能造成负面影响。但内核模式的构造具备基元用户模式构造所不具备的优点。1. 内核模式的构造检测到在一个资源上的竞争时，Windows 会阻塞输掉的线程，使它不占用一个 CPU “自旋”(spinning)，无谓地浪费处理器资源。2. 内核模式的构造可实现本机 (native) 和托管 (managed) 线程相互之间的同步。3. 内核模式的构造可同步在同一台机器的不同进程中运行的线程。4. 内核模式对的构造可应用安全性设置，防止未经授权的账户访问它们。5. 线程可一直阻塞，直到集合中的所有内核模式构造都可用，或直到集合中的任何内核模式构造可用。6. 在内核模式的构造上阻塞的线程可指定超时值；指定时间内访问不到希望的资源，线程就可以解除阻塞并执行其他任务。事件和信号量是两种基元内核模式线程同步构造。至于其他内核模式构造，比如互斥体，则是在这两个基计构造上构建的。 <code>System.Threading</code>  命名空间提供了一个名为  <code>WaitHandle</code>  抽象基类。 <code>WaitHandle</code>  类是一个很简单的类，它唯一的作用就是包装一个 Windows 内核对象句柄。FCL 提供了几个从  <code>WaitHandle</code>  派生的类。所有类都在  <code>System.Threading</code>  命名空间中定义。 <code>WaitHandle</code>  基类内部有一个  <code>SafeWaitHandle</code>  字段，它容纳了一个 Win32 内核对象句柄。这个字段是在构造一个具体的  <code>WaitHandle</code>  派生类时初始化的。除此之外， <code>WaitHandle</code>  类公开了由所有派生类继承的方法。在一个内核模式的构造上调用的每个方法都代表一个完整的内存栅栏。这些方法有几点需要注意：1. 可以调用  <code>WaitHandle</code>  的  <code>WaitOne</code>  方法让调用线程等待底层内核对象收到信号。这个方法在内部调用 Win32  <code>WaitForSingleObjectEx</code>  函数。如果对象收到信号，返回的  <code>Boolean</code>  是  <code>true</code> ；超时就返回  <code>false</code> 。2. 可以调用  <code>WaitHandle</code>  的静态  <code>WaitAll</code>  方法，让调用线程等待  <code>WaitHandle[]</code>  中指定的所有内核对象都收到信号。如果所有对象都收到信号，返回的  <code>Boolean</code>  是  <code>true</code> ；超时则返回  <code>false</code> 。这个方法在内部调用 Win32  <code>WaitForMultipleObjectsEx</code>  函数，为 <code>bWaitAll</code>  参数传递 <code>TRUE</code> 。3. 可以调用  <code>WaitHandle</code>  的静态  <code>WaitAny</code>  方法让调用线程等待  <code>WaitHandle[]</code>  中指定的任何内核对象收到信号。返回的  <code>Int32</code>  是与收到信号的内核对象对应的数组元素索引；如果在等待期间没有对象收到信号，则返回  <code>WaitHandle.WaitTimeout</code> 。这个方法在内部调用 Win32  <code>WaitForMultipleObjectsEx</code>  函数，为  <code>bWaitALl</code>  参数传递  <code>FALSE</code> 。4. 再传给  <code>WaitAny</code>  和  <code>WaitAll</code>  方法的数组中，包含的元素数不能超过 64 个，否则方法会抛出一个  <code>System.NotSupportedException</code> 。5. 可以调用  <code>WaitHandle</code>  的  <code>Dispose</code>  方法来关闭底层内核对象句柄。这个方法在内部调用 Win32  <code>CloseHandle</code>  函数。只有确定没有别的线程要使用内核对象才能显式调用  <code>Dispose</code> 。 你需要写代码并进行测试，这是一个巨大的负担。所以我强烈反对显式调用  <code>Dispose</code> ；相反，让垃圾回收器 (GC) 去完成清理工作。GC 知道什么时候没有线程使用对象，会自动进行清理。不接受超时参数的那些版本的  <code>WaitOne</code>  和  <code>WaitAll</code>  方法应返回  <code>void</code>  而不是  <code>Boolean</code> 。原因是隐含的超时时间是无限长 ( <code>System.Threading.Timeout.Infinite</code> )，所以它们只会返回  <code>true</code> 。 <code>AutoResetEvent</code> ， <code>ManualResetEvent</code> ， <code>Semaphore</code>  和  <code>Mutex</code>  类都派生自  <code>WaitHandle</code> ，因此它们继承了  <code>WaitHandle</code>  的方法和行为。首先，所有这些类的构造器都在内部调用 Win32  <code>CreateEvent</code>  (为  <code>BManualReset</code>  参数传递  <code>FALSE</code>  或  <code>TRUE</code> )、 <code>CreateSemaphore</code>  或 <code>CreateMutex</code>  函数。从所有这些调用返回的句柄值都保存在  <code>WaitHandle</code>  基类内部定义的一个私有  <code>SafeWaitHandle</code>  字段中。其次， <code>EventWaitHandle</code> ， <code>Semaphore</code>  和  <code>Mutex</code>  类都提供了静态  <code>OpenExisting</code>  方法，它们在内部调用 Win32  <code>OpenEvent</code> ， <code>OpenSemaphore</code>  或  <code>OpenMutex</code>  函数，并传递一个  <code>String</code>  实参 (标识现有的一个具名内核对象)。所有函数返回的句柄值都保存到从  <code>OpenExisting</code>  方法返回的一个新构造的对象中。如果指定名称的内核对象不存在，就抛出一个  <code>WaitHandleCannotBeOpenedException</code>  异常。事件 (event) 其实只是由内核维护的  <code>Boolean</code>  变量。事件为  <code>false</code> ，在事件上等待的线程就阻塞；事件为  <code>true</code> ，就解除阻塞。有两种事件，即自动重置事件和手动重置事件。当一个自动重置事件为  <code>true</code>  时，它只唤醒一个阻塞的线程，因为在解除第一个线程的阻塞后，内核将事件自动重置回 <code>false</code> ，造成其余线程继续阻塞。而当一个手动重置事件为  <code>true</code>  时，它解除正在等待它的所有线程的阻塞，因为内核不将事件自动重置回  <code>false</code> ；现在，你的代码必须将事件手动重置回 <code>false</code> 。可用自动重置事件轻松创建线程同步锁（ <code>SimpleWaitLock</code> ），可采取和使用  <code>SimpleSpinLock</code>  时完全一样的方式使用这个  <code>SimpleWaitLock</code> 。事实上，外部行为是完全相同的；不过，两个锁的性能截然不同。锁上面没有竞争的时候， <code>SimpleWaitLock</code>  比  <code>SimpleSpinLock</code>  慢得多，因为对  <code>SimpleWaitLock</code>  的  <code>Enter</code>  和  <code>Leave</code>  方法的每一个调用都强迫调用线程从托管代码转换为内核代码，再转换回来 —— 这是不好的地方。但在存在竞争的时候，输掉的线程会被内核阻塞，不会在那里 “自旋”，从而浪费 CPU 时间 —— 这是好的地方。还要注意，构造  <code>AutoResetEvent</code>  对象并在它上面调用  <code>Dispose</code>  也会造成从托管向内核的转换，对性能造成负面影响。这些调用一般很少发生，所以一般不必过于关心它们。线程同步能避免就尽量避免。如果一定要进行线程同步，就尽量使用用户模式的构造。内核模式的构造要尽量避免。信号量 (semaphore) 其实就是由内核维护的  <code>Int32</code>  变量。信号量为 0 时，在信号量上等待的线程会阻塞；信号量大于 0 时解除阻塞。在信号量上等待的线程解除阻塞时，内核自动从信号量的计数中减 1。信号量还关联了一个最大  <code>Int32</code>  值，当前计数绝不允许超过最大计数。自动重置事件在行为上和最大计数为 1 的信号量非常相似。两者的区别在于，可以在一个自动重置事件上连续多次调用  <code>Set</code> ，同时仍然只有一个线程解除阻塞。相反，在一个信号量上连续多次调用  <code>Release</code> ，会使它的内部计数一直递增，这可能解除大量线程的阻塞。顺便说一句，如果在一个信号量上多次调用  <code>Release</code> ，会导致它的计数超过最大计数，这时  <code>Release</code>  会抛出一个  <code>SemaphoreFullException</code> 。互斥体 (mutex) 代表一个互斥的锁。它的工作方式和  <code>AutoResetEvent</code>  或者计数为 1 的  <code>Semaphore</code>  相似，三者都是一次只释放一个正在等待的线程。互斥体有一些额外的逻辑，这造成它们比其他构造更复杂。首先， <code>Mutex</code>  对象会查询调用线程的  <code>Int32</code>  ID，记录是哪个线程获得了它。一个线程调用 <code>ReleaseMutex</code>  时， <code>Mutex</code>  确保调用线程就是获取  <code>Mutex</code>  的那个线程。如若不然， <code>Mutex</code>  对象的状态就不会改变，而  <code>ReleaseMutex</code>  会抛出一个  <code>System.ApplicationException</code> 。另外，拥有  <code>Mutex</code>  的线程因为任何原因而终止，在  <code>Mutex</code>  上等待的某个线程会因为抛出  <code>System.Threading.AbandonedMutexException</code>  异常而被唤醒。该异常通常会成为未处理的异常，从而终止整个进程。这是好事，因为线程在获取了一个  <code>Mutex</code>  之后，可能在更新完  <code>Mutex</code>  所保护的数据之前终止。如果其他线程捕捉了  <code>AbandonedMutexException</code> ，就可能视图访问损坏的数据，造成无法预料的结果和安全隐患。其次，  <code>Mutex</code>  对象维护着一个递归计数 (recursion count)，指出拥有该  <code>Mutex</code>  的线程拥有了它多少次。如果一个线程当前拥有一个  <code>Mutex</code> ，而后该线程再次在  <code>Mutex</code>  上等待，计数就会递增，这个线程允许继续进行。线程调用  <code>ReleaseMutex</code>  将导致计数递减。只有计数变成 0，另一个线程才能成为该  <code>Mutex</code>  的所有者。通常，当一个方法获取了一个锁，然后调用也需要锁的另一个方法，就需要一个递归锁。由于  <code>Mutex</code>  对象支持递归，所以线程获取两次锁，就要释放它两次。在此之后，另一个线程才能拥有这个  <code>Mutex</code> 。</p>\n",
            "tags": [
                "CSharp",
                "CLR-via-CSharp",
                "读书笔记",
                "C#"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/02/08/csharp/clr-via-csharp/Chapter%2028%20IO-Bound%20Asynchronous%20Operations/",
            "url": "http://sakupinera.github.io/2023/02/08/csharp/clr-via-csharp/Chapter%2028%20IO-Bound%20Asynchronous%20Operations/",
            "title": "CLR via C# - Chapter 28 IO-Bound Asynchronous Operations",
            "date_published": "2023-02-07T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-28-io-bound-asynchronous-operations\"><a class=\"anchor\" href=\"#chapter-28-io-bound-asynchronous-operations\">#</a> Chapter 28 IO-Bound Asynchronous Operations</h1>\n<h2 id=\"how-windows-performs-io-operations\"><a class=\"anchor\" href=\"#how-windows-performs-io-operations\">#</a> How Windows Performs I/O Operations</h2>\n<blockquote>\n<p>Let’s begin by discussing how Windows performs synchronous I/O operations. Figure 28-1 represents  a computer system with several hardware devices connected to it. Each of these hardware devices  has its own circuit board, each of which contains a small, special-purpose computer that knows how  to control its hardware device. For example, the hard disk drive has a circuit board that knows how to  spin up the drive, seek the head to the right track, read or write data from or to the disk, and transfer  the data to or from your computer’s memory.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/08/csharp/clr-via-csharp/Chapter%2028%20IO-Bound%20Asynchronous%20Operations/image-20230206220936582.png\" alt=\"image-20230206220936582\" /></p>\n<blockquote>\n<p>In your program, you open a disk file by constructing a FileStream object. Then you call the  Read method to read data from the file. When you call FileStream’s Read method, your thread  transitions from managed code to native/user-mode code and Read internally calls the Win32 ReadFile function (#1). ReadFile then allocates a small data structure called an I/O Request Packet (IRP)  (#2). The IRP structure is initialized to contain the handle to the file, an offset within the file where  bytes will start to be read from, the address of a Byte[] that should be filled with the bytes being  read, the number of bytes to transfer, and some other less interesting stuff.</p>\n</blockquote>\n<blockquote>\n<p>ReadFile then calls into the Windows kernel by having your thread transition from native/usermode code to native/kernel-mode code, passing the IRP data structure to the kernel (#3). From the  device handle in the IRP, the Windows kernel knows which hardware device the I/O operation is  destined for, and Windows delivers the IRP to the appropriate device driver’s IRP queue (#4). Each  device driver maintains its own IRP queue that contains I/O requests from all processes running on  the machine. As IRP packets show up, the device driver passes the IRP information to the circuit board  associated with the actual hardware device. The hardware device now performs the requested I/O  operation (#5).</p>\n</blockquote>\n<blockquote>\n<p>But here is the important part: While the hardware device is performing the I/O operation, your  thread that issued the I/O request has nothing to do, so Windows puts your thread to sleep so that it  is not wasting CPU time (#6). This is great, but although your thread is not wasting time, it is wasting space (memory), as its user-mode stack, kernel-mode stack, thread environment block (TEB), and  other data structures are sitting in memory but are not being accessed at all. In addition, for GUI applications, the UI can’t respond to user input while the thread is blocked. All of this is bad.</p>\n</blockquote>\n<blockquote>\n<p>Ultimately, the hardware device will complete the I/O operation, and then Windows will wake up  your thread, schedule it to a CPU, and let it return from kernel mode to user mode, and then back to  managed code (#7, #8, and #9). FileStream’s Read method now returns an Int32, indicating the  actual number of bytes read from the file so that you know how many bytes you can examine in the  Byte[] that you passed to Read.</p>\n</blockquote>\n<blockquote>\n<p>Let’s imagine that you are implementing a web application and as each client request comes in  to your server, you need to make a database request. When a client request comes in, a thread pool  thread will call into your code. If you now issue a database request synchronously, the thread will  block for an indefinite amount of time waiting for the database to respond with the result. If during this time another client request comes in, the thread pool will have to create another thread  and again this thread will block when it makes another database request. As more and more client  requests come in, more and more threads are created, and all these threads block waiting for the  database to respond. The result is that your web server is allocating lots of system resources (threads  and their memory) that are barely even used!</p>\n</blockquote>\n<blockquote>\n<p>And to make matters worse, when the database does reply with the various results, threads become unblocked and they all start executing. But because you might have lots of threads running and  relatively few CPU cores, Windows has to perform frequent context switches, which hurts performance even more. This is no way to implement a scalable application.</p>\n</blockquote>\n<blockquote>\n<p>Now, let’s discuss how Windows performs asynchronous I/O operations. In Figure 28-2, I have  removed all the hardware devices except the hard disk from the picture, I introduce the common  language runtime’s (CLR’s) thread pool, and I’ve modified the code slightly. I still open the disk file  by constructing a FileStream object, but now I pass in the FileOptions.Asynchronous flag.  This flag tells Windows that I want my read and write operations against the file to be performed  asynchronously.</p>\n</blockquote>\n<blockquote>\n<p>To read data from the file, I now call ReadAsync instead of Read. ReadAsync internally allocates a  Task object to represent the pending completion of the read operation. Then, ReadAsync calls Win32’s ReadFile function (#1). ReadFile allocates its IRP, initializes it just like it did in the  synchronous scenario (#2), and then passes it down to the Windows kernel (#3). Windows adds the  IRP to the hard disk driver’s IRP queue (#4), but now, instead of blocking your thread, your thread is  allowed to return to your code; your thread immediately returns from its call to ReadAsync (#5, #6,  and #7). Now, of course, the IRP has not necessarily been processed yet, so you cannot have code  after ReadAsync that attempts to access the bytes in the passed-in Byte[].</p>\n</blockquote>\n<blockquote>\n<p>Now you might ask, when and how do you process the data that will ultimately be read? Well,  when you call ReadAsync, it returns to you a Task object. Using this object, you can call  ContinueWith to register a callback method that should execute when the task completes and then  process the data in this callback method. Or, alternatively, you can use C#’s asynchronous function  feature to simplify your code by allowing you to write it sequentially (as you would if you were performing synchronous I/O).</p>\n</blockquote>\n<p><img data-src=\"/2023/02/08/csharp/clr-via-csharp/Chapter%2028%20IO-Bound%20Asynchronous%20Operations/image-20230206221054458.png\" alt=\"image-20230206221054458\" /></p>\n<blockquote>\n<p>When the hardware device completes processing the IRP (a), it will queue the completed IRP into  the CLR’s thread pool (b). Sometime in the future, a thread pool thread will extract the completed IRP  and execute code that completes the task by setting an exception (if an error occurred) or the result  (in this case, an Int32 indicating the number of bytes successfully read) (c).1 So now the Task object  knows when the operation has completed and this, in turn, lets your code run so it can safely access  the data inside the Byte[].</p>\n</blockquote>\n<blockquote>\n<p>Now that you understand the basics, let’s put it all into perspective. Let’s say that a client request  comes in, and our server makes an asynchronous database request. As a result, our thread won’t  block, and it will be allowed to return to the thread pool so that it can handle more incoming client  requests. So now we have just one thread handling all incoming client requests. When the database  server responds, its response is also queued into the thread pool, so our thread pool thread will just  process it at some point and ultimately send the necessary data back to the client. At this point, we  have just one thread processing all client requests and all database responses. Our server is using very  few system resources and it is still running as fast as it can, especially because there are no context  switches!</p>\n</blockquote>\n<blockquote>\n<p>If items appear in the thread pool quicker than our one thread can process them all, then the  thread pool might create additional threads. The thread pool will quickly create one thread per CPU on the machine. So, on a quad-processor machine, four client requests/database responses (in any  combination) are running on four threads without any context switching.</p>\n</blockquote>\n<blockquote>\n<p>However, if any of these threads voluntarily block (by invoking a synchronous I/O operation, calling Thread.Sleep, or waiting to acquire a thread synchronization lock), then Windows notifies the  thread pool that one of its threads has stopped running. The thread pool now realizes that the CPUs  are undersaturated and creates a new thread to replace the blocked thread. This, of course, is not  ideal because creating a new thread is very expensive in terms of both time and memory.</p>\n</blockquote>\n<blockquote>\n<p>What’s worse is that the blocked thread might wake up and now the CPUs are oversaturated again  and context switching must occur, decreasing performance. However, the thread pool is smart here.  As threads complete their processing and return to the pool, the thread pool won’t let them process  new work items until the CPUs become exactly saturated again, thereby reducing context switches  and improving performance. And if the thread pool later determines that it has more threads in it  than it needs, it lets the extra threads kill themselves, thereby reclaiming the resources that these  threads were using.</p>\n</blockquote>\n<blockquote>\n<p>Internally, the CLR’s thread pool uses a Windows resource called an I/O Completion Port to elicit  the behavior that I’ve just described. The CLR creates an I/O Completion Port when it initializes and,  as you open hardware devices, these devices can be bound to the I/O Completion Port so that device  drivers know where to queue the completed IRPs. If you want to understand more about this mechanism, I recommend the book, Windows via C/C++, Fifth Edition, by myself and Christophe Nasarre  (Microsoft Press, 2007).</p>\n</blockquote>\n<blockquote>\n<p>In addition to minimal resource usage and reduced context switches, we get many other benefits  when performing I/O operations asynchronously. Whenever a garbage collection starts, the CLR must  suspend all the threads in the process. Therefore, the fewer threads we have, the faster the garbage  collector runs. In addition, when a garbage collection occurs, the CLR must walk all the threads’ stacks  looking for roots. Again, the fewer threads there are, the fewer stacks there are, and this also makes  the garbage collection faster. But, in addition, if our threads don’t block while processing work items,  the threads tend to spend most of their time waiting in the thread pool. So when a garbage collection  occurs, the threads are at the top of their stack, and walking each thread’s stack for roots takes very  little time.</p>\n</blockquote>\n<blockquote>\n<p>Also, when you debug an application, Windows suspends all threads in the debuggee when you  hit a breakpoint. Then, when you continue executing the debuggee, Windows has to resume all  its threads, so if you have a lot of threads in an application, single-stepping through the code in a  debugger can be excruciatingly slow. Using asynchronous I/O allows you to have just a few threads,  improving your debugging performance.</p>\n</blockquote>\n<blockquote>\n<p>And, here’s yet another benefit: let’s say that your application wants to download 10 images  from various websites, and that it takes 5 seconds to download each image. If you perform this  work synchronously (downloading one image after another), then it takes you 50 seconds to get  the 10 images. However, if you use just one thread to initiate 10 asynchronous download operations, then all 10 are being performed concurrently and all 10 images will come back in just 5  seconds! That is, when performing multiple synchronous I/O operations, the time it takes to get all  the results is the sum of the times required for each individual result. However, when performing  multiple asynchronous I/O operations, the time it takes to get all the results is the time required to  get the single worst-performing operation.</p>\n</blockquote>\n<blockquote>\n<p>For GUI applications, asynchronous operations offer yet another advantage: the application’s user  interface doesn’t hang and remains responsive to the end user. In fact, if you are building a Microsoft Silverlight or Windows Store application, you must perform all I/O operations asynchronously,  because the class libraries available to you for performing I/O operations only expose these operations asynchronously; the equivalent synchronous methods simply do not exist in the library. This was  done purposely ensuring that these applications can never issue a synchronous I/O operation, thereby  blocking the GUI thread making the application nonresponsive to the end user. This forces developers  to build responsive applications providing end users a better experience.</p>\n</blockquote>\n<p>💡小结：Windows 执行同步 I/O 操作时，首先通过构造一个 <code>FileStream</code>  对象来打开磁盘文件，然后调用 <code>Read</code>  方法从文件中读取数据。调用 <code>FileStream</code>  的 <code>Read</code>  方法时，线程会从托管代码转变为本机 / 用户模式代码， <code>Read</code>  内部调用 Win32 <code>ReadFile</code>  函数。 <code>ReadFile</code>  分配一个小的数据结构，称为 I/O 请求包（I/O Request Packet，IRP）。IRP 结构初始化后包含的内容有：文件句柄，文件中的偏移量（从这个位置开始读取字节），一个 <code>Byte[]</code>  数组的地址（数组用读取的字节来填充），要传输的字节数以及其他常规性内容。然后， <code>ReadFile</code>  将线程从本机 / 用户模式代码转变成本机 / 内核模式代码，向内核传递 IRP 数据结构，从而调用 Windows 内核。根据 IRP 中的设备句柄，Windows 内核知道 I/O 操作要传送给哪个硬件设备。因此，Windows 将 IRP 传送给恰当的设备驱动的 IRP 队列。每个设备驱动程序都维护着自己的 IRP 队列，其中包含了机器上运行的所有进程发出的 I/O 请求。IRP 数据包到达时，设备驱动程序将 IRP 信息传给物理硬件设备上安装的电路板。现在，硬件设备将执行请求的 I/O 操作。在硬件设备执行 I/O 操作期间，发出了 I/O 请求的线程将无事可做，所以 Windows 将线程变成睡眠状态，防止它浪费 CPU 时间。这当然很好。但是，虽然线程不浪费时间，但它仍然浪费了空间 (内存)，因为它的用户模式栈、内核模式栈、线程环境块 (thread environment block，TEB) 和其他数据结构都还在内存中，而且完全没有谁去访问这些东西。这当然就不好了。最终，硬件设备会完成 I/O 操作。然后，Windows 会唤醒你的线程，把它调度给一个 CPU，使它从内核模式返回用户模式，再返回至托管代码。 <code>FileStream</code>  的  <code>Read</code>  方法现在返回一个  <code>Int32</code> ，指明从文件中读取的实际字节数，使你知道在传给  <code>Read</code>  的  <code>Byte[]</code>  中，实际能检索到多少个字节。现在讨论一下 Windows 如何执行异步 I/O 操作，打开磁盘文件的方式仍然是通过构造一个  <code>FileStream</code>  对象，但现在传递了一个  <code>FileOptions.Asynchronous</code>  标志，告诉 Windows 我希望文件的读 / 写操作以异步方式执行。现在调用  <code>ReadAsync</code>  而不是  <code>Read</code>  从文件中读取数据。 <code>ReadAsync</code>  内部分配一个  <code>Task&lt;Int32&gt;</code>  对象来代表用于完成读取操作的代码。然后， <code>ReadAsync</code>  调用 Win32  <code>ReadFile</code>  函数。 <code>ReadFile</code>  分配 IRP，和前面的同步操作一样初始化它，然后把它传给 Windows 内核。Windows 把 IRP 添加到硬盘驱动程序的 IRP 队列中。但线程不再阻塞，而是允许返回至你的代码。所以，线程能立即从  <code>ReadAsync</code>  调用中返回。当然，此时 IRP 可能尚未出处理好，所以不能够在  <code>ReadAsync</code>  之后的代码中访问传递的  <code>Byte[]</code>  中的字节。注意，调用  <code>ReadAsync</code>  返回的是一个  <code>Task&lt;Int32&gt;</code>  对象。可在该对象上调用  <code>ContinueWith</code>  来登记任务完成时执行的回调方法，然后在回调方法中处理数据。当然，也可利用 C# 的异步函数功能简化编码，以顺序方式写代码 (感觉就像是执行同步 I/O)。硬件设备处理好 IRP 后，会将完成的 IRP 放到 CLR 的线程池队列中。将来某个时候，一个线程池线程会提取完成的 IRP 并执行完成任务的代码，最终要么设置异常 (如果发生错误)，要么返回结果 (本例是代表成功读取的字节数的一个  <code>Int32</code> )。这样一来， <code>Task</code>  对象就知道操作在什么时候完成，代码可以开始运行并安全地访问  <code>Byte[]</code>  中的数据。假定在传入一个客户端请求之后，服务器发出的是一个异步数据库请求。此时线程不会阻塞，它可返回线程池以处理传入的更多客户端请求。所以，现在用一个线程就能处理所有传入的客户端请求。数据库服务器响应之后，它的响应也会进入线程池队列，使线程池线程能在某个时间处理它，最后将需要的数据发送回客户端。在这种情况下，只用一个线程就处理了所有客户端请求和所有数据库响应。服务器只需使用极少的系统资源，同时运行速度也得到了保证。如果工作项被送入线程池的速度比一个线程处理它们的速度还要快，线程池就可能创建额外的线程。线程池很快会为机器上的每个 CPU 都创建一个线程。例如，在 4 核机器上，4 个客户端请求 / 数据库响应 (任意组合) 可以在 4 个线程上同时运行，而且还不会发生上下文切换。然而，如果其中任何一个线程主动阻塞 (通过调用同步 I/O 操作，调用  <code>Thread.Sleep</code>  或者等待获取线程同步锁)，Windows 就会通知线程池它的一个线程停止了运行。随后，线程池意识到 CPU 处于欠饱和状态，所以会创建一个新线程来替换阻塞的线程。更糟的是，阻塞的线程可能醒来，CPU 又变得过饱和了，所以必须发生上下文切换，这会影响到性能。然而，线程池在这个时候是比较聪明的。线程完成处理并回到池中时，除非 CPU 再度变得饱和，否则线程池不让它们处理新的工作项。这样就减少了上下文切换并提升了性能。如果线程池以后判断它的线程数超过需要的数量，会允许多余的线程终止自身，回收这些线程使用的资源。在内部，CLR 的线程池使用名为 “I/O 完成端口”(I/O Completion Port) 的 Windows 资源来引出我刚才描述的行为。CLR 在初始化时创建一个 I/O 完成端口。当你打开硬件设备时，这些设备可以和 I/O 完成端口关联，使设备驱动程序知道将完成的 IRP 送到哪儿。 除了将资源利用率降到最低，并减少上下文切换，以异步方式执行 I/O 操作还有其他许多好处。每开始一次垃圾回收，CLR 都必须挂起进程中的所有线程。所以，线程越少，垃圾回收器运行的速度越快。此外，一次垃圾回收发生时，CLR 必须遍历所有线程的栈来查找根。同样，线程越少，栈的数量越少，使垃圾回收速度变得更快。另外，在调试应用程序时，一旦遇到断点，Windows 会挂起被调试的应用程序中的所有线程。应用程序刚恢复继续运行时，Windows 必须恢复它的所有线程。所以，如果应用程序中的线程数太多，在调试器中单步调试代码会慢得令人难受。使用异步 I/O 可以将线程数控制在少数几个，可以增强调试性能。 还有一个好处值得一提：执行多个同步 I/O 操作，获得所有结果的时间是获得每个单独结果所需时间之和。但执行多个异步 I/O 操作，获得所有结果的时间是表现最差的那个操作所需的时间。 对于 GUI 应用程序，异步操作还有另一个好处，即用户界面不会挂起，一直都能灵敏地响应用户的操作。</p>\n<h2 id=\"cs-asynchronous-functions\"><a class=\"anchor\" href=\"#cs-asynchronous-functions\">#</a> C#’s Asynchronous Functions</h2>\n<blockquote>\n<p>Performing asynchronous operations is the key to building scalable and responsive applications that  allow you to use very few threads to execute lots of operations. And when coupled with the thread  pool, asynchronous operations allow you to take advantage of all of the CPUs that are in the machine.  Realizing the enormous potential here, Microsoft designed a programming model that would make it  easy for developers to take advantage of this capability.3 This pattern leverages Tasks (as discussed in  Chapter 27, “Compute-Bound Asynchronous Operations”) and a C# language feature called asynchronous functions (or async functions, for short). Here is an example of code that uses an async function  to issue two asynchronous I/O operations.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">IssueClientRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serverName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pipe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NamedPipeClientStream</span><span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"PipeName\"</span><span class=\"token punctuation\">,</span> PipeDirection<span class=\"token punctuation\">.</span>InOut<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> PipeOptions<span class=\"token punctuation\">.</span>Asynchronous <span class=\"token operator\">|</span> PipeOptions<span class=\"token punctuation\">.</span>WriteThrough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Must Connect before setting ReadMode</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> pipe<span class=\"token punctuation\">.</span>ReadMode <span class=\"token operator\">=</span> PipeTransmissionMode<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Asynchronously send data to the server</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token class-name\">Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> request <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">await</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Asynchronously read the server's response</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token class-name\">Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">Int32</span> bytesRead <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsync</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">return</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Close the pipe</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In the preceding code, you can tell that IssueClientRequestAsync is an async function, because I specified async on the first line just after static. When you mark a method as async, the  compiler basically transforms your method’s code into a type that implements a state machine (the  details of which will be discussed in the next section). This allows a thread to execute some code in  the state machine and then return without having the method execute all the way to completion.  So, when a thread calls IssueClientRequestAsync, the thread constructs a NamedPipeClientStream, calls Connect, sets its ReadMode property, converts the passed-in message to a Byte[] and then calls WriteAsync. WriteAsync internally allocates a Task object and returns it back to  IssueClientRequestAsync. At this point, the C# await operator effectively calls ContinueWith on the Task object passing in the method that resumes the state machine and then, the thread returns from IssueClientRequestAsync.</p>\n</blockquote>\n<blockquote>\n<p>Sometime in the future, the network device driver will complete writing the data to the pipe  and then, a thread pool thread will notify the Task object, which will then activate the ContinueWith callback method, causing a thread to resume the state machine. More specifically, a thread  will re-enter the IssueClientRequestAsync method but at the point of the await operator. Our  method now executes compiler-generated code that queries the status of the Task object. If the  operation failed, an exception representing the failure is thrown. If the operation completes successfully, the await operator returns the result. In this case, WriteAsync returns a Task instead of a  Task, so there is no return value.</p>\n</blockquote>\n<blockquote>\n<p>Now, our method continues executing by allocating a Byte[] and then calls NamedPipeClientStream’s asynchronous ReadAsync method. Internally, ReadAsync creates a Task object  and returns it. Again, the await operator effectively calls ContinueWith on the Task object  passing in the method that resumes the state machine. And then, the thread returns from IssueClientRequestAsync again.</p>\n</blockquote>\n<blockquote>\n<p>Sometime in the future, the server will send a response back to the client machine, the network  device driver gets this response, and a thread pool thread notifies the Task object, which  will then resume the state machine. The await operator causes the compiler to generate code that  queries the Task object’s Result property (an Int32) and assigns the result to the bytesRead local  variable or throws an exception if the operation failed. Then, the rest of the code in IssueClientRequestAsync executes, returning the result string and closing the pipe. At this point, the state  machine has run to completion and the garbage collector will reclaim any memory it needed.</p>\n</blockquote>\n<blockquote>\n<p>Because async functions return before their state machine has executed all the way to completion, the method calling IssueClientRequestAsync will continue its execution right after IssueClientRequestAsync executes its first await operator. But, how can the caller know when IssueClientRequestAsync has completed executing its state machine in its entirety? Well, when you  mark a method as async, the compiler automatically generates code that creates a Task object when  the state machine begins its execution; this Task object is completed automatically when the state machine runs to completion. You’ll notice that the IssueClientRequestAsync method’s return  type is a Task. It actually returns the Task object that the compiler-generated  code creates back to its caller, and the Task’s Result property is of type String in this case. Near the  bottom of IssueClientRequestAsync, I return a string. This causes the compiler-generated code to  complete the Task object it created and set its Result property to the returned string.</p>\n</blockquote>\n<blockquote>\n<p>You should be aware of the following restrictions related to async functions:</p>\n<ul>\n<li>\n<p>You cannot turn your application’s Main method into an async function. In addition, constructors, property accessor methods and event accessor methods cannot be turned into async  functions.</p>\n</li>\n<li>\n<p>You cannot have any out or ref parameters on an async function.</p>\n</li>\n<li>\n<p>You cannot use the await operator inside a catch, finally, or unsafe block.</p>\n</li>\n<li>\n<p>You cannot take a lock that supports thread ownership or recursion before an await operator and release it after the await operator. The reason is because one thread might execute  the code before the await and a different thread might execute the code after the await. If  you use await within a C# lock statement, the compiler issues an error. If you explicitly call  Monitor’s Enter and Exit methods instead, then the code will compile but Monitor.Exit will throw a SynchronizationLockException at run time.4</p>\n</li>\n<li>\n<p>Within a query expression, the await operator may only be used within the first collection  expression of the initial from clause or within the collection expression of a join clause.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>These restrictions are pretty minor. If you violate one, the compiler will let you know, and you can  usually work around the problem with some small code modifications.</p>\n</blockquote>\n<p>💡小结：执行异步操作是构建可伸缩的、响应灵敏的应用程序的关键，它允许使用少量线程执行大量操作。与线程池结合，异步操作允许利用机器中的所有 CPU。意识到其中的巨大潜力，Microsoft 设计了一个编程模型来帮助开发者利用这种能力。该模式利用了 <code>Task</code>  和称为异步函数的一个 C# 语言功能。注意，异步函数存在以下限制。1. 构造器、属性访问器方法和事件访问器方法不能转变成异步函数。2. 异步函数不能使用任何  <code>out</code>  或  <code>ref</code>  参数。3. 不能在 catch，finally 或 unsafe 块中使用 await 操作符。4. 不能在  <code>await</code>  操作符之前获得一个支持线程所有权或递归的锁，并在  <code>await</code>  操作符之后释放它。这是因为  <code>await</code>  之前的代码由一个线程执行，之后的代码则可能由另一个线程执行。在 C#  <code>lock</code>  语句中使用  <code>await</code> ，编译器会报错。如果显式调用  <code>Monitor</code>  的  <code>Enter</code>  和  <code>Exit</code>  方法，那么代码虽然能编译，但  <code>Monitor.Exit</code>  会在运行时抛出一个  <code>SynchronizationLockException</code> 。5. 在查询表达式中， <code>await</code>  操作符只能在初始  <code>from</code>  子句的第一个集合表达式中使用，或者在  <code>join</code>  子句的集合表达式中使用。</p>\n<h2 id=\"how-the-compiler-transforms-an-async-function-into-a-state-machine\"><a class=\"anchor\" href=\"#how-the-compiler-transforms-an-async-function-into-a-state-machine\">#</a> How the Compiler Transforms an Async Function into a State Machine</h2>\n<blockquote>\n<p>When working with async functions, you will be more productive with them if you have an understanding and appreciation for the code transform that the compiler is doing for you. And, I think the  easiest and best way for you to learn that is by going through an example. So, let’s start off by defining some simple type definitions and some simple methods.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Type1</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Type2</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Type1<span class=\"token punctuation\">></span></span> <span class=\"token function\">Method1Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">/* Does some async thing that returns a Type1 object */</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Type2<span class=\"token punctuation\">></span></span> <span class=\"token function\">Method2Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">/* Does some async thing that returns a Type2 object */</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Now, let me show you an async function that consumes these simple types and methods.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">MyMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> argument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Int32</span> local <span class=\"token operator\">=</span> argument<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">Type1</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Method1Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">Type2</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Method2Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Catch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Although MyMethodAsync seems rather contrived, it demonstrates some key things. First, it is an  async function itself that returns a Task but the code’s body ultimately returns a String.  Second, it calls other functions that execute operations asynchronously, one stand-alone and the  other from within a for loop. Finally, it also contains exception handling code. When compiling MyMethodAsync, the compiler transforms the code in this method to a state machine structure that is  capable of being suspended and resumed.</p>\n</blockquote>\n<blockquote>\n<p>I took the preceding code, compiled it, and then reverse engineered the IL code back into C#  source code. I then simplified the code and added a lot of comments to it so you can understand  what the compiler is doing to make async functions work. The following is the essence of the code  created by the compiler’s transformation. I show the transformed MyMethodAsync method as well as  the state machine structure it now depends on.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// AsyncStateMachine attribute indicates an async method (good for tools using reflection); </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// the type indicates which structure implements the state machine</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>DebuggerStepThrough<span class=\"token punctuation\">,</span> <span class=\"token function\">AsyncStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">StateMachine</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">MyMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> argument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Create state machine instance &amp; initialize it</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">StateMachine</span> stateMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StateMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Create builder returning Task&lt;String> from this stub method</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// State machine accesses builder to set Task completion/exception</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> m_builder <span class=\"token operator\">=</span> AsyncTaskMethodBuilder<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> m_state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Initialize state machine location</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> m_argument <span class=\"token operator\">=</span> argument <span class=\"token comment\">// Copy arguments to state machine fields</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// Start executing the state machine</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> stateMachine<span class=\"token punctuation\">.</span>m_builder<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">return</span> stateMachine<span class=\"token punctuation\">.</span>m_builder<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Return state machine's Task</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// This is the state machine structure</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>CompilerGenerated<span class=\"token punctuation\">,</span> <span class=\"token function\">StructLayout</span><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">StateMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncStateMachine</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// Fields for state machine's builder (Task) &amp; its location</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">AsyncTaskMethodBuilder<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> m_builder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Int32</span> m_state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">// Argument and local variables are fields now:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Int32</span> m_argument<span class=\"token punctuation\">,</span> m_local<span class=\"token punctuation\">,</span> m_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Type1</span> m_resultType1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Type2</span> m_resultType2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token comment\">// There is 1 field per awaiter type.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">// Only 1 of these fields is important at any time. That field refers </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token comment\">// to the most recently executed await that is completing asynchronously:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskAwaiter<span class=\"token punctuation\">&lt;</span>Type1<span class=\"token punctuation\">></span></span> m_awaiterType1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskAwaiter<span class=\"token punctuation\">&lt;</span>Type2<span class=\"token punctuation\">></span></span> m_awaiterType2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token comment\">// This is the state machine method itself</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Task's result value</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token comment\">// Compiler-inserted try block ensures the state machine’s task completes</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token class-name\">Boolean</span> executeFinally <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assume we're logically leaving the 'try' block</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_state <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// If 1st time in state machine method,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> m_local <span class=\"token operator\">=</span> m_argument<span class=\"token punctuation\">;</span> <span class=\"token comment\">// execute start of original method</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">// Try block that we had in our original code</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token class-name\">TaskAwaiter<span class=\"token punctuation\">&lt;</span>Type1<span class=\"token punctuation\">></span></span> awaiterType1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token class-name\">TaskAwaiter<span class=\"token punctuation\">&lt;</span>Type2<span class=\"token punctuation\">></span></span> awaiterType2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// Start execution of code in 'try'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token comment\">// Call Method1Async and get its awaiter</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> awaiterType1 <span class=\"token operator\">=</span> <span class=\"token function\">Method1Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>awaiterType1<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> m_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Method1Async' is completing </span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> <span class=\"token comment\">// asynchronously</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> m_awaiterType1 <span class=\"token operator\">=</span> awaiterType1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save the awaiter for when we come back</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> <span class=\"token comment\">// Tell awaiter to call MoveNext when operation completes</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> m_builder<span class=\"token punctuation\">.</span><span class=\"token function\">AwaitUnsafeOnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> awaiterType1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> <span class=\"token comment\">// The line above invokes awaiterType1's OnCompleted which approximately </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> <span class=\"token comment\">// calls ContinueWith(t => MoveNext()) on the Task being awaited.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> <span class=\"token comment\">// When the Task completes, the ContinueWith task calls MoveNext</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> executeFinally <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// We're not logically leaving the 'try' </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre> <span class=\"token comment\">// block</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread returns to caller</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> <span class=\"token comment\">// 'Method1Async' completed synchronously</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 'Method1Async' completed asynchronously</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> awaiterType1 <span class=\"token operator\">=</span> m_awaiterType1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Restore most-recent awaiter</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 'Method2Async' completed asynchronously</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre> awaiterType2 <span class=\"token operator\">=</span> m_awaiterType2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Restore most-recent awaiter</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre> <span class=\"token keyword\">goto</span> ForLoopEpilog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre> <span class=\"token comment\">// After the first await, we capture the result &amp; start the 'for' loop</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre> m_resultType1 <span class=\"token operator\">=</span> awaiterType1<span class=\"token punctuation\">.</span><span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Get awaiter's result</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre> ForLoopPrologue<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre> m_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'for' loop initialization</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre> <span class=\"token keyword\">goto</span> ForLoopBody<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Skip to 'for' loop body</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre> ForLoopEpilog<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre> m_resultType2 <span class=\"token operator\">=</span> awaiterType2<span class=\"token punctuation\">.</span><span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre> m_x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Increment x after each loop iteration</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre> <span class=\"token comment\">// Fall into the 'for' loop’s body</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre> ForLoopBody<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 'for' loop test</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre> <span class=\"token comment\">// Call Method2Async and get its awaiter</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre> awaiterType2 <span class=\"token operator\">=</span> <span class=\"token function\">Method2Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>awaiterType2<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre> m_state <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Method2Async' is completing asynchronously</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre> m_awaiterType2 <span class=\"token operator\">=</span> awaiterType2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save the awaiter for when we come back</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre> <span class=\"token comment\">// Tell awaiter to call MoveNext when operation completes </span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre> m_builder<span class=\"token punctuation\">.</span><span class=\"token function\">AwaitUnsafeOnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> awaiterType2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre> executeFinally <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// We're not logically leaving the 'try' block</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread returns to caller</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre> <span class=\"token comment\">// 'Method2Async' completed synchronously</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre> <span class=\"token keyword\">goto</span> ForLoopEpilog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Completed synchronously, loop around</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Catch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre> <span class=\"token comment\">// Whenever a thread physically leaves a 'try', the 'finally' executes</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre> <span class=\"token comment\">// We only want to execute this code when the thread logically leaves the 'try'</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executeFinally<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> result <span class=\"token operator\">=</span> <span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// What we ultimately want to return from the async function</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre> <span class=\"token comment\">// Unhandled exception: complete state machine's Task with exception</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre> m_builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetException</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre> <span class=\"token comment\">// No exception: complete state machine's Task with result</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre> m_builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>If you spend the time to walk through the preceding code and read all the comments, I think you’ll  be able to fully digest what the compiler does for you. However, there is a piece of glue that attaches  the object being awaited to the state machine and I think it would be helpful if I explained how this  piece of glue worked. Whenever you use the await operator in your code, the compiler takes the  specified operand and attempts to call a GetAwaiter method on it. This method can be either an  instance method or an extension method. The object returned from calling the GetAwaiter method  is referred to as an awaiter. An awaiter is the glue I was referring to.</p>\n</blockquote>\n<blockquote>\n<p>After the state machine obtains an awaiter, it queries its IsCompleted property. If the operation  completed synchronously, true is returned and, as an optimization, the state machine simply continues executing. At this point, it calls the awaiter’s GetResult method, which either throws an exception if the operation failed or returns the result if the operation was successful. The state machine  continues running from here to process the result.</p>\n</blockquote>\n<blockquote>\n<p>If the operation completes asynchronously, IsCompleted returns false. In this case, the state machine calls the awaiter’s OnCompleted method passing it a delegate to the state machine’s MoveNext method. And now, the state machine allows its thread to return back to where it came from so that it  can execute other code. In the future, the awaiter, which wraps the underlying Task, knows when it  completes and invokes the delegate causing MoveNext to execute. The fields within the state machine  are used to figure out how to get to the right point in the code, giving the illusion that the method  is continuing from where it left off. At this point, the code calls the awaiter’s GetResult method and  execution continues running from here to process the result.</p>\n</blockquote>\n<blockquote>\n<p>That is how async functions work and the whole purpose is to simplify the coding effort normally  involved when writing non-blocking code.</p>\n</blockquote>\n<p>💡小结：编译  <code>MyMethodAsync</code>  时，编译器将该方法中的代码转换成一个状态机结构。这种结构能挂起和恢复。花些时间梳理上述代码并读完所有注释，我猜你就能完全地领会编译器为你做的事情了。但是，如果将被等待的对象与状态机粘合起来还需着重解释一下。任何时候使用  <code>await</code>  操作符，编译器都会获取操作数，并尝试在它上面调用  <code>GetAwaiter</code>  方法。这可能是实例方法或扩展方法。调用  <code>GetAwaiter</code>  方法所返回的对象称为  <code>awaiter</code>  (等待者)，正是它将被等待的对象与状态机粘合起来。状态机获得 awaiter 后，会查询其  <code>IsCompleted</code>  属性。如果操作已经以同步方式完成了，属性将返回  <code>true</code> ，而作为一项优化措施，状态机将继续执行并调用 awaiter 的  <code>GetResult</code>  方法。该方法要么抛出异常 (操作失败)，要么返回结果 (操作成功)。状态机继续执行以处理结果。如果操作以异步方式完成， <code>IsCompleted</code>  将返回  <code>false</code> 。状态机调用 awaiter 的  <code>OnCompleted</code>  方法并向它传递一个委托 (引用状态机的  <code>MoveNext</code>  方法)。现在，状态机允许它的线程回到原地以执行其他代码。将来某个时候，封装了底层任务的 awaiter 会在完成时调用委托以执行  <code>MoveNext</code> 。可根据状态机中的正确位置，使方法能从它当初离开时的位置继续。这时，代码调用 awaiter 的  <code>GetResult</code>  方法。执行将从这里继续，以便对结果进行处理。这便是异步函数的工作原理，开发人员可用它轻松地写出不阻塞的代码。</p>\n<h2 id=\"async-function-extensibility\"><a class=\"anchor\" href=\"#async-function-extensibility\">#</a> Async Function Extensibility</h2>\n<blockquote>\n<p>As for extensibility, if you can wrap a Task object around an operation that completes in the future,  you can use the await operator to await that operation. Having a single type (Task) to represent  all kinds of asynchronous operations is phenomenally useful because it allows you to implement  combinators (like Task’s WhenAll and WhenAny methods) and other helpful operations. Later in this  chapter, I demonstrate doing this by wrapping a CancellationToken with a Task so I can await an  asynchronous operation while also exposing timeout and cancellation.</p>\n</blockquote>\n<blockquote>\n<p>I’d also like to share with you another example. The following is my TaskLogger class, which  you can use to show you asynchronous operations that haven’t yet completed. This is very useful in  debugging scenarios especially when your application appears hung due to a bad request or a nonresponding server.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">TaskLogLevel</span> <span class=\"token punctuation\">&#123;</span> None<span class=\"token punctuation\">,</span> Pending <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TaskLogLevel</span> LogLevel <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskLogEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> Task <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">String</span> Tag <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> LogTime <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">String</span> CallerMemberName <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">String</span> CallerFilePath <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> CallerLineNumber <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogTime=&#123;0&#125;, Tag=&#123;1&#125;, Member=&#123;2&#125;, File=&#123;3&#125;(&#123;4&#125;)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> LogTime<span class=\"token punctuation\">,</span> Tag <span class=\"token operator\">??</span> <span class=\"token string\">\"(none)\"</span><span class=\"token punctuation\">,</span> CallerMemberName<span class=\"token punctuation\">,</span> CallerFilePath<span class=\"token punctuation\">,</span> CallerLineNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">,</span> TaskLogEntry<span class=\"token punctuation\">></span></span> s_log <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">,</span> TaskLogEntry<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TaskLogEntry<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetLogEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> s_log<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">Log</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> tag <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerMemberName</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">String</span> callerMemberName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerFilePath</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">String</span> callerFilePath <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerLineNumber</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">Int32</span> callerLineNumber <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span>task<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> callerMemberName<span class=\"token punctuation\">,</span> callerFilePath<span class=\"token punctuation\">,</span> callerLineNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> tag <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerMemberName</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">String</span> callerMemberName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerFilePath</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">String</span> callerFilePath <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerLineNumber</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">Int32</span> callerLineNumber <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LogLevel <span class=\"token operator\">==</span> TaskLogLevel<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> logEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskLogEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> Task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> LogTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> Tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> CallerMemberName <span class=\"token operator\">=</span> callerMemberName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> CallerFilePath <span class=\"token operator\">=</span> callerFilePath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> CallerLineNumber <span class=\"token operator\">=</span> callerLineNumber</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> s_log<span class=\"token punctuation\">[</span>task<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> logEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> task<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">TaskLogEntry</span> entry<span class=\"token punctuation\">;</span> s_log<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>ExecuteSynchronously<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And here is some code that demonstrates the use of the class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> DEBUG</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Using TaskLogger incurs a memory and performance hit; so turn it on in debug builds</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> TaskLogger<span class=\"token punctuation\">.</span>LogLevel <span class=\"token operator\">=</span> TaskLogger<span class=\"token punctuation\">.</span>TaskLogLevel<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Initiate 3 task; for testing the TaskLogger, we control their duration explicitly</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2s op\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5s op\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6s op\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// Wait for all tasks but cancel after 3 seconds; only 1 task should complete in time</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Note: WithCancellation is my extension method described later in this chapter</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token function\">WithCancellation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">// Ask the logger which tasks have not yet completed and sort</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// them in order from the one that’s been waiting the longest</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> op <span class=\"token keyword\">in</span> TaskLogger<span class=\"token punctuation\">.</span><span class=\"token function\">GetLogEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>tle <span class=\"token operator\">=></span> tle<span class=\"token punctuation\">.</span>LogTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I build and run this code, I get the following output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">LogTime=7/16/2012 6:44:31 AM, Tag=6s op, Member=Go, File=C:\\CLR via C#\\Code\\Ch28-1-IOOps.cs(332)\nLogTime=7/16/2012 6:44:31 AM, Tag=5s op, Member=Go, File=C:\\CLR via C#\\Code\\Ch28-1-IOOps.cs(331)\n</code></pre>\n<blockquote>\n<p>In addition to all the flexibility you have with using Task, async functions have another extensibility point: the compiler calls GetAwaiter on whatever operand is used with await. So, the operand  doesn’t have to be a Task object at all; it can be of any type as long as it has a GetAwaiter method  available to call. Here is an example of my own awaiter that is the glue between an async method’s  state machine and an event being raised.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventAwaiter<span class=\"token punctuation\">&lt;</span>TEventArgs<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotifyCompletion</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>TEventArgs<span class=\"token punctuation\">></span></span> m_events <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>TEventArgs<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action</span> m_continuation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Members invoked by the state machine</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// The state machine will call this first to get our awaiter; we return ourself</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">EventAwaiter<span class=\"token punctuation\">&lt;</span>TEventArgs<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Tell state machine if any events have happened yet</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsCompleted <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_events<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// The state machine tells us what method to invoke later; we save it</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Volatile<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_continuation<span class=\"token punctuation\">,</span> continuation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// The state machine queries the result; this is the await operator's result</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TEventArgs</span> <span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token class-name\">TEventArgs</span> e<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> m_events<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// Potentially invoked by multiple threads simultaneously when each raises the event</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EventRaised</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TEventArgs</span> eventArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> m_events<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>eventArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save EventArgs to return it from GetResult/await</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">// If there is a pending continuation, this thread takes it</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token class-name\">Action</span> continuation <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_continuation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>continuation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">continuation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Resume the state machine</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And here is a method that uses my EventAwaiter class to return from an await operator whenever an event is raised. In this case, the state machine continues whenever any thread in the AppDomain throws an exception</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowExceptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> eventAwaiter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EventAwaiter<span class=\"token punctuation\">&lt;</span>FirstChanceExceptionEventArgs<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> AppDomain<span class=\"token punctuation\">.</span>CurrentDomain<span class=\"token punctuation\">.</span>FirstChanceException <span class=\"token operator\">+=</span> eventAwaiter<span class=\"token punctuation\">.</span>EventRaised<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AppDomain exception: &#123;0&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> eventAwaiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And finally, here is some code that demonstrates it all working.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">ShowExceptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectDisposedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：在扩展性方面，能用  <code>Task</code>  对象包装一个将来完成的操作，就可以用  <code>await</code>  操作符来等待该操作。用一个类型 ( <code>Task</code> ) 来表示各种异步操作对编码有利，因为可以实现组合操作 (比如  <code>Task</code>  的  <code>WhenAll</code>  和  <code>WhenAny</code>  方法) 和其他有用的操作。除了增强使用  <code>Task</code>  时的灵活性，异步函数另一个对扩展性有利的地方在于编译器可以在  <code>await</code>  的任何操作数上调用  <code>GetAwaiter</code> 。所以操作数不一定是  <code>Task</code>  对象。可以是任意类型，只要提供了一个可以调用的  <code>GetAwaiter</code>  方法。</p>\n<h2 id=\"async-functions-and-event-handlers\"><a class=\"anchor\" href=\"#async-functions-and-event-handlers\">#</a> Async Functions and Event Handlers</h2>\n<blockquote>\n<p>Async functions usually have a return type of either Task or Task to represent the  completion of the function’s state machine. However, it is also possible to define an async function  with a void return type. This is a special case that the C# compiler allows to simplify the very common scenario where you want to implement an asynchronous event handler.</p>\n</blockquote>\n<blockquote>\n<p>Almost all event handler methods adhere to a method signature similar to this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EventHandlerCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>But, it is common to want to perform I/O operations inside an event handler, for example, when a  user clicks a UI element to open a file and read from it. To keep the UI responsive, this I/O should be  done asynchronously. Allowing you to write this code in an event handler method that has a void return type requires that the C# compiler allows async functions to have a void return type so you can  use the await operator to perform non-blocking I/O operations. When an async function has a void return type, the compiler still generates code to create the state machine but it does not create a  Task object because there is no way that one could be used. Because of this, there is no way to know  when the state machine of a void-returning async function has run to completion.</p>\n</blockquote>\n<p>💡小结：异步函数的返回类型一般是  <code>Task</code>  或  <code>Task&lt;TResult&gt;</code> ，它们代表函数的状态机完成。但异步函数是可以返回  <code>void</code>  的。实现异步事件处理程序时，C# 编译器允许你利用这个特殊情况简化编码。但经常需要在事件处理方法中执行 I/O 操作，比如在用户点击 UI 元素来打开并读取文件时。为了保持 UI 的可响应性，这个 I/O 应该以异步函数返回  <code>void</code>  的事件处理方法中写这样的代码，C# 编译器就要允许异步函数返回  <code>void</code> ，这样才能利用  <code>await</code>  操作符执行不阻塞的 I/O 操作。编译器仍然为返回  <code>void</code>  的异步函数创建状态机，但不再创建  <code>Task</code>  对象，因为创建了也没法使用。所以，没有办法知道返回  <code>void</code>  的异步函数的状态机在什么时候运行完毕。</p>\n<h2 id=\"async-functions-in-the-framework-class-library\"><a class=\"anchor\" href=\"#async-functions-in-the-framework-class-library\">#</a> Async Functions in the Framework Class Library</h2>\n<blockquote>\n<p>Personally, I love async functions because they are relatively easy to learn, simple to use, and they  are supported by many types in the FCL. It is easy to identify async functions because, by convention,  Async is suffixed onto the method’s name. In the Framework Class Library (FCL), many of the types  that offer I/O operations offer XxxAsync methods.6 Here are some examples.</p>\n<ul>\n<li>\n<p>All the System.IO.Stream-derived classes offer ReadAsync, WriteAsync, FlushAsync, and  CopyToAsync methods.</p>\n</li>\n<li>\n<p>All the System.IO.TextReader-derived classed offer ReadAsync, ReadLineAsync, ReadToEndAsync, and ReadBlockAsync methods. And the System.IO.TextWriter-derived classes  offer WriteAsync, WriteLineAsync, and FlushAsync methods.</p>\n</li>\n<li>\n<p>The System.Net.Http.HttpClient class offers GetAsync, GetStreamAsync, GetByteArrayAsync, PostAsync, PutAsync, DeleteAsync, and many more.</p>\n</li>\n<li>\n<p>All System.Net.WebRequest-derived classes (including FileWebRequest, FtpWebRequest,  and HttpWebRequest) offer GetRequestStreamAsync and GetResponseAsync methods.</p>\n</li>\n<li>\n<p>The System.Data.SqlClient.SqlCommand class offers ExecuteDbDataReaderAsync,  ExecuteNonQueryAsync, ExecuteReaderAsync, ExecuteScalarAsync, and ExecuteXmlReaderAsync methods.</p>\n</li>\n<li>\n<p>Tools (such as SvcUtil.exe) that produce web service proxy types also generate XxxAsync methods.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>For anyone who has been working with earlier versions of the .NET Framework, you may be familiar with some other asynchronous programming models that it offered. There is the programming  model that used BeginXxx and EndXxx methods along with an IAsyncResult interface. And there  is the event-based programming model that also had XxxAsync methods (that did not return Task objects) and invoked event handler methods when an asynchronous operation completed. These two  asynchronous programming models are now considered obsolete and the new model using Task objects is the preferred model.</p>\n</blockquote>\n<blockquote>\n<p>While looking through the FCL, you might notice some classes that are lacking XxxAsync methods  and instead only offer BeginXxx and EndXxx methods. This is mostly due to Microsoft not having  the time to update these classes with the new methods. In the future, Microsoft should be enhancing  these classes so that they fully support the new model. However, until they do, there is a helper method  that you can use to adapt the old BeginXxx and EndXxx model to the new Task-based model.</p>\n</blockquote>\n<blockquote>\n<p>Earlier I showed the code for a client application that makes a request over a named pipe. Let me  show the server side of this code now.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pipe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NamedPipeServerStream</span><span class=\"token punctuation\">(</span>c_pipeName<span class=\"token punctuation\">,</span> PipeDirection<span class=\"token punctuation\">.</span>InOut<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> PipeTransmissionMode<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">,</span> PipeOptions<span class=\"token punctuation\">.</span>Asynchronous <span class=\"token operator\">|</span> PipeOptions<span class=\"token punctuation\">.</span>WriteThrough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Asynchronously accept a client connection</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// NOTE: NamedPipServerStream uses the old Asynchronous Programming Model (APM) </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// I convert the old APM to the new Task model via TaskFactory's FromAsync method</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">FromAsync</span><span class=\"token punctuation\">(</span>pipe<span class=\"token punctuation\">.</span>BeginWaitForConnection<span class=\"token punctuation\">,</span> pipe<span class=\"token punctuation\">.</span>EndWaitForConnection<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Start servicing the client, which returns immediately because it is asynchronous</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token function\">ServiceClientRequestAsync</span><span class=\"token punctuation\">(</span>pipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The NamedPipeServerStream class has BeginWaitForConnection and EndWaitForConnection methods defined, but it does not yet have a WaitForConnectionAsync method defined. Hopefully  this method will be added in a future version of the FCL. However, all is not lost, because, as you see  in the preceding code, I call TaskScheduler’s FromAsync method, passing into it the names of the  BeginXxx and EndXxx methods, and then FromAsync internally creates a Task object that wraps  these methods. Now I can use the Task object with the await operator.</p>\n</blockquote>\n<blockquote>\n<p>For the old event-based programming model, the FCL does not include any helper methods to  adapt this model into the new Task-based model. So you have to hand-code it. Here is code demonstrating how to wrap a WebClient (which uses the event-based programming model) with a TaskCompletionSource so it can be awaited on in an async function.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">AwaitWebClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Uri</span> uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// The System.Net.WebClient class supports the Event-based Asynchronous Pattern</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> wc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Create the TaskCompletionSource and its underlying Task object</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tcs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// When a string completes downloading, the WebClient object raises the</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// DownloadStringCompleted event, which completes the TaskCompletionSource</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> wc<span class=\"token punctuation\">.</span>DownloadStringCompleted <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Cancelled<span class=\"token punctuation\">)</span> tcs<span class=\"token punctuation\">.</span><span class=\"token function\">SetCanceled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> tcs<span class=\"token punctuation\">.</span><span class=\"token function\">SetException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">else</span> tcs<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// Start the asynchronous operation</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> wc<span class=\"token punctuation\">.</span><span class=\"token function\">DownloadStringAsync</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// Now, we can the TaskCompletionSource’s Task and process the result as usual</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tcs<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// Process the resulting string (if desired)...</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：异步函数很容易分辨，因为规范要求为方法名附加  <code>Async</code>  后缀。在 FCL 中，支持 I/O 操作的许多类型都提供了  <code>XxxAsync</code>  方法。用过早起版本的 .NET Framework 的开发人员应该熟悉它提供的其他异步编程模型。有一个编程模型使用  <code>BeginXxx/EndXxx</code>  方法和  <code>IAsyncResult</code>  接口。还有一个基于事件的编程模型，它也提供了  <code>XxxAsync</code>  方法 (不返回  <code>Task</code>  对象)，能在异步操作完成时调用事件处理程序。现在这两个异步编程模型已经过时，使用  <code>Task</code>  的新模型才是你的首要选择。当前，FCL 的一些类缺乏  <code>XxxAsync</code>  方法，只提供了  <code>BeginXxx</code>  和  <code>EndXxx</code>  方法。这主要是由于 Microsoft 没有时间用新方法更新这些类。Microsoft 将来会增强这些类，使其完全支持新模型。但在此之前，有一个辅助方法可将旧的  <code>BeginXxx</code>  和  <code>EndXxx</code>  方法转变成新的、基于 <code>Task</code>  的模型。调用  <code>TaskFactory</code>  的  <code>FromAsync</code>  方法，向它传递  <code>BeginXxx</code>  和  <code>EndXxx</code>  方法的名称。然后， <code>FromAsync</code>  内部创建一个  <code>Task</code>  对象来包装这些方法。现在就可以随同  <code>await</code>  操作符使用  <code>Task</code>  对象了。FCL 没有提供任何辅助方法将旧的、基于事件的编程模型改编成新的、基于  <code>Task</code>  的模型。所以只能采用硬编码的方式。</p>\n<h2 id=\"async-functions-and-exception-handling\"><a class=\"anchor\" href=\"#async-functions-and-exception-handling\">#</a> Async Functions and Exception Handling</h2>\n<blockquote>\n<p>When a Windows device driver is processing an asynchronous I/O request, it is possible for something  to go wrong, and Windows will need to inform your application of this. For example, while sending bytes or waiting for bytes to come in over the network, a timeout could expire. If the data does  not come in time, the device driver will want to tell you that the asynchronous operation completed  with an error. To accomplish this, the device driver posts the completed IRP to the CLR’s thread pool  and a thread pool thread will complete the Task object with an exception. When your state machine  method is resumed, the await operator sees that the operation failed and throws this exception.</p>\n</blockquote>\n<blockquote>\n<p>In Chapter 27, I discussed how Task objects normally throw an AggregateException, and  then you’d query this exception’s InnerExceptions property to see the real exception(s) that occurred. However, when using await with a Task, the first inner exception is thrown instead of an AggregateException.8 This was done to give you the programming experience you expect. Also,  without this, you’d have to catch AggregateException throughout your code, check the inner exception and either handle the exception or re-throw it. This would be very cumbersome.</p>\n</blockquote>\n<blockquote>\n<p>If your state machine method experiences an unhandled exception, then the Task object representing your async function completes due to the unhandled exception. Any code waiting for this  Task object to complete will see the exception. However, it is also possible for an async function to  have a void return type. In this case, there is no way for a caller to discover the unhandled exception.  So, when a void-returning async function throws an unhandled exception, the compiler-generated  code catches it and causes it to be rethrown using the caller’s synchronization context (discussed  later). If the caller executed via a GUI thread, the GUI thread will eventually rethrow the exception. If  the caller executed via a non-GUI thread, some thread pool thread will eventually rethrow the exception. Usually, rethrowing these exceptions causes the whole process to terminate.</p>\n</blockquote>\n<p>💡小结：一个线程池线程会完成  <code>Task</code>  对象并设置异常。你的状态机方法恢复时， <code>await</code>  操作符发现操作失败并引发该异常。 <code>Task</code>  对象通常抛出一个  <code>AggregateException</code> ，可查询该异常的  <code>InnerExceptions</code>  属性来查看真正发生了什么异常。但将  <code>await</code>  用于  <code>Task</code>  时，抛出的是第一个内部异常而不是  <code>AggregateException</code> 。如果状态机出现未处理的异常，那么代表异步函数的  <code>Task</code>  对象会因为未处理的异常而完成。然后，正在等待该  <code>Task</code>  的代码会看到异常。但异步函数也可能使用了  <code>void</code>  返回类型，这时调用者就没有办法发现未处理的异常。所以，当返回  <code>void</code>  的异步函数抛出未处理的异常时，编译器生成的代码将捕捉它，并使用调用者的同步上下文 (稍后讨论) 重新抛出它。如果调用者通过 GUI 线程执行， GUI 线程最终将重新抛出异常。重新抛出这种异常通常造成整个进程终止。</p>\n<h2 id=\"other-async-function-features\"><a class=\"anchor\" href=\"#other-async-function-features\">#</a> Other Async Function Features</h2>\n<blockquote>\n<p>In this section, I’d like to share with you some additional features related to async functions. Microsoft  Visual Studio has great support for debugging async functions. When the debugger is stopped on an  await operator, stepping over (F10) will actually break into the debugger when the next statement is  reached after the operation completes. This code might even execute on a different thread than the  one that initiated the operation! This is incredibly useful and simplifies debugging substantially.</p>\n</blockquote>\n<blockquote>\n<p>Also, if you accidentally step into (F11), an async function, you can step out (Shift+F11) of the function to get back to the caller; you must do this while on the opening brace of the async function. After you pass the open brace, step out (Shift+F11) won’t break until the async function runs all the way  to completion. If you need to debug the calling method before the state machine runs to completion,  put a breakpoint in the calling method and just run (F5) to it.</p>\n</blockquote>\n<blockquote>\n<p>Some asynchronous operations execute quickly and therefore complete almost instantaneously.  When this happens, it is inefficient to suspend the state machine and then have another thread immediately resume the state machine; it is much more efficient to have the state machine just continue  its execution. Fortunately, the await operator’s compiler-generated code does check for this. If an  asynchronous operation completes just before the thread would return, the thread does not return  and instead, it just executes the next line of code.</p>\n</blockquote>\n<blockquote>\n<p>This is all fine and good but occasionally, you might have an async function that performs an  intensive amount of processing before initiating an asynchronous operation. If you invoke the function via your app’s GUI thread, your user interface will become non-responsive to the user. And, if the  asynchronous operation completes synchronously, then your user-interface will be non-responsive  even longer. So, if you want to initiate an async function from a thread other than the thread that calls  it, you can use Task’s static Run method as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Task.Run is called on the GUI thread</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// This code runs on a thread pool thread</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// TODO: Do intensive compute-bound processing here...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">await</span> <span class=\"token function\">XxxAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initiate asynchronous operation</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Do more processing here...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>This code demonstrates another C# feature: async lambda expressions. You see, you can’t just put  an await operator inside the body of a regular lambda expression, because the compiler wouldn’t  know how to turn the method into a state machine. But placing async just before the lambda expression causes the compiler to turn the lambda expression into a state machine method that returns a  Task or Task, which can then be assigned to any Func delegate variable whose return  type is Task or Task.</p>\n</blockquote>\n<blockquote>\n<p>When writing code, it is very easy to invoke an async function, forgetting to use the await operator; the following code demonstrates.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">OuterAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">InnerAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Oops, forgot to put the await operator on this line!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Code here continues to execute while InnerAsyncFunction also continues to execute...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">InnerAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Code in here not important */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Fortunately, when you do this, the C# compiler issues the following warning: Because this call  is not awaited, execution of the current method continues before the call is  completed. Consider applying the 'await' operator to the result of the call. This is nice but on rare occasions, you actually don’t care when InnerAsyncFunction completes,  and you do want to write the preceding code and not have the compiler issue a warning.</p>\n</blockquote>\n<blockquote>\n<p>To quiet the compiler warning, you can simply assign the Task returned from InnerAsyncFunction to a variable and then ignore the variable.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">OuterAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> noWarning <span class=\"token operator\">=</span> <span class=\"token function\">InnerAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I intend not to put the await operator on this line.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Code here continues to execute while InnerAsyncFunction also continues to execute...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Or, I prefer to define an extension method that looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MethodImpl</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>MethodImplOptions<span class=\"token punctuation\">.</span>AggressiveInlining<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Causes compiler to optimize the call away</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">NoWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* No code goes in here */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And then I can use it like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">OuterAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">InnerAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">NoWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I intend not to put the await operator on this line.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Code here continues to execute while InnerAsyncFunction also continues to execute...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>One of the truly great features of performing asynchronous I/O operations is that you can initiate  many of them concurrently so that they are all executing in parallel. This can give your application a phenomenal performance boost. I never showed you the code that started my named pipe server  and then made a bunch of client requests to it. Let me show that code now.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Start the server, which returns immediately because </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// it asynchronously waits for client requests</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">StartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This returns void, so compiler warning to deal with</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Make lots of async client requests; save each client's Task&lt;String></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> requests <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> requests<span class=\"token punctuation\">.</span>Capacity<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> requests<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">IssueClientRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Request #\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Asynchronously wait until all client requests have completed</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// NOTE: If 1+ tasks throws, WhenAll rethrows the last-throw exception</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> responses <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Process all the responses</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> responses<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>This code starts the named pipe server so that it is listening for client requests and then, in a for loop, it initiates 10,000 client requests as fast as it possibly can. Each time IssueClientRequestAsync is called, it returns a Task object, which I then add to a collection. Now, the named  pipe server is processing these client requests as fast as it possibly can using thread pool threads that  will try to keep all the CPUs on the machine busy.10 As the server completes processing each request;  each request’s Task object completes with the string response returned from the server.</p>\n</blockquote>\n<blockquote>\n<p>In the preceding code, I want to wait until all the client requests have gotten their response before  processing their results. I accomplish this by calling Task’s static WhenAll method. Internally, this  method creates a Task object that completes after all of the List’s Task objects have  completed. I then await the Task object so that the state machine continues execution after all of the tasks have completed. After all the tasks have completed, I loop through all the  responses at once and process them (call Console.WriteLine).</p>\n</blockquote>\n<blockquote>\n<p>Perhaps you’d prefer to process each response as it happens rather than waiting for all of them to  complete. Accomplishing this is almost as easy by way of Task’s static WhenAny method. The revised  code looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Start the server, which returns immediately because </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// it asynchronously waits for client requests</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">StartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Make lots of async client requests; save each client's Task&lt;String></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> requests <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> requests<span class=\"token punctuation\">.</span>Capacity<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> requests<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">IssueClientRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Request #\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Continue AS EACH task completes</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Process each completed response sequentially</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> requests<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Remove the completed task from the collection</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Process a single client's response</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Here, I create a while loop that iterates once per client request. Inside the loop I await Task’s  WhenAny method, which returns one Task object at a time, indicating a client request that  has been responded to by the server. After I get this Task object, I remove it from the collection, and then I query its result in order to process it (pass it to Console.WriteLine).</p>\n</blockquote>\n<p>💡小结：有的异步操作执行速度很快，几乎瞬间就能完成。在这种情况下，挂起状态机并让另一个线程立即恢复状态机就显得不太划算。更有效的做法是让状态机继续执行。幸好，编译器为  <code>await</code>  操作符生成的代码能检测到这个问题。如果异步操作在线程返回前完成，就阻止线程返回，直接由它执行下一行代码。到目前为止一切都很完美，但有时异步函数需要先执行密集的、计算限制的处理，再发起异步操作。如果通过应用程序的 GUI 线程来调用函数，UI 就会突然失去响应，好长时间才能恢复。另外，如果操作以同步方式完成，那么 UI 失去响应的时间还会变得更长。在这种情况下，可利用  <code>Task</code>  的静态  <code>Run</code>  方法从非调用线程的其他线程中执行异步函数。 C# 的异步 lambda 表达式不能只在普通的 lambda 表达式主体中添加  <code>await</code>  操作符完事，因为编译器不知道如何将方法转换成状态机。但同时在 lambda 表达式前面添加  <code>async</code> ，编译器就能将 lambda 表达式转换成状态机方法来返回一个  <code>Task</code>  或  <code>Task&lt;TResult&gt;</code> ，并可赋给返回类型为  <code>Task</code>  或  <code>Task&lt;TResult&gt;</code>  的任何  <code>Func</code>  委托变量。异步 I/O 操作最好的一个地方是可以同时发起许多这样的操作，让它们并行执行，从而显著提升应用程序的性能。</p>\n<h2 id=\"applications-and-their-threading-models\"><a class=\"anchor\" href=\"#applications-and-their-threading-models\">#</a> Applications and Their Threading Models</h2>\n<blockquote>\n<p>The .NET Framework supports several different kinds of application models, and each application  model can impose its own threading model. Console applications and Windows Services (which  are really console applications; you just don’t see the console) do not impose any kind of threading  model; that is, any thread can do whatever it wants when it wants.</p>\n</blockquote>\n<blockquote>\n<p>However, GUI applications, including Windows Forms, Windows Presentation Foundation (WPF),  Silverlight, and Windows Store apps impose a threading model where the thread that created a UI  element is the only thread allowed to update that UI element. It is common for the GUI thread to  spawn off an asynchronous operation so that the GUI thread doesn’t block and stop responding to  user input like mouse, keystroke, pen, and touch events. However, when the asynchronous operation  completes, a thread pool thread completes the Task object resuming the state machine.</p>\n</blockquote>\n<blockquote>\n<p>For some application models, this is OK and even desired because it’s efficient. But for some other  application models, like GUI applications, this is a problem, because your code will throw an exception  if it tries to update UI elements via a thread pool thread. Somehow, the thread pool thread must have  the GUI thread update the UI elements.</p>\n</blockquote>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> applications allow any thread to do whatever it wants. When a thread pool thread starts  to process a client’s request, it can assume the client’s culture (System.Globalization.CultureInfo), allowing the web server to return culture-specific formatting for numbers, dates, and times.11 In addition, the web server can assume the client’s identity (System.Security.Principal. IPrincipal), so that the server can access only the resources that the client is allowed to access.  When a thread pool thread spawns an asynchronous operation, it may be completed by another  thread pool thread, which will be processing the result of an asynchronous operation. While this work is being performed on behalf of the original client request, the culture and identity needs to  “flow” to the new thread pool thread so any additional work done on behalf of the client is performed using the client’s culture and identity information.</p>\n</blockquote>\n<blockquote>\n<p>Fortunately, the FCL defines a base class, called System.Threading.SynchronizationContext,  which solves all these problems. Simply stated, a SynchronizationContext-derived object connects an application model to its threading model. The FCL defines several classes derived from  SynchronizationContext, but usually you will not deal directly with these classes; in fact, many of  them are not publicly exposed or documented.</p>\n</blockquote>\n<blockquote>\n<p>For the most part, application developers do not need to know anything about the SynchronizationContext class. When you await a Task, the calling thread’s SynchronizationContext object is obtained. When a thread pool thread completes the Task, the SynchronizationContext object is used, ensuring the right threading model for your application model. So, when a GUI thread  awaits a Task, the code following the await operator is guaranteed to execute on the GUI thread as  well, allowing that code to update UI elements. For an <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> application, the code following the  await operator is guaranteed to execute on a thread pool thread that has the client’s culture and  principal information associated with it.</p>\n</blockquote>\n<blockquote>\n<p>Most of the time, having a state machine resume using the application model’s threading model is  phenomenally useful and convenient. But, on some occasions, this can get you into trouble. Here is an  example that causes a WPF application to deadlock.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWpfWindow</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Window</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">MyWpfWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"WPF Window\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnActivated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Querying the Result property prevents the GUI thread from returning; </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// the thread blocks waiting for the result</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">String</span> http <span class=\"token operator\">=</span> <span class=\"token function\">GetHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Get the string synchronously!</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnActivated</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Issue the HTTP request and let the thread return from GetHttp</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">HttpResponseMessage</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://Wintellect.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// We never get here: The GUI thread is waiting for this method to finish but this method </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// can't finish because the GUI thread is waiting for it to finish --> DEADLOCK!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> msg<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Developers creating class libraries definitely need to be aware of the SynchronizationContext class so they can write high-performance code that works with all application models. Because a lot  of class library code is application model agnostic, we want to avoid the additional overhead involved in using a SynchronizationContext object. In addition, class library developers should do everything in their power to help application developers avoid deadlock situations. To solve both of these  problems, both the Task and Task classes offer a method called ConfigureAwait whose  signature looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Task defines this method:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ConfiguredTaskAwaitable</span> <span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> continueOnCapturedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Task&lt;TResult> defines this method:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ConfiguredTaskAwaitable<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> continueOnCapturedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Passing true to this method gives you the same behavior as not calling the method at all. But, if  you pass false, the await operator does not query the calling thread’s SynchronizationContext object and, when a thread pool thread completes the Task, it simply completes it and the code after  the await operator executes via the thread pool thread.</p>\n</blockquote>\n<blockquote>\n<p>Even though my GetHttp method is not class library code, the deadlock problem goes away if I  add calls to ConfigureAwait. Here is the modified version of my GetHttp method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Issue the HTTP request and let the thread return from GetHttp</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">HttpResponseMessage</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://Wintellect.com/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// We DO get here now because a thread pool can execute this code </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// as opposed to forcing the GUI thread to execute it. </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> msg<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>As the preceding code shows, ConfigureAwait(false) must be applied to every Task object  you await. This is because asynchronous operations may complete synchronously and, when this  happens, the calling thread simply continues executing without returning to its caller; you never know  which operation requires ignoring the SynchronizationContext object, so you have to tell all of  them to ignore it. This also means that your class library code should be application model agnostic.</p>\n</blockquote>\n<blockquote>\n<p>Alternatively, I could re-write my GetHttp method as follows so that the whole thing executes via  a thread pool thread.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// We run on a thread pool thread now that has no SynchronizationContext on it</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">HttpResponseMessage</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://Wintellect.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// We DO get here because some thread pool can execute this code </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> msg<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this version of the code, notice that my GetHttp method is not an async function; I removed the  async keyword from the method signature, because the method no longer has an await operator in  it. On the other hand, the lambda expression I pass to Task.Run is an async function.</p>\n</blockquote>\n<p>💡小结：.NET Framework 支持几种不同的应用程序模型，而每种模型都可能引入了它自己的线程处理模型。控制台应用程序和 Windows 服务 (实际也是控制台应用程序；只是看不见控制台而已) 没有引入任何线程处理模型；换言之，任何线程可在任何时候做它想做的任何事情。但 GUI 应用程序 (包括 Windows 窗体、WPF、Silverlight 和 Windows Store 应用程序) 引入了一个线程处理模型。在这个模型中，UI 元素只能由创建它的线程更新。在 GUI 线程中，经常都需要生成一个异步操作，使 GUI 线程不至于阻塞并停止响应用户输入 (比如鼠标、按键、手写笔和触控事件)。但当异步操作完成时，是由一个线程池线程完成  <code>Task</code>  对象并恢复状态机。线程池线程生成一个异步操作后，它可能由另一个线程池线程完成，该线程将处理异步操作的结果。代表原始客户端执行工作时，语言文化和身份标识信息需要 “流向” 新的线程池线程。这样一来，代表客户端执行的任何额外的工作才能使用客户端的语言文化和身份标识信息。幸好 FCL 定义了一个名  <code>System.Threading.SynchronizationContext</code>  的基类，它解决了所有这些问题。简单地说， <code>SynchronizationContext</code>  派生对象将应用程序模型连接到它的线程处理模型。应用程序开发人员通常不需要了解关于  <code>SynchronizationContext</code>  类的任何事情。等待一个  <code>Task</code>  时会获取调用线程的  <code>SynchronizationContext</code>  对象。线程池线程完成  <code>Task</code>  后，会使用该  <code>SynchronizationContext</code>  对象，确保为应用程序模型使用正确的线程处理模型。所以，当 GUI 线程等待一个  <code>Task</code>  时， <code>await</code>  操作符后面的代码保证在 GUI 线程上执行，使代码能更新 UI 元素。对于 <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> 应用程序， <code>await</code>  后面的代码保证在关联了客户端语言文化和身份标识信息的线程池线程上执行。类库开发人员为了写高性能的代码来应对各种应用程序模型，尤其需要注意  <code>SynchronizationContext</code>  类。由于许多类库代码都要求不依赖于特定的应用程序模型，所以要避免因为使用  <code>SynchronizationContext</code>  对象而产生的额外开销。此外，类库开发人员要竭尽全力帮助应用程序开发人员防止死锁。为了解决这两方面的问题， <code>Task</code>  和  <code>Task&lt;TResult&gt;</code>  类提供了一个  <code>ConfigureAwait</code>  方法。向方法传递  <code>true</code>  相当于根本没有调用方法。但如果传递  <code>false</code> ， <code>await</code>  操作符就不查询调用线程的  <code>SynchronizationContext</code>  对象。当线程池线程结束  <code>Task</code>  时会直接完成它， <code>await</code>  操作符后面的代码通过线程池线程执行。</p>\n<h2 id=\"implementing-a-server-asynchronously\"><a class=\"anchor\" href=\"#implementing-a-server-asynchronously\">#</a> Implementing a Server Asynchronously</h2>\n<blockquote>\n<p>From talking to many developers over the years, I’ve discovered that very few of them are aware that  the .NET Framework has built-in support allowing you to build asynchronous servers that scale really  well. In this book, I can’t explain how to do this for every kind of server, but I can list what you should  look for in the MSDN documentation.</p>\n<ul>\n<li>\n<p>To build asynchronous <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> Web Forms: in your .aspx file, add “Async=true” to your page  directive and look up the System.Web.UI.Page’s RegisterAsyncTask method.</p>\n</li>\n<li>\n<p>To build an asynchronous <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> MVC controller: derive your controller class from  System.Web.Mvc.AsyncController and simply have your action method return a  Task.</p>\n</li>\n<li>\n<p>To build an asynchronous <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> handler: derive your class from System.Web.HttpTaskAsyncHandler and then override its abstract ProcessRequestAsync method.</p>\n</li>\n<li>\n<p>To build an asynchronous WCF service: implement your service as an async function and have  it return Task or Task.</p>\n</li>\n</ul>\n</blockquote>\n<p>💡小结：.NET Framework 其实内建了对伸缩性很好的一些异步服务器的支持。要构建异步 <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> Web 窗体，在 .aspx 文件中添加  <code>Async=&quot;true&quot;</code>  网页指令，并参考  <code>System.Web.UI.Page</code>  的  <code>RegisterAsyncTask</code>  方法。要构建异步 <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> MVC 控制器，使你的控制器类从  <code>System.Web.Mvc.AsyncController</code>  派生，让操作方法返回一个  <code>Task&lt;ActionResult&gt;</code>  即可。要构建异步 <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> 处理程序，使你的类从  <code>System.Web.HttpTaskAsyncHandler</code>  派生，重写其抽象  <code>ProcessRequestAsync</code>  方法。要构建异步 WCF 服务，将服务作为异步函数实现，让它返回  <code>Task</code>  或  <code>Task&lt;TResult&gt;</code> 。</p>\n<h2 id=\"canceling-io-operations\"><a class=\"anchor\" href=\"#canceling-io-operations\">#</a> Canceling I/O Operations</h2>\n<blockquote>\n<p>In general, Windows doesn’t give you a way to cancel an outstanding I/O operation. This is a feature  that many developers would like, but it is actually quite hard to implement. After all, if you make a  request from a server and then you decide you don’t want the response anymore, there is no way to  tell the server to abandon your original request. The way to deal with this is just to let the bytes come  back to the client machine and then throw them away. In addition, there is a race condition here— your request to cancel the request could come just as the server is sending the response. Now what  should your application do? You’d need to handle this potential race condition occurring in your own  code and decide whether to throw the data away or act on it.</p>\n</blockquote>\n<blockquote>\n<p>To assist with this, I recommend you implement a WithCancellation extension method that  extends Task (you need a similar overload that extends Task too) as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Void</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Because there isn't a non-generic TaskCompletionSource class.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">WithCancellation</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> originalTask<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Create a Task that completes when the CancellationToken is canceled</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cancelTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span>Void<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// When the CancellationToken is canceled, complete the Task</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> t <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TaskCompletionSource<span class=\"token operator\">&lt;</span>Void<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TrySetResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cancelTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Create a Task that completes when either the original or </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// CancellationToken Task completes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">Task</span> any <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>originalTask<span class=\"token punctuation\">,</span> cancelTask<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// If any Task completes due to CancellationToken, throw OperationCanceledException</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>any <span class=\"token operator\">==</span> cancelTask<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">)</span> ct<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfCancellationRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// await original task (synchronously); if it failed, awaiting it </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// throws 1st inner exception instead of AggregateException</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> originalTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Now, you can call this extension method as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Create a CancellationTokenSource that cancels itself after # milliseconds</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// To cancel sooner, call cts.Cancel()</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ct <span class=\"token operator\">=</span> cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// I used Task.Delay for testing; replace this with another method that returns a Task</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithCancellation</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task cancelled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：Windows 一般没有提供取消未完成 I/O 操作的途径。这是许多开发人员都想要的功能，实现起来却很困难。毕竟，如果向服务器请求了 1000 个字节，然后决定不再需要这些字节，那么其实没有办法告诉服务器忘掉你的请求。在这种情况下，只能让字节照常返回，再将它们丢弃。此外，这里还会发生竞态条件 ———— 取消请求的请求可能正好在服务器发送响应的时候到来。这时应该怎么办？所以，要在代码中处理这种潜在的竞态条件，决定是丢弃还是使用数据。为此，作者建议实现一个  <code>WithCancellation</code>  扩展方法来扩展  <code>Task&lt;TResult&gt;</code> (需要类似的重载版本来扩展  <code>Task</code> )。</p>\n<h2 id=\"some-io-operations-must-be-done-synchronously\"><a class=\"anchor\" href=\"#some-io-operations-must-be-done-synchronously\">#</a> Some I/O Operations Must Be Done Synchronously</h2>\n<blockquote>\n<p>The Win32 API offers many functions that execute I/O operations. Unfortunately, some of these methods do not let you perform the I/O asynchronously. For example, the Win32 CreateFile method  (called by FileStream’s constructor) always executes synchronously. If you’re trying to create or  open a file on a network server, it could take several seconds before CreateFile returns—the calling  thread is idle all the while. An application designed for optimum responsiveness and scalability would  ideally call a Win32 function that lets you create or open a file asynchronously so that your thread is  not sitting and waiting for the server to reply. Unfortunately, Win32 has no CreateFile-like function  to let you do this, and therefore the FCL cannot offer an efficient way to open a file asynchronously.  Windows also doesn’t offer functions to asynchronously access the registry, access the event log, get  a directory’s files/subdirectories, or change a file’s/directory’s attributes, to name just a few.</p>\n</blockquote>\n<blockquote>\n<p>Here is an example where this is a real problem. Imagine writing a simple UI control that allows  the user to type a file path and provides automatic completion (similar to the common File Open  dialog box). The control must use separate threads to enumerate directories looking for files because Windows doesn’t offer any functions to enumerate files asynchronously. As the user continues  to type in the UI control, you have to use more threads and ignore the results from any previously  spawned threads. With Windows Vista, Microsoft introduced a new Win32 function called CancelSynchronousIO. This function allows one thread to cancel a synchronous I/O operation that is being  performed by another thread. This function is not exposed by the FCL, but you can also P/Invoke to t if you want to take advantage of it from a desktop application implemented with managed code. I  show the P/Invoke signature near the end of this chapter.</p>\n</blockquote>\n<blockquote>\n<p>The point I want you to take away though is that many people think that synchronous APIs are  easier to work with, and in many cases this is true. But in some cases, synchronous APIs make things  much harder.</p>\n</blockquote>\n<blockquote>\n<p>Due to all the problems that exist when executing I/O operations synchronously, when designing  the Windows Runtime, the Windows team decided to expose all methods that perform I/O asynchronously. So, now there is a Windows Runtime API to open files asynchronously; see Windows. Storage.StorageFile’s OpenAsync method. In fact, the Windows Runtime does not offer any APIs  allowing you to perform an I/O operation synchronously. Fortunately, you can use the C#’s async  function feature to simplify your coding when calling these APIs.</p>\n</blockquote>\n<h3 id=\"filestream-specific-issues\"><a class=\"anchor\" href=\"#filestream-specific-issues\">#</a> FileStream-Specific Issues</h3>\n<blockquote>\n<p>When you create a FileStream object, you get to specify whether you want to communicate using  synchronous or asynchronous operations via the FileOptions.Asynchronous flag (which is equivalent to calling the Win32 CreateFile function and passing into it the FILE_FLAG_OVERLAPPED flag). If you do not specify this flag, Windows performs all operations against the file synchronously.  Of course, you can still call FileStream’s ReadAsync method, and to your application, it looks as if  the operation is being performed asynchronously, but internally, the FileStream class uses another  thread to emulate asynchronous behavior; use of this thread is wasteful and hurts performance.</p>\n</blockquote>\n<blockquote>\n<p>On the other hand, you can create a FileStream object by specifying the FileOptions.Asynchronous flag. Then you can call FileStream’s Read method to perform a synchronous operation.  Internally, the FileStream class emulates this behavior by starting an asynchronous operation and  then immediately puts the calling thread to sleep until the operation is complete. This is also inefficient, but it is not as inefficient as calling ReadAsync by using a FileStream constructed without the  FileOptions.Asynchronous flag.</p>\n</blockquote>\n<blockquote>\n<p>So, to summarize, when working with a FileStream, you must decide up front whether you intend to perform synchronous or asynchronous I/O against the file and indicate your choice by specifying the FileOptions.Asynchronous flag (or not). If you specify this flag, always call ReadAsync. If  you do not specify this flag, always call Read. This will give you the best performance. If you intend to  make some synchronous and some asynchronous operations against the FileStream, it is more efficient to construct it using the FileOptions.Asynchronous flag. Alternatively, you can create two  FileStream objects over the same file; open one FileStream for asynchronous I/O and open the  other FileStream for synchronous I/O. Note that the System.IO.File’s class offers helper methods (Create, Open, and OpenWrite) that create and return FileStream objects. Internally, none  of these methods specify the FileOptions.Asynchronous flag, so you should avoid using these  methods if you want to create a responsive or scalable application.</p>\n</blockquote>\n<blockquote>\n<p>You should also be aware that the NTFS file system device driver performs some operations  synchronously no matter how you open the file. For more information about this, see http:// <span class=\"exturl\" data-url=\"aHR0cDovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9kZWZhdWx0LmFzcHg/c2NpZD1rYiUzQmVuLXVzJTNCMTU2OTMy\">support.microsoft.com/default.aspx?scid=kb%3Ben-us%3B156932</span>.</p>\n</blockquote>\n<p>💡小结：Win32 API 提供了许多 I/O 函数。遗憾的是，有的方法不允许以异步方式执行 I/O。理想情况下，注重性能和伸缩性的应用程序应该调用一个允许以异步方式创建或打开文件的 Win32 函数，使线程不至于傻乎乎地等着服务器响应。遗憾的是，Win32 没有提供一个允许这样做且功能和  <code>CreateFile</code>  相同的函数。因此，FCL 不能以异步方式高效地打开文件。另外，Windows 也没有提供函数以异步方式访问注册表、访问事件日志、获取目录的文件 / 子目录或者更改文件 / 目录的属于等等。从 Windows Vista 起，Microsoft 引入了一个名为  <code>CancelSynchronousIO</code>  的 Win32 函数。它允许一个线程取消正在由另一个线程执行的同步 I/O 操作。FCL 没有公开该函数，但要在用托管代码实现的桌面应用程序中利用它，可以 P/Invoke 它。考虑到同步 I/O 操作的各种问题，在设计 Windows Runtime 的时候，Windows 团队决定公开以异步方式执行 I/O 的所有方法。所以，现在可以用一个 Windows Runtime API 来异步地打开文件了，详情参见  <code>Windows.Storage.StorageFile</code>  的  <code>OpenAsync</code>  方法。事实上， Windows Runtime 没有提供以同步方式执行 I/O 操作的任何 API。幸好，可以使用 C# 的异步函数功能简化调用这些 API 时的编码。创建  <code>FileStream</code>  对象时，可通过  <code>FileOptions.Asynchronous</code>  标志指定以同步还是异步方式进行通信。这等价于调用 Win32  <code>CreateFile</code>  函数并传递  <code>FILE_FLAG_OVERLAPPED</code>  标志。如果不指定这个标志，Windows 以同步方式执行所有文件操作。当然，仍然可以调用  <code>FileStream</code>  的  <code>ReadAsync</code>  方法。对于你的应用程序，操作表面上异步执行，但  <code>FileStream</code>  类是在内部用另一个线程模拟异步行为。这个额外的线程纯属浪费，而且会影响到性能。另一方面，可在创建  <code>FileStream</code>  对象时指定  <code>FileOptions.Asynchronous</code>  标志。然后，可以调用  <code>FileStream</code>  的  <code>Read</code>  方法执行一个同步操作。在内部， <code>FileStream</code>  类会开始一个异步操作，然后立即使调用线程进入睡眠状态，直至操作完成才会唤醒，从而模拟同步行为。这同样效率低下。但相较于不指定  <code>FileOPtions.Asynchronous</code>  标志来构建一个  <code>FileStream</code>  并调用  <code>ReadAsync</code> ，它的效率还是要高上那么一点点的。总之，使用  <code>FileStream</code>  时必须先想好是同步还是异步执行文件 I/O，并指定 (或不指定)  <code>FileOptions.Asynchronous</code>  标志来指明自己的选择。如果指定了该标志，就总是调用  <code>ReadAsync</code> 。 如果没有指定这个标志，就总是调用  <code>Read</code> 。这样可以获得最佳的性能。如果想先对  <code>FileStream</code>  执行一些同步操作，再执行一些异步操作，那么更高效的做法是使用  <code>FileOptions.Asynchronous</code>  标志来构造它。另外，也可针对同一个文件创建两个  <code>FileStream</code>  对象；打开一个  <code>FileStream</code>  进行异步 I/O，打开另一个  <code>FileStream</code>  进行同步 I/O。注意， <code>System.IO.File</code>  类提供了辅助方法 ( <code>Create</code> ， <code>Open</code>  和  <code>OpenWrite</code> ) 来创建并返回  <code>FileStream</code>  对象。但所有这些方法都没有在内部指定  <code>FileOptions.Asynchronous</code>  标志，所以为了实现响应灵敏的、可伸缩的应用程序，应避免使用这些方法。还要注意，NTFS 文件系统设备驱动程序总是以同步方式执行一些操作，不管具体如何打开文件。</p>\n<h2 id=\"io-request-priorities\"><a class=\"anchor\" href=\"#io-request-priorities\">#</a> I/O Request Priorities</h2>\n<blockquote>\n<p>In Chapter 26, “Thread Basics,” I showed how setting thread priorities affects how threads are scheduled. However, threads also perform I/O requests to read and write data from various hardware  devices. If a low-priority thread gets CPU time, it could easily queue hundreds or thousands of I/O  requests in a very short time. Because I/O requests typically require time to process, it is possible  that a low-priority thread could significantly affect the responsiveness of the system by suspending  high-priority threads, which prevents them from getting their work done. Because of this, you can  see a machine become less responsive when executing long-running low-priority services such as  disk defragmenters, virus scanners, content indexers, and so on.</p>\n</blockquote>\n<blockquote>\n<p>Windows allows a thread to specify a priority when making I/O requests. For more details about  I/O priorities, refer to the white paper at <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3doZGMvZHJpdmVyL3ByaW9yaXR5aW8ubXNweA==\">http://www.microsoft.com/whdc/driver/priorityio.mspx</span>.  Unfortunately, the FCL does not include this functionality yet; hopefully, it will be added in a future  version. However, you can still take advantage of this feature by P/Invoking out to native Win32 functions. Here is the P/Invoke code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadIO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">BackgroundProcessingDisposer</span> <span class=\"token function\">BeginBackgroundProcessing</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">Boolean</span> process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BackgroundProcessingDisposer</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndBackgroundProcessing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token class-name\">Boolean</span> ok <span class=\"token operator\">=</span> <span class=\"token return-type class-name\">process</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">?</span></span> <span class=\"token function\">SetPriorityClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentWin32ProcessHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> start <span class=\"token punctuation\">?</span> ProcessBackgroundMode<span class=\"token punctuation\">.</span>Start <span class=\"token punctuation\">:</span> ProcessBackgroundMode<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">:</span> <span class=\"token function\">SetThreadPriority</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentWin32ThreadHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> start <span class=\"token punctuation\">?</span> ThreadBackgroundgMode<span class=\"token punctuation\">.</span>Start <span class=\"token punctuation\">:</span> ThreadBackgroundgMode<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Win32Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// This struct lets C#'s using statement end the background processing mode</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BackgroundProcessingDisposer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Boolean</span> m_process<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">BackgroundProcessingDisposer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_process <span class=\"token operator\">=</span> process<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">EndBackgroundProcessing</span><span class=\"token punctuation\">(</span>m_process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadIO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">BackgroundProcessingDisposer</span> <span class=\"token function\">BeginBackgroundProcessing</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token class-name\">Boolean</span> process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BackgroundProcessingDisposer</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndBackgroundProcessing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeBackgroundProcessing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token class-name\">Boolean</span> ok <span class=\"token operator\">=</span> <span class=\"token return-type class-name\">process</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token punctuation\">?</span></span> <span class=\"token function\">SetPriorityClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentWin32ProcessHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre> start <span class=\"token punctuation\">?</span> ProcessBackgroundMode<span class=\"token punctuation\">.</span>Start <span class=\"token punctuation\">:</span> ProcessBackgroundMode<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">:</span> <span class=\"token function\">SetThreadPriority</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentWin32ThreadHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre> start <span class=\"token punctuation\">?</span> ThreadBackgroundgMode<span class=\"token punctuation\">.</span>Start <span class=\"token punctuation\">:</span> ThreadBackgroundgMode<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Win32Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">// This struct lets C#'s using statement end the background processing mode</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BackgroundProcessingDisposer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Boolean</span> m_process<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">BackgroundProcessingDisposer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> process<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_process <span class=\"token operator\">=</span> process<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">EndBackgroundProcessing</span><span class=\"token punctuation\">(</span>m_process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>And here is code showing how to use it.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>ThreadIO<span class=\"token punctuation\">.</span><span class=\"token function\">BeginBackgroundProcessing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Issue low-priority I/O requests in here (eg: calls to ReadAsync/WriteAsync)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>You tell Windows that you want your thread to issue low-priority I/O requests by calling ThreadIO’s BeginBackgroundProcessing method. Note that this also lowers the CPU scheduling priority  of the thread. You can return the thread to making normal-priority I/O requests (and normal CPU  scheduling priority) by calling EndBackgroundProcessing or by calling Dispose on the value  returned by BeginBackgroundProcessing (as shown in the preceding code via C#’s using statement). A thread can only affect its own background processing mode; Windows doesn’t allow a  thread to change the background processing mode of another thread.</p>\n</blockquote>\n<blockquote>\n<p>If you want all threads in a process to make low-priority I/O requests and have low CPU scheduling, you can call BeginBackgroundProcessing, passing in true for the process parameter. A  process can only affect its own background processing mode; Windows doesn’t allow a thread to  change the background processing mode of another process.</p>\n</blockquote>\n<p>💡重要提示：作为开发人员，是你的责任使用这些新的后台优先级增强前台应用程序的响应能力，从而避免优先级发生反转。在存在大量普通优先级 I/O 操作的情况下，以后台优先级运行运行的线程可能延迟数秒才能过得到它的 I/O 请求结果。如果一个低优先级线程获取了一个线程同步锁，造成普通优先级线程等待，普通优先级线程可能一直等待后台优先级线程，直至低优先级 I/O 请求完成为止。你的后台优先级线程甚至不需要提交自己的 I/O 请求，就可能造成上述问题。所以，应尽量避免 (甚至完全杜绝) 在普通优先级和后台优先级线程之间使用共享的同步对象，避免普通优先级的线程因为后台优先级线程拥有的锁而阻塞，从而发生优先级反转。</p>\n<p>💡小结：第 26 章 “线程基础” 介绍了线程优先级对线程调度方式的影响。然而，线程还要执行 I/O 请求以便从各种硬件设备中读写数据。如果一个低优先级线程获得了 CPU 时间，它可以在非常短的时间里轻易地将成百上千的 I/O 请求放入队列。由于 I/O 请求一般需要时间来执行，所以一个低优先级线程可能挂起高优先级线程，使后者不能快速完成工作，从而严重影响系统的总体响应能力。正是由于这个原因，当系统执行一些耗时的低优先级服务时 (比如磁盘碎片整理程序、病毒扫描程序、内容索引程序等)，机器的响应能力可能会变得非常差。Windows 允许线程在发出 I/O 请求时指定优先级。遗憾的是，FCL 还没有包含这个功能；但未来的版本有望添加。如果现在就想使用这个功能，可以采取 P/Invoke 本机 Win32 函数的方式。线程只能影响它自己的后台处理模式；Windows 不允许线程更改另一个线程的后台处理模式。如果希望一个进程中的所有线程都发出低优先级 I/O 请求和进行低优先级的 CPU 调度，可调用  <code>BeginBackgroundProcessing</code> ，为它的  <code>process</code>  参数传递  <code>true</code>  值。一个进程只能影响它自己的后台处理模式；Windows 不允许一个线程更改另一个进程的后台处理模式。</p>\n",
            "tags": [
                "CSharp",
                "CLR-via-CSharp",
                "读书笔记",
                "C#"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/02/07/csharp/clr-via-csharp/Chapter%2027%20Compute-Bound%20Asynchronous%20Operations/",
            "url": "http://sakupinera.github.io/2023/02/07/csharp/clr-via-csharp/Chapter%2027%20Compute-Bound%20Asynchronous%20Operations/",
            "title": "CLR via C# - Chapter 27 Compute-Bound Asynchronous Operations",
            "date_published": "2023-02-06T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-27-compute-bound-asynchronous-operations\"><a class=\"anchor\" href=\"#chapter-27-compute-bound-asynchronous-operations\">#</a> Chapter 27 Compute-Bound Asynchronous Operations</h1>\n<h2 id=\"introducing-the-clrs-thread-pool\"><a class=\"anchor\" href=\"#introducing-the-clrs-thread-pool\">#</a> Introducing the CLR’s Thread Pool</h2>\n<blockquote>\n<p>As stated in the previous chapter, creating and destroying a thread is an expensive operation in terms  of time. In addition, having lots of threads wastes memory resources and also hurts performance due  to the operating system having to schedule and context switch between the runnable threads. To improve this situation, the CLR contains code to manage its own thread pool. You can think of a thread  pool as being a set of threads that are available for your application’s own use. There is one thread  pool per CLR; this thread pool is shared by all AppDomains controlled by that CLR. If multiple CLRs  load within a single process, then each CLR has its own thread pool.</p>\n</blockquote>\n<blockquote>\n<p>When the CLR initializes, the thread pool has no threads in it. Internally, the thread pool maintains  a queue of operation requests. When your application wants to perform an asynchronous operation,  you call some method that appends an entry into the thread pool’s queue. The thread pool’s code will  extract entries from this queue and dispatch the entry to a thread pool thread. If there are no threads  in the thread pool, a new thread will be created. Creating a thread has a performance hit associated  with it (as already discussed). However, when a thread pool thread has completed its task, the thread is  not destroyed; instead, the thread is returned to the thread pool, where it sits idle waiting to respond  to another request. Because the thread doesn’t destroy itself, there is no added performance hit.</p>\n</blockquote>\n<blockquote>\n<p>If your application makes many requests of the thread pool, the thread pool will try to service all of  the requests by using just this one thread. However, if your application is queuing up several requests  faster than the thread pool thread can handle them, additional threads will be created. Your application will eventually get to a point at which all of its requests can be handled by a small number of  threads, so the thread pool should have no need to create a lot of threads.</p>\n</blockquote>\n<blockquote>\n<p>If your application stops making requests of the thread pool, the pool may have a lot of threads  in it that are doing nothing. This is wasteful of memory resources. So when a thread pool thread has  been idle with nothing to do for some period of time (subject to change with different versions of  the CLR), the thread wakes itself up and kills itself to free up resources. As the thread is killing itself,  there is a performance hit. However, this probably doesn’t matter, because the thread is killing itself  because it has been idle, which means that your application isn’t performing a lot of work.</p>\n</blockquote>\n<blockquote>\n<p>The great thing about the thread pool is that it manages the tension between having a few  threads, to keep from wasting resources, and having more threads, to take advantage of multiprocessors, hyperthreaded processors, and multi-core processors. And the thread pool is heuristic. If your application needs to perform many tasks and CPUs are available, the thread pool creates more  threads. If your application’s workload decreases, the thread pool threads kill themselves.</p>\n</blockquote>\n<p>💡小结：创建和销毁线程是一个昂贵的操作，要耗费大量时间。另外，太多的线程会浪费内存资源。由于操作系统必须调度可运行的线程并执行上下文切换，所以太多的线程还对性能不利。为了改善这个情况，CLR 包含了代码来管理它自己的线程池。每 CLR 一个线程池，这个线程池由 CLR 控制的所有 AppDomain 共享。如果一个进程中加载了多个 CLR，那么每个 CLR 都有它自己的线程池。CLR 初始化时，线程池中是没有线程的。在内部，线程池维护了一个操作请求队列。应用程序执行一个异步操作时，就调用某个方法，将一个记录项（entry）追加到线程池的队列中。线程池的代码从这个队列中提取记录项，将这个记录项派发（dispatch）给一个线程池线程。然而，当线程池线程完成任务后，线程不会被销毁。相反，线程会返回线程池，在那里进入空闲状态，等待响应另一个请求。由于线程不销毁自身，所以不再产生额外的性能损失。当应用程序发出请求的速度超过了线程池线程处理它们的速度，就会创建额外的线程。当一个线程池线程闲着没事儿一段时间之后 (不同版本的 CLR 对这个时间的定义不同)，线程会自己醒来终止自己以释放资源。线程终止自己会产生一定的性能损失。然而，线程终止自己是因为它闲的慌，表明应用程序本身就么有做太多的事情，所以这个性能损失关系不大。线程池可以只容纳少量线程，从而避免浪费资源；也可以容纳更多的线程，以利用多处理器、超线程处理器和多核处理器。它能在这两种不同的状态之间从容地切换。线程池是启发式的。如果应用程序需要执行许多任务，同时有可能的 CPU，那么线程池会创建更多的线程。应用程序负载减轻，线程池线程就终止它们自己。</p>\n<h2 id=\"performing-a-simple-compute-bound-operation\"><a class=\"anchor\" href=\"#performing-a-simple-compute-bound-operation\">#</a> Performing a Simple Compute-Bound Operation</h2>\n<blockquote>\n<p>To queue an asynchronous compute-bound operation to the thread pool, you typically call one of the following methods defined by the ThreadPool class.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitCallback</span> callBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitCallback</span> callBack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>These methods queue a “work item” and optional state data to the thread pool’s queue, and then  all of these methods return immediately. A work item is simply a method identified by the callback parameter that will be called by a thread pool thread. The method can be passed a single parameter  specified via the state (the state data) argument. The version of QueueUserWorkItem without the  state parameter passes null to the callback method. Eventually, some thread in the pool will process the work item, causing your method to be called. The callback method you write must match the  System.Threading.WaitCallback delegate type, which is defined as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>💡注意： <code>WaitCallback</code>  委托、 <code>TimerCallback</code>  委托 (参见本章 27.8 节 “执行定时计算限制操作” 的讨论) 和  <code>ParameterizedThreadStart</code>  委托 (在第 26 章 “线程基础” 中讨论) 签名完全一致。定义和该签名匹配的方法后，使用  <code>ThreadPool.QueueUserWorkItem</code> 、 <code>System.Threading.Timer</code>  和  <code>System.Threading.Thread</code>  对象都可调用该方法。</p>\n<blockquote>\n<p>The following code demonstrates how to have a thread pool thread call a method asynchronously.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main thread: queuing an asynchronous operation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span>ComputeBoundOp<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main thread: Doing other work here...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulating other work (10 seconds) </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hit &lt;Enter> to end this program...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// This method's signature must match the WaitCallback delegate </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ComputeBoundOp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// This method is executed by a thread pool thread </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In ComputeBoundOp: state=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulates other work (1 second) </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// When this method returns, the thread goes back </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// to the pool and waits for another task </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I compile and run this code, I get the following output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Main thread: queuing an asynchronous operation \nMain thread: Doing other work here... \nIn ComputeBoundOp: state=5\n</code></pre>\n<blockquote>\n<p>And, sometimes when I run this code, I get this output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Main thread: queuing an asynchronous operation \nIn ComputeBoundOp: state=5 \nMain thread: Doing other work here...\n</code></pre>\n<blockquote>\n<p>The difference in the order of the lines in the output is attributed to the fact that the two methods  are running asynchronously with respect to one another. The Windows scheduler determines which  thread to schedule first, or it may schedule them both simultaneously if the application is running on  a multi-CPU machine.</p>\n</blockquote>\n<p>💡注意：一旦回调方法抛出未处理的异常，CLR 会终止进程 (除非宿主强加了它自己的策略)。未处理异常的详情已在第 20 章 “异常和状态管理” 进行了讨论。</p>\n<p>💡注意：对于 Windows Store 应用， <code>System.Threading.ThreadPool</code>  类是没有公开的。但在使用  <code>System.Threading.Tasks</code>  命名空间中的类型时，这个类被间接地使用 (详情参见本章稍后的 27.5 节 “任务”)。</p>\n<p>💡小结：要将一个异步的计算限制操作放到线程池的队列中，通常可以调用  <code>ThreadPool</code>  类定义的 <code>QueueUserWorkItem</code>  方法及其重载，这些方法向线程池的队列添加一个 “工作项”(work item) 以及可选的状态数据。然后，所有方法会立即返回。工作项其实就是由  <code>callBack</code>  参数标识的一个方法，该方法将由线程池线程调用。可向方法传递一个  <code>state</code>  实参 (状态数据)。无  <code>state</code>  参数的那个版本的  <code>QueueUserWorkItem</code>  则向回调方法传递 <code>null</code> 。最终，池中的某个线程会处理工作项，造成你指定的方法被调用。</p>\n<h2 id=\"execution-contexts\"><a class=\"anchor\" href=\"#execution-contexts\">#</a> Execution Contexts</h2>\n<blockquote>\n<p>Every thread has an execution context data structure associated with it. The execution context  includes things such as security settings (compressed stack, Thread’s Principal property, and  Windows identity), host settings (see System.Threading.HostExecutionContextManager), and  logical call context data (see System.Runtime.Remoting.Messaging.CallContext’s LogicalSetData and LogicalGetData methods). When a thread executes code, some operations are  affected by the values of the thread’s execution context settings. This is certainly true for the security  settings. Ideally, whenever a thread uses another (helper) thread to perform tasks, the issuing thread’s  execution context should flow (be copied) to the helper thread. This ensures that any operations  performed by helper thread(s) are executing with the same security settings and host settings. It also ensures that any data stored in the initiating thread’s logical call context is available to the helper  thread.</p>\n</blockquote>\n<blockquote>\n<p>By default, the CLR automatically causes the initiating thread’s execution context to flow to any  helper threads. This transfers context information to the helper thread, but it comes at a performance  cost, because there is a lot of information in an execution context, and accumulating all of this information and then copying it for the helper thread takes a fair amount of time. If the helper thread then  employs additional helper threads, then more execution context data structures have to be created  and initialized as well.</p>\n</blockquote>\n<blockquote>\n<p>In the System.Threading namespace, there is an ExecutionContext class that allows you to  control how a thread’s execution context flows from one thread to another. Here is what the class  looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExecutionContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ISerializable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SecurityCritical</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">AsyncFlowControl</span> <span class=\"token function\">SuppressFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RestoreFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">IsFlowSuppressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Less commonly used methods are not shown</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>You can use this class to suppress the flowing of an execution context, thereby improving your  application’s performance. The performance gains can be quite substantial for a server application.  There is not much performance benefit for a client application, and the SuppressFlow method is  marked with the [SecurityCritical] attribute, making it impossible to call in some client applications (like Microsoft Silverlight). Of course, you should suppress the flowing of execution context only  if the helper thread does not need to access the context information. If the initiating thread’s execution context does not flow to a helper thread, the helper thread will use whatever execution context  it last associated with it. Therefore, the helper thread really shouldn’t execute any code that relies on  the execution context state (such as a user’s Windows identity).</p>\n</blockquote>\n<blockquote>\n<p>Here is an example showing how suppressing the flow of execution context affects data in a  thread’s logical call context when queuing a work item to the CLR’s thread pool.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Put some data into the Main thread's logical call context</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> CallContext<span class=\"token punctuation\">.</span><span class=\"token function\">LogicalSetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jeffrey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Initiate some work to be done by a thread pool thread</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// The thread pool thread can access the logical call context data </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> state <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> CallContext<span class=\"token punctuation\">.</span><span class=\"token function\">LogicalGetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Now, suppress the flowing of the Main thread's execution context</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Initiate some work to be done by a thread pool thread</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// The thread pool thread CANNOT access the logical call context data</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> state <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> CallContext<span class=\"token punctuation\">.</span><span class=\"token function\">LogicalGetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Restore the flowing of the Main thread's execution context in case</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// it employs more thread pool threads in the future</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> ExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">RestoreFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I compile and run the preceding code, I get the following output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Name=Jeffrey\nName=\n</code></pre>\n<blockquote>\n<p>Although this discussion has focused on suppressing the flow of execution context when calling  ThreadPool.QueueUserWorkItem, this technique is also useful when using Task objects (discussed  in the “Tasks” section of this chapter) and is also useful when initiating asynchronous I/O operations  (discussed in Chapter 28, “I/O-Bound Asynchronous Operations”).</p>\n</blockquote>\n<p>💡小结：每个线程都关联了一个执行上下文数据结构。执行上下文（execution context）包括的东西有安全设置（压缩栈、Thread 的 Principal 属性和 Windows 身份）、宿主设置（参见 System.Threading.HostExecutionContextManager）以及逻辑调用上下文数据（参见 System.Runtime.Remoting.Messaging.CallContext 的 LogicalSetData 和 LogicalGetData 方法）。线程执行它的操作时，一些操作会收到线程执行上下文设置（尤其是安全设置）的影响。理想情况下，每当一个线程（初始线程）使用另一个线程（辅助线程）执行任务时，前者的执行上下文应该流向（复制到）辅助线程。这就确保了辅助线程执行的任何操作使用的是相同的安全设置和宿主设置。还确保了在初始线程的逻辑调用上下文中存储的任何数据都适用于辅助线程。默认情况下，CLR 自动造成初始线程的执行上下文 “流向” 任何辅助线程。这造成将上下文信息传给辅助线程，但这会对性能造成一定影响。这是因为执行上下文中包含大量信息，而收集所有这些信息，再把它们复制到辅助线程，要耗费不少时间。可用这个类阻止执行上下文流动以提升应用程序的性能。对于服务器应用程序，性能的提升可能非常显著。但客户端应用程序的性能提升不了多少。另外，由于  <code>SuppressFlow</code>  方法用  <code>[SecurityCritical]</code>  特性进行了标识，所以在某些客户端应用程序 (比如 Silverlight) 中是无法调用的。当然，只有在辅助线程不需要或者不访问上下文信息时，才应阻止执行上下文的流动。当然，只有在辅助线程不需要或者不访问上下文信息时，才应阻止执行上下文的流动。如果初始线程的执行上下文不流向辅助线程，辅助线程会使用上一次和它关联的任意执行上下文。在这种情况下，辅助线程不应执行任何要依赖于执行上下文状态 (不如用户的 Windows 身份) 的代码。</p>\n<h2 id=\"cooperative-cancellation-and-timeout\"><a class=\"anchor\" href=\"#cooperative-cancellation-and-timeout\">#</a> Cooperative Cancellation and Timeout</h2>\n<blockquote>\n<p>The Microsoft .NET Framework offers a standard pattern for canceling operations. This pattern is  cooperative, meaning that the operation that you want to cancel has to explicitly support being canceled. In other words, the code performing the operation that you want to cancel and the code that  attempts to cancel the operation must both use the types mentioned in this section. It is nice when  long-running compute-bound operations offer cancellation, so you should consider adding cancellation to your own compute-bound operations. In this section, I’ll explain how to accomplish this. But,  first, let me explain the two main types provided in the Framework Class Library (FCL) that are part of  the standard cooperative cancellation pattern.</p>\n</blockquote>\n<blockquote>\n<p>To cancel an operation, you must first create a System.Threading.CancellationTokenSource object. This class looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CancellationTokenSource</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// A reference type</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsCancellationRequested <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CancellationToken</span> Token <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internally, calls Cancel passing false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> throwOnFirstException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>This object contains all the states having to do with managing cancellation. After constructing a  CancellationTokenSource (a reference type), one or more CancellationToken (a value type)  instances can be obtained by querying its Token property and passed around to your operations that allow themselves to be canceled. Here are the most useful members of the CancellationToken value type.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CancellationToken</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// A value type</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CancellationToken</span> None <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Very convenient</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsCancellationRequested <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Called by non-Task invoked operations</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThrowIfCancellationRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Called by Task-invoked operations</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// WaitHandle is signaled when the CancellationTokenSource is canceled</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">WaitHandle</span> WaitHandle <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// GetHashCode, Equals, operator== and operator!= members are not shown</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> CanBeCanceled <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Rarely used</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CancellationTokenRegistration</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token class-name\">Boolean</span> useSynchronizationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simpler overloads not shown</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>A CancellationToken instance is a lightweight value type because it contains a single private  field: a reference to its CancellationTokenSource object. A compute-bound operation’s loop can  periodically call CancellationToken’s IsCancellationRequested property to know if the loop  should terminate early, thereby ending the compute-bound operation. Of course, the benefit here is  that CPU time is no longer being wasted on an operation whose result you know you’re not interested  in. Now, let me put all this together with some sample code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CancellationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">CancellationTokenSource</span> cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Pass the CancellationToken and the number-to-count-to into the operation</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press &lt;Enter> to cancel the operation.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// If Count returned already, Cancel has no effect on it</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// Cancel returns immediately, and the method continues running here...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> countTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span>countTo<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is cancelled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exit the loop to stop the operation</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// For demo, waste some time</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡注意：要执行一个不允许被取消的操作，可向该操作传递通过调用 <code>CancellationToken</code>  的静态 <code>None</code>  属性而返回的 <code>CancellationToken</code> 。该属性返回一个特殊的 <code>CancellationToken</code>  实例，它不和任何 <code>CancellationTokenSource</code>  对象关联 (实例的私有字段为 <code>null</code> )。由于没有 <code>CancellationTokenSource</code> ，所以没有代码能调用  <code>Cancel</code> 。一个操作如果查询这个特殊  <code>CancellationToken</code>  的 <code>IsCancellationRequested</code>  属性，将总是返回 <code>false</code> 。使用某个特殊 <code>CancellationToken</code>  实例查询 <code>CancellationToken</code>  的 <code>CanBeCanceled</code>  属性，属性会返回 <code>false</code> 。相反，对于通过查询 <code>CancellationTokenSource</code>  对象的 <code>Token</code>  属性而获得的其他所有 <code>CancellationToken</code>  实例，该属性 ( <code>CancellationToken</code> ) 都会返回 <code>true</code> 。</p>\n<blockquote>\n<p>If you’d like, you can call CancellationTokenSource’s Register method to register one or  more methods to be invoked when a CancellationTokenSource is canceled. To this method, you  pass an Action delegate, a state value that will be passed to the callback via the delegate, and a Boolean indicating whether or not to invoke the delegate by using the calling thread’s  SynchronizationContext. If you pass false for the useSynchronizationContext parameter,  then the thread that calls Cancel will invoke all the registered methods sequentially. If you pass true for the useSynchronizationContext parameter, then the callbacks are sent (as opposed to posted)  to the captured SynchronizationContext object that governs which thread invokes the callback.  The SynchronizationContext class is discussed more in the “Applications and Their Threading  Models” section in Chapter 28.</p>\n</blockquote>\n<p>💡注意：向被取消的  <code>CancellationTokenSource</code>  登记一个回调方法，将由调用  <code>Register</code>  的线程调用回调方法 (如果为  <code>useSynchronizationContext</code>  参数传递了  <code>true</code>  值，就可能要通过调用线程的  <code>SynchronizationContext</code>  进行)。</p>\n<blockquote>\n<p>If Register is called multiple times, then multiple callback methods will be invoked. These  callback methods could throw an unhandled exception. If you call CancellationTokenSource’s  Cancel, passing it true, then the first callback method that throws an unhandled exception stops  the other callback methods from executing, and the exception thrown will be thrown from Cancel as well. If you call Cancel passing it false, then all registered callback methods are invoked. Any  unhandled exceptions that occur are added to a collection. After all callback methods have executed,  if any of them threw an unhandled exception, then Cancel throws an AggregateException with its  InnerExceptions property set to the collection of exception objects that were thrown. If no registered callback methods threw an unhandled exception, then Cancel simply returns without throwing  any exception at all.</p>\n</blockquote>\n<p>💡重要提示：没有办法将  <code>AggregateException</code>  的  <code>InnerExceptions</code>  集合中的一个异常对象和特的操作对应起来；你只知道某个操作出错，并通过异常类型知道出了什么错。要跟踪错误的具体位置，需要检查异常对象的  <code>StackTrace</code>  属性，并手动扫描你的源代码。</p>\n<blockquote>\n<p>CancellationToken’s Register method returns a CancellationTokenRegistration, which  looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CancellationTokenRegistration</span> <span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>CancellationTokenRegistration<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// GetHashCode, Equals, operator== and operator!= members are not shown</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>You can call Dispose to remove a registered callback from the CancellationTokenSource that  it is associated with so that it does not get invoked when calling Cancel. Here is some code that  demonstrates registering two callbacks with a single CancellationTokenSource.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Canceled 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Canceled 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// To test, let's just cancel it now and have the 2 callbacks execute</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>When I run this code, I get the following output as soon as the Cancel method is called.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Canceled 2\nCanceled 1\n</code></pre>\n<blockquote>\n<p>Finally, you can create a new CancellationTokenSource object by linking a bunch of other  CancellationTokenSource objects. This new CancellationTokenSource object will be canceled  when any of the linked CancellationTokenSource objects are canceled. The following code demonstrates.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create a CancellationTokenSource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cts1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cts1<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cts1 canceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Create another CancellationTokenSource</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cts2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cts2<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cts2 canceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Create a new CancellationTokenSource that is canceled when cts1 or ct2 is canceled</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> linkedCts <span class=\"token operator\">=</span> CancellationTokenSource<span class=\"token punctuation\">.</span><span class=\"token function\">CreateLinkedTokenSource</span><span class=\"token punctuation\">(</span>cts1<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> cts2<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>linkedCts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linkedCts canceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Cancel one of the CancellationTokenSource objects (I chose cts2)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cts2<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Display which CancellationTokenSource objects are canceled</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cts1 canceled=&#123;0&#125;, cts2 canceled=&#123;1&#125;, linkedCts canceled=&#123;2&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> cts1<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">,</span> cts2<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>linkedCts<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>When I run the preceding code, I get the following output.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>linkedCts canceled</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cts2 canceled</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">cts1</span> canceled<span class=\"token operator\">=</span>False<span class=\"token punctuation\">,</span> <span class=\"token class-name\">cts2</span> canceled<span class=\"token operator\">=</span>True<span class=\"token punctuation\">,</span> <span class=\"token class-name\">linkedCts</span> canceled<span class=\"token operator\">=</span>True</pre></td></tr></table></figure><blockquote>\n<p>It is often valuable to cancel an operation after a period of time has elapsed. For example, imagine  a server application that starts computing some work based on a client request. But the server application needs to respond to the client within two seconds, no matter what. In some scenarios, it is better to respond in a short period of time with an error or with partially computed results as opposed to  waiting a long time for a complete result. Fortunately, CancellationTokenSource gives you a way  to have it self-cancel itself after a period of time. To take advantage of this, you can either construct a  CancellationTokenSource object by using one of the constructors that accepts a delay, or you can  call CancellationTokenSource’s CancelAfter method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CancellationTokenSource</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// A reference type</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeSpan</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CancelAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> millisecondsDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CancelAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeSpan</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡小结：Microsoft .NET Framework 提供了标准的取消操作模式。这个模式是协作式的，意味着要取消的操作必须显式支持取消。换言之，无论执行操作的代码，还是试图取消操作的代码，还是试图取消操作的代码，都必须使用本节提到的类型。这个对象包含了和管理取消有关的所有状态。构造好一个  <code>CancellationTokenSource</code>  (一个引用类型) 之后，可从它的  <code>Token</code>  属性获得一个或多个 <code>CancellationToken</code>  (一个值类型) 实例，并传给你的操作，使操作可以取消。CancellationToken 实例是轻量级值类型，包含单个私有字段，即对其 CancellationTokenSource 对象的引用。在计算限制操作的循环中，可定时调用  <code>CancellationToken</code>  的  <code>IsCancellationRequested</code>  属性，了解循环是否应该提前终止，从而终止计算限制的操作。如果愿意，可调用  <code>CancellationTokenSource</code>  的  <code>Register</code>  方法登记一个或多个在取消一个  <code>CancellationTokenSource</code>  时调用的方法。要向方法传递一个  <code>Action&lt;Object&gt;</code>  委托；一个要通过委托传给回到 (方法) 的状态值；以及一个 <code>Boolean</code>  值 (名为 <code>useSynchronizationContext</code> )，该值指明是否要使用调用线程的  <code>SynchronizationContext</code>  来调用委托。如果为  <code>useSynchronizationContext</code>  参数传递  <code>false</code> ，那么调用 <code>Cancel</code>  的线程会顺序调用已登记的所有方法。为  <code>useSynchronizationContext</code>  参数传递  <code>true</code> ，则回调 (方法) 会被 send (而不是 post) 给已捕捉的  <code>SynchronizationContext</code>  对象，后者决定由哪个线程调用回调 (方法)。多次调用  <code>Register</code> ，多个回调方法都会调用。这些回调方法可能抛出未处理的异常。如果调用  <code>CancellationTokenSource</code>  的  <code>Cancel</code>  方法，向它传递  <code>true</code> ，那么抛出了未处理异常的第一个回调方法会阻止其他回调方法的执行，抛出的异常也会从  <code>Cancel</code>  中抛出。如果调用  <code>Cancel</code>  并向它传递  <code>false</code> ，那么登记的所有回调方法都会调用。所有未处理的异常都会添加到一个集合中。所有回调方法都执行好后，其中任何一个抛出了未处理的异常， <code>Cancel</code>  就会抛出一个  <code>AggregateException</code> ，该异常实例的  <code>InnerExceptions</code>  属性被设为已抛出的所有异常对象的集合。如果登记的所有回调方法都没有抛出未处理的异常，那么  <code>Cancel</code>  直接返回，不抛出任何异常。 <code>CancellationToken</code>  的  <code>Register</code>  方法返回一个  <code>CancellationTokenRegistration</code> ，可以调用  <code>Dispose</code>  从关联的  <code>CancellationTokenSource</code>  中删除已登记的回调；这样一来，在调用  <code>Cancel</code>  时，便不会再调用这个回调。可以通过链接另一组  <code>CancellationTokenSource</code>  来新建一个  <code>CancellationTokenSource</code>  对象。任何一个链接的  <code>CancellationTokenSource</code>  被取消，这个新的  <code>CancellationTokenSource</code>  对象就会被取消。 <code>CancellationTokenSource</code>  提供了在指定时间后自动取消的机制。为了利用这个机制，要么用接受延时参数的构造构造一个  <code>CancellationTokenSource</code>  对象，要么调用  <code>CancellationTokenSource</code>  的  <code>CancelAfter</code>  方法。</p>\n<h2 id=\"tasks\"><a class=\"anchor\" href=\"#tasks\">#</a> Tasks</h2>\n<blockquote>\n<p>Calling ThreadPool’s QueueUserWorkItem method to initiate an asynchronous compute-bound  operation is very simple. However, this technique has many limitations. The biggest problem is that  there is no built-in way for you to know when the operation has completed, and there is no way to  get a return value back when the operation completes. To address these limitations and more, Microsoft introduced the concept of tasks, and you use them via types in the System.Threading.Tasks namespace.</p>\n</blockquote>\n<blockquote>\n<p>So, instead of calling ThreadPool’s QueueUserWorkItem method, you can do the same via tasks.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">QueueUserWorkItem</span><span class=\"token punctuation\">(</span>ComputeBoundOp<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calling QueueUserWorkItem</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span>ComputeBoundOp<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Equivalent of preceding using Task</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">ComputeBoundOp</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Another equivalent</span></pre></td></tr></table></figure><blockquote>\n<p>In the second line of preceding code, I am creating the Task object and then immediately calling  Start to schedule the task to run. Naturally, you can create the Task object and then call Start on  it later. You could imagine code that creates a Task object and then passes it to some other method  that decides when to call Start to schedule the task. Because it is common to create a Task object  and then immediately call Start on it, you can call Task’s convenient static Run method as shown on  the last line of the preceding code.</p>\n</blockquote>\n<blockquote>\n<p>When creating a Task, you call a constructor, passing it an Action or an Action delegate that indicates the operation that you want performed. If you pass a method that expects  an Object, then you must also pass to Task’s constructor the argument that you ultimately want  passed to the operation. When calling Run, you can pass it an Action or Func delegate  indicating the operation you want performed. When calling a constructor or when calling Run, you  can optionally pass a CancellationToken, which allows the Task to be canceled before it has been  scheduled (see the “Canceling a Task” section later in this chapter).</p>\n</blockquote>\n<blockquote>\n<p>You can also optionally pass to the constructor some TaskCreationOptions flags that control  how the Task executes. TaskCreationOptions is an enumerated type defining a set of flags that  you can bitwise-OR together. It is defined as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Flags</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">TaskCreationOptions</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> None <span class=\"token operator\">=</span> <span class=\"token number\">0x0000</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// The default</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Hints to the TaskScheduler that you want this task to run sooner than later.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> PreferFairness <span class=\"token operator\">=</span> <span class=\"token number\">0x0001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Hints to the TaskScheduler that it should more aggressively create thread pool threads.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> LongRunning <span class=\"token operator\">=</span> <span class=\"token number\">0x0002</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Always honored: Associates a Task with its parent Task (discussed shortly)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> AttachedToParent <span class=\"token operator\">=</span> <span class=\"token number\">0x0004</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// If a task attempts to attach to this parent task, it is a normal task, not a child task.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> DenyChildAttach <span class=\"token operator\">=</span> <span class=\"token number\">0x0008</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Forces child tasks to use the default scheduler as opposed to the parent’s scheduler.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> HideScheduler <span class=\"token operator\">=</span> <span class=\"token number\">0x0010</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Some of these flags are hints that may or may not be honored by the TaskScheduler that is  being used to schedule a Task; the AttachedToParent, DenyChildAttach, and HideScheduler  flags are always honored, because they have nothing to do with the TaskScheduler itself. TaskScheduler objects are discussed later in the “Task Schedulers” section.</p>\n</blockquote>\n<h3 id=\"waiting-for-a-task-to-complete-and-getting-its-result\"><a class=\"anchor\" href=\"#waiting-for-a-task-to-complete-and-getting-its-result\">#</a> Waiting for a Task to Complete and Getting Its Result</h3>\n<blockquote>\n<p>With tasks, it is also possible to wait for them to complete and then get their result. Let’s say that we  have a Sum method that is computationally intensive if n is a large value.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Int32</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">checked</span> <span class=\"token punctuation\">&#123;</span> sum <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// if n is large, this will throw System.OverflowException</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>We can now construct a Task object (which is derived from Task), and we pass for the  generic TResult argument the compute-bound operation’s return type. Now, after starting the task,  we can wait for it to complete and then get its result by using the following code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create a Task (it does not start running now)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Int32<span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// You can start the task sometime later</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Optionally, you can explicitly wait for the task to complete</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FYI: Overloads exist accepting timeout/CancellationToken</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// You can get the result (the Result property internally calls Wait)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Sum is: \"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// An Int32 value</span></pre></td></tr></table></figure><p>💡重要提示：线程调用  <code>Wait</code>  方法时，系统检查线程要等待的  <code>Task</code>  是否已开始执行。如果是，调用  <code>Wait</code>  的线程来执行  <code>Task</code> 。在这种情况下，调用 <code>Wait</code>  的线程不会阻塞；它会执行  <code>Task</code>  并立即返回。好处在于，没有线程会被阻塞，所以减少了对资源的占用 (因为不需要创建一个线程来替代被阻塞的线程)，并提升了性能 (因为不需要花时间创建线程，也没有上下文切换)。不好的地方在于，假如线程在调用  <code>Wait</code>  前已获得了一个线程同步锁，而  <code>Task</code>  试图获取同一个锁，就会造成死锁的线程！</p>\n<blockquote>\n<p>If the compute-bound task throws an unhandled exception, the exception will be swallowed,  stored in a collection, and the thread pool thread is allowed to return to the thread pool. When the  Wait method or the Result property is invoked, these members will throw a System.AggregateException object.</p>\n</blockquote>\n<blockquote>\n<p>The AggregateException type is used to encapsulate a collection of exception objects (which  can happen if a parent task spawns multiple child tasks that throw exceptions). It contains an InnerExceptions property that returns a ReadOnlyCollection object. Do not confuse the  InnerExceptions property with the InnerException property, which the AggregateException class inherits from the System.Exception base class. For the preceding example, element 0 of  AggregateException’s InnerExceptions property would refer to the actual System.OverflowException object thrown by the compute-bound method (Sum).</p>\n</blockquote>\n<blockquote>\n<p>As a convenience, AggregateException overrides Exception’s GetBaseException method.  AggregateException’s implementation returns the innermost AggregateException that is the  root cause of the problem (assuming that there is just one innermost exception in the collection).  AggregateException also offers a Flatten method that creates a new AggregateException,  whose InnerExceptions property contains a list of exceptions produced by walking the original  AggregateException’s inner exception hierarchy. Finally, AggregateException also provides a  Handle method that invokes a callback method for each exception contained in the AggregateException. The callback can then decide, for each exception, how to handle the exception; the  callback returns true to consider the exception handled and false if not. If, after calling Handle,  at least one exception is not handled, then a new AggregateException object is created containing just the unhandled exceptions and the new AggregateException object is thrown. Later in this  chapter, I show examples using the Flatten and Handle methods.</p>\n</blockquote>\n<p>💡重要提示：如果一致不调用  <code>Wait</code>  或  <code>Result</code> ，或者一直不查询  <code>Task</code>  的  <code>Exception</code>  属性，代码就一直注意不到这个异常的发生。这当然不好，因为程序遇到了未预料到的问题，而你居然没注意到。为了帮助你检测没有被注意到。为了帮助你检测没有被注意到的异常，可以向  <code>TaskScheduler</code>  的静态  <code>UnobservedTaskException</code>  事件登记一个回调方法。每次放一个  <code>Task</code>  被垃圾回收时，如果存在一个没有被注意到的异常，CLR 的终结器线程就会引发这个事件。一旦引发，就会向你的事件处理方法传递一个  <code>UnobservedTaskExceptionEventArgs</code>  对象，其中包含你没有注意到的  <code>AggregateException</code> 。</p>\n<blockquote>\n<p>In addition to waiting for a single task, the Task class also offers two static methods that allow a  thread to wait on an array of Task objects. Task’s static WaitAny method blocks the calling thread  until any of the Task objects in the array have completed. This method returns an Int32 index into  the array indicating which Task object completed, causing the thread to wake and continue running. The method returns -1 if the timeout occurs and throws an OperationCanceledException if  WaitAny is canceled via a CancellationToken.</p>\n</blockquote>\n<blockquote>\n<p>Similarly, the Task class has a static WaitAll method that blocks the calling thread until all the  Task objects in the array have completed. The WaitAll method returns true if all the Task objects  complete and false if a timeout occurs; an OperationCanceledException is thrown if WaitAll is  canceled via a CancellationToken.</p>\n</blockquote>\n<h3 id=\"canceling-a-task\"><a class=\"anchor\" href=\"#canceling-a-task\">#</a> Canceling a Task</h3>\n<blockquote>\n<p>Of course, you can use a CancellationTokenSource to cancel a Task. First, we must revise our Sum method so that it accepts a CancellationToken.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int32</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Int32</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// The following line throws OperationCanceledException when Cancel </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// is called on the CancellationTokenSource referred to by the token</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> ct<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfCancellationRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">checked</span> <span class=\"token punctuation\">&#123;</span> sum <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// if n is large, this will throw System.OverflowException</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In this code, the compute-bound operation’s loop periodically checks to see if the operation has  been canceled by calling CancellationToken’s ThrowIfCancellationRequested method. This  method is similar to CancellationToken’s IsCancellationRequested property shown earlier in  the “Cooperative Cancellation and Timeout” section. However, ThrowIfCancellationRequested throws an OperationCanceledException if the CancellationTokenSource has been canceled.  The reason for throwing an exception is because, unlike work items initiated with ThreadPool’s  QueueUserWorkItem method, tasks have the notion of having completed and a task can even return  a value. So, there needs to be a way to distinguish a completed task from a canceled task, and having  the task throw an exception lets you know that the task did not run all the way to completion.</p>\n</blockquote>\n<blockquote>\n<p>Now, we will create the CancellationTokenSource and Task objects as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CancellationTokenSource</span> cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Sometime later, cancel the CancellationTokenSource to cancel the Task</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is an asynchronous request, the Task may have completed already</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// If the task got canceled, Result will throw an AggregateException</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum is: \"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// An Int32 value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AggregateException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// Consider any OperationCanceledException objects as handled. </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Any other exceptions cause a new AggregateException containing</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// only the unhandled exceptions to be thrown</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> x<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e <span class=\"token keyword\">is</span> <span class=\"token class-name\">OperationCanceledException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// If all the exceptions were handled, the following executes</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum was canceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When creating a Task, you can associate a CancellationToken with it by passing it to Task’s  constructor (as shown in the preceding code). If the CancellationToken gets canceled before the  Task is scheduled, the Task gets canceled and never executes at all.2 But if the Task has already  been scheduled (by calling the Start method), then the Task’s code must explicitly support cancellation if it allows its operation to be canceled while executing. Unfortunately, while a Task object has  a CancellationToken associated with it, there is no way to access it, so you must somehow get the  same CancellationToken that was used to create the Task object into the Task’s code itself. The  easiest way to write this code is to use a lambda expression and “pass” the CancellationToken as a  closure variable (as I’ve done in the previous code example).</p>\n</blockquote>\n<h3 id=\"starting-a-new-task-automatically-when-another-task-completes\"><a class=\"anchor\" href=\"#starting-a-new-task-automatically-when-another-task-completes\">#</a> Starting a New Task Automatically When Another Task  Completes</h3>\n<blockquote>\n<p>In order to write scalable software, you must not have your threads block. This means that calling  Wait or querying a task’s Result property when the task has not yet finished running will most likely  cause the thread pool to create a new thread, which increases resource usage and hurts performance.  Fortunately, there is a better way to find out when a task has completed running. When a task completes, it can start another task. Here is a rewrite of the earlier code that doesn’t block any threads.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create and start a Task, continue with another task</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ContinueWith returns a Task but you usually don't care</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Task</span> cwt <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum is: \"</span> <span class=\"token operator\">+</span> task<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Now, when the task executing Sum completes, this task will start another task (also on some thread  pool thread) that displays the result. The thread that executes the preceding code does not block  waiting for either of these two tasks to complete; the thread is allowed to execute other code or, if it  is a thread pool thread itself, it can return to the pool to perform other operations. Note that the task  executing Sum could complete before ContinueWith is called. This will not be a problem because the  ContinueWith method will see that the Sum task is complete and it will immediately start the task  that displays the result.</p>\n</blockquote>\n<blockquote>\n<p>Also, note that ContinueWith returns a reference to a new Task object (which my code placed in  the cwt variable). Of course, you can invoke various members (like Wait, Result, or even ContinueWith) using this Task object, but usually you will ignore this Task object and will not save a reference  to it in a variable.</p>\n</blockquote>\n<blockquote>\n<p>I should also mention that Task objects internally contain a collection of ContinueWith tasks.  So you can actually call ContinueWith several times using a single Task object. When the task  completes, all the ContinueWith tasks will be queued to the thread pool. In addition, when calling ContinueWith, you can specify a bitwise OR’d set of TaskContinuationOptions. The first  six flags—None, PreferFairness, LongRunning, AttachedToParent, DenyChildAttach, and HideScheduler—are identical to the flags offered by the TaskCreationOptions enumerated type  shown earlier. Here is what the TaskContinuationOptions type looks like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Flags</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">TaskContinuationOptions</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> None <span class=\"token operator\">=</span> <span class=\"token number\">0x0000</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// The default</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Hints to the TaskScheduler that you want this task to run sooner than later.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> PreferFairness <span class=\"token operator\">=</span> <span class=\"token number\">0x0001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// Hints to the TaskScheduler that it should more aggressively create thread pool threads.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> LongRunning <span class=\"token operator\">=</span> <span class=\"token number\">0x0002</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Always honored: Associates a Task with its parent Task (discussed shortly)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> AttachedToParent <span class=\"token operator\">=</span> <span class=\"token number\">0x0004</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// If a task attempts to attach to this parent task, an InvalidOperationException is thrown.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> DenyChildAttach <span class=\"token operator\">=</span> <span class=\"token number\">0x0008</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Forces child tasks to use the default scheduler as opposed to the parent’s scheduler.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> HideScheduler <span class=\"token operator\">=</span> <span class=\"token number\">0x0010</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Prevents completion of the continuation until the antecedent has completed.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> LazyCancellation <span class=\"token operator\">=</span> <span class=\"token number\">0x0020</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// This flag indicates that you want the thread that executed the first task to also</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// execute the ContinueWith task. If the first task has already completed, then the</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// thread calling ContinueWith will execute the ContinueWith task.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> ExecuteSynchronously <span class=\"token operator\">=</span> <span class=\"token number\">0x80000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// These flags indicate under what circumstances to run the ContinueWith task</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> NotOnRanToCompletion <span class=\"token operator\">=</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> NotOnFaulted <span class=\"token operator\">=</span> <span class=\"token number\">0x20000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> NotOnCanceled <span class=\"token operator\">=</span> <span class=\"token number\">0x40000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token comment\">// These flags are convenient combinations of the above three flags</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> OnlyOnCanceled <span class=\"token operator\">=</span> NotOnRanToCompletion <span class=\"token operator\">|</span> NotOnFaulted<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> OnlyOnFaulted <span class=\"token operator\">=</span> NotOnRanToCompletion <span class=\"token operator\">|</span> NotOnCanceled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> OnlyOnRanToCompletion <span class=\"token operator\">=</span> NotOnFaulted <span class=\"token operator\">|</span> NotOnCanceled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When you call ContinueWith, you can indicate that you want the new task to execute only if the  first task is canceled by specifying the TaskContinuationOptions.OnlyOnCanceled flag. Similarly,  you have the new task execute only if the first task throws an unhandled exception using the TaskContinuationOptions.OnlyOnFaulted flag. And, of course, you can use the TaskContinuationOptions.OnlyOnRanToCompletion flag to have the new task execute only if the first task runs all  the way to completion without being canceled or throwing an unhandled exception. By default, if you  do not specify any of these flags, then the new task will run regardless of how the first task completes.  When a Task completes, any of its continue-with tasks that do not run are automatically canceled.  Here is an example that puts all of this together.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create and start a Task, continue with multiple other tasks</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Each ContinueWith returns a Task but you usually don't care</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum is: \"</span> <span class=\"token operator\">+</span> task<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnRanToCompletion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum threw: \"</span> <span class=\"token operator\">+</span> task<span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>InnerException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnFaulted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum was canceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnCanceled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"a-task-may-start-child-tasks\"><a class=\"anchor\" href=\"#a-task-may-start-child-tasks\">#</a> A Task May Start Child Tasks</h3>\n<blockquote>\n<p>Finally, tasks support parent/child relationships, as demonstrated by the following code.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Int32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create an array for the results</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// This tasks creates and starts 3 child tasks</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TaskCreationOptions<span class=\"token punctuation\">.</span>AttachedToParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TaskCreationOptions<span class=\"token punctuation\">.</span>AttachedToParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TaskCreationOptions<span class=\"token punctuation\">.</span>AttachedToParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Returns a reference to the array (even though the elements may not be initialized yet)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// When the parent and its children have run to completion, display the results</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cwt <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> parentTask <span class=\"token operator\">=></span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>parentTask<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">,</span> Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// Start the parent Task so it can start its children</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Here, the parent task creates and starts three Task objects. By default, Task objects created by  another task are top-level tasks that have no relationship to the task that creates them. However, the  TaskCreationOptions.AttachedToParent flag associates a Task with the Task that creates it so  that the creating task is not considered finished until all its children (and grandchildren) have finished  running. When creating a Task by calling the ContinueWith method, you can make the continuewith task be a child by specifying the TaskContinuationOptions.AttachedToParent flag.</p>\n</blockquote>\n<h3 id=\"inside-a-task\"><a class=\"anchor\" href=\"#inside-a-task\">#</a> Inside a Task</h3>\n<blockquote>\n<p>Each Task object has a set of fields that make up the task’s state. There is an Int32 ID (see Task’s  read-only Id property), an Int32 representing the execution state of the Task, a reference to the  parent task, a reference to the TaskScheduler specified when the Task was created, a reference to  the callback method, a reference to the object that is to be passed to the callback method (queryable  via Task’s read-only AsyncState property), a reference to an ExecutionContext, and a reference to a ManualResetEventSlim object. In addition, each Task object has a reference to some  supplementary state that is created on demand. The supplementary state includes a CancellationToken, a collection of ContinueWithTask objects, a collection of Task objects for child tasks that  have thrown unhandled exceptions, and more. My point is that although tasks provide you a lot of features, there is some cost to tasks because memory must be allocated for all this state. If you don’t  need the additional features offered by tasks, then your program will use resources more efficiently if  you use ThreadPool.QueueUserWorkItem.</p>\n</blockquote>\n<blockquote>\n<p>The Task and Task classes implement the IDisposable interface, allowing you to  call Dispose when you are done with the Task object. Today, all the Dispose method does is close  the ManualResetEventSlim object. However, it is possible to define classes derived from Task and  Task, and these classes could allocate their own resources, which would be freed in their  override of the Dispose method. I recommend that developers not explicitly call Dispose on a Task object in their code; instead, just let the garbage collector clean up any resources when it determines  that they are no longer in use.</p>\n</blockquote>\n<blockquote>\n<p>You’ll notice that each Task object contains an Int32 field representing a Task’s unique ID. When  you create a Task object, the field is initialized to zero. Then the first time you query Task’s read-only  Id property, the property assigns a unique Int32 value to this field and returns it from the property.  Task IDs start at 1 and increment by 1 as each ID is assigned. Just looking at a Task object in the  Microsoft Visual Studio debugger will cause the debugger to display the Task’s ID, forcing the Task to be assigned an ID.</p>\n</blockquote>\n<blockquote>\n<p>The idea behind the ID is that each Task can be identified by a unique value. In fact, Visual Studio  shows you these task IDs in its Parallel Tasks and Parallel Stacks windows. But because you don’t assign the IDs yourself in your code, it is practically impossible to correlate an ID number with what your  code is doing. While running a task’s code, you can query Task’s static CurrentId property, which  returns a nullable Int32 (Int32?). You can also call this from Visual Studio’s Watch window or Immediate window while debugging to get the ID for the code that you are currently stepping through.  Then you can find your task in the Parallel Tasks/Stacks windows. If you query the CurrentId property while a task is not executing, it returns null.</p>\n</blockquote>\n<blockquote>\n<p>During a Task object’s existence, you can learn where it is in its lifecycle by querying Task’s readonly Status property. This property returns a TaskStatus value that is defined as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">TaskStatus</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// These flags indicate the state of a Task during its lifetime:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> Created<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Task created explicitly; you can manually Start() this task</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> WaitingForActivation<span class=\"token punctuation\">,</span><span class=\"token comment\">// Task created implicitly; it starts automatically</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> WaitingToRun<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The task was scheduled but isn’t running yet</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Running<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The task is actually running</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// The task is waiting for children to complete before it considers itself complete</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> WaitingForChildrenToComplete<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// A task's final state is one of these:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> RanToCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Canceled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Faulted</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When you first construct a Task object, its status is Created. Later, when the task is started, its  status changes to WaitingToRun. When the Task is actually running on a thread, its status changes to Running. When the task stops running and is waiting for any child tasks, the status changes to  WaitingForChildrenToComplete. When a task is completely finished, it enters one of three final  states: RanToCompletion, Canceled, or Faulted. When a Task runs to completion, you  can query the task’s result via Task’s Result property. When a Task or Task faults, you can obtain the unhandled exception that the task threw by querying Task’s Exception property; which always returns an AggregateException object whose collection contains the set of  unhandled exceptions.</p>\n</blockquote>\n<blockquote>\n<p>For convenience, Task offers several read-only, Boolean properties: IsCanceled, IsFaulted,  and IsCompleted. Note that IsCompleted returns true when the Task is in the RanToCompletion,  Canceled, or Faulted state. The easiest way to determine if a Task completed successfully is to use  code like the following.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> TaskStatus<span class=\"token punctuation\">.</span>RanToCompletion<span class=\"token punctuation\">)</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><blockquote>\n<p>A Task object is in the WaitingForActivation state if that Task is created by calling one  of these functions: ContinueWith, ContinueWhenAll, ContinueWhenAny, or FromAsync. A  Task created by constructing a TaskCompletionSource object is also created in the  WaitingForActivation state. This state means that the Task’s scheduling is controlled by the  task infrastructure. For example, you cannot explicitly start a Task object that was created by calling  ContinueWith. This Task will start automatically when its antecedent task has finished executing.</p>\n</blockquote>\n<h3 id=\"task-factories\"><a class=\"anchor\" href=\"#task-factories\">#</a> Task Factories</h3>\n<blockquote>\n<p>Occasionally, you might want to create a bunch of Task objects that share the same configuration. To  keep you from having to pass the same parameters to each Task’s constructor over and over again,  you can create a task factory that encapsulates the common configuration. The System.Threading. Tasks namespace defines a TaskFactory type as well as a TaskFactory type. Both of  these types are derived from System.Object; that is, they are peers of each other.</p>\n</blockquote>\n<blockquote>\n<p>If you want to create a bunch of tasks that return void, then you will construct a TaskFactory.  If you want to create a bunch of tasks that have a specific return type, then you will construct a  TaskFactory where you pass the task’s desired return type for the generic TResult argument. When you create one of these task factory classes, you pass to its constructor the defaults  that you want the tasks that the factory creates to have. Specifically, you pass to the task factory the  CancellationToken, TaskScheduler, TaskCreationOptions, and TaskContinuationOptions settings that you want factory-created tasks to have.</p>\n</blockquote>\n<blockquote>\n<p>Here is some sample code demonstrating the use of a TaskFactory.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Task</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskFactory<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> TaskCreationOptions<span class=\"token punctuation\">.</span>AttachedToParent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>ExecuteSynchronously<span class=\"token punctuation\">,</span> TaskScheduler<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// This task creates and starts 3 child tasks</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> childTasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> tf<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> tf<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> tf<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> Int32<span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Too big, throws OverflowException</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// If any of the child tasks throw, cancel the rest of them</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> task <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> task <span class=\"token operator\">&lt;</span> childTasks<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> task<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> childTasks<span class=\"token punctuation\">[</span>task<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> t <span class=\"token operator\">=></span> cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnFaulted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// When all children are done, get the maximum value returned from the </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// non-faulting/canceled tasks. Then pass the maximum value to another </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// task that displays the maximum result</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> tf<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWhenAll</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> childTasks<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre> completedTasks <span class=\"token operator\">=></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> completedTasks<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> TaskStatus<span class=\"token punctuation\">.</span>RanToCompletion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum is: \"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> TaskContinuationOptions<span class=\"token punctuation\">.</span>ExecuteSynchronously<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// When the children are done, show any unhandled exceptions too</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>parent<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">// I put all this text in a StringBuilder and call Console.WriteLine just once </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token comment\">// because this task could execute concurrently with the task above &amp; I don't </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token comment\">// want the tasks' output interspersed</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token string\">\"The following exception(s) occurred:\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> e <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span><span class=\"token function\">Flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>InnerExceptions<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre> sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnFaulted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// Start the parent Task so it can start its children</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>With this code, I am creating a TaskFactory object that I will use to create three  Task objects. I want to configure the child tasks all the same way: each Task object shares the  same CancellationTokenSource token, tasks are considered children of their parent, all  continue-with tasks created by the TaskFactory execute synchronously, and all Task objects  created by this TaskFactory use the default TaskScheduler.</p>\n</blockquote>\n<blockquote>\n<p>Then I create an array consisting of the three child Task objects, all created by calling TaskFactory’s StartNew method. This method conveniently creates and starts each child task. In a loop,  I tell each child task that throws an unhandled exception to cancel all the other child tasks that are  still running. Finally, using the TaskFactory, I call ContinueWhenAll, which creates a Task that  runs when all the child tasks have completed running. Because this task is created with the TaskFactory, it will also be considered a child of the parent task and it will execute synchronously using  the default TaskScheduler. However, I want this task to run even if the other child tasks were canceled, so I override the TaskFactory’s CancellationToken by passing in CancellationToken. None, which prevents this task from being cancelable at all. Finally, when the task that processes all the results is complete, I create another task that displays the highest value returned from all the  child tasks.</p>\n</blockquote>\n<p>💡注意：调用  <code>TaskFactory</code>  或  <code>TaskFactory&lt;TResult&gt;</code>  的静态  <code>ContinueWhenAll</code>  和  <code>ContinueWhenAny</code>  方法时，以下 <code>TaskContinuationOption</code>  标志是非法的： <code>NotOnRanToCompletion</code> ， <code>NotOnFaulted</code>  和  <code>NotOnCanceled</code> 。当然，基于这些标志组合起来的标志 ( <code>OnlyOnCanceled</code> ， <code>OnlyOnFaulted</code>  和  <code>OnlyOnRanToCompletion</code> ) 也是非法的。也就是说，无论前置任务是如何完成的， <code>ContinueWhenAll</code>  和  <code>ContinueWhenAny</code>  都会执行延续任务。</p>\n<h3 id=\"task-schedulers\"><a class=\"anchor\" href=\"#task-schedulers\">#</a> Task Schedulers</h3>\n<blockquote>\n<p>The task infrastructure is very flexible, and TaskScheduler objects are a big part of this flexibility. A  TaskScheduler object is responsible for executing scheduled tasks and also exposes task information to the Visual Studio debugger. The FCL ships with two TaskScheduler-derived types: the thread  pool task scheduler and a synchronization context task scheduler. By default, all applications use the  thread pool task scheduler. This task scheduler schedules tasks to the thread pool’s worker threads  and is discussed in more detail in this chapter’s “How the Thread Pool Manages Its Threads” section.  You can get a reference to the default task scheduler by querying TaskScheduler’s static Default property.</p>\n</blockquote>\n<blockquote>\n<p>The synchronization context task scheduler is typically used for applications sporting a graphical user interface, such as Windows Forms, Windows Presentation Foundation (WPF), Silverlight, and  Windows Store applications. This task scheduler schedules all tasks onto the application’s GUI thread  so that all the task code can successfully update UI components like buttons, menu items, and so on.  The synchronization context task scheduler does not use the thread pool at all. You can get a reference to a synchronization context task scheduler by querying TaskScheduler’s static FromCurrentSynchronizationContext method.</p>\n</blockquote>\n<blockquote>\n<p>Here is a simple Windows Forms application that demonstrates the use of the synchronization  context task scheduler.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TaskScheduler</span> m_syncContextTaskScheduler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">MyForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// Get a reference to a synchronization context task scheduler</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> m_syncContextTaskScheduler <span class=\"token operator\">=</span> TaskScheduler<span class=\"token punctuation\">.</span><span class=\"token function\">FromCurrentSynchronizationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Synchronization Context Task Scheduler Demo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> Visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> Width <span class=\"token operator\">=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">;</span> Height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">CancellationTokenSource</span> m_cts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnMouseClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MouseEventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_cts <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// An operation is in flight, cancel it</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> m_cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> m_cts <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// An operation is not in flight, start it</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Operation running\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> m_cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// This task uses the default task scheduler and executes on a thread pool thread</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Int32<span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>m_cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">// These tasks use the sync context task scheduler and execute on the GUI thread</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Result: \"</span> <span class=\"token operator\">+</span> task<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnRanToCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> m_syncContextTaskScheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Operation canceled\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnCanceled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> m_syncContextTaskScheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">=></span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Operation faulted\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> TaskContinuationOptions<span class=\"token punctuation\">.</span>OnlyOnFaulted<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> m_syncContextTaskScheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnMouseClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When you click in the client area of this form, a compute-bound task will start executing on a  thread pool thread. This is good because the GUI thread is not blocked during this time and can  therefore respond to other UI operations. However, the code executed by the thread pool thread  should not attempt to update UI components or else an InvalidOperationException will be  thrown.</p>\n</blockquote>\n<blockquote>\n<p>When the compute-bound task is done, one of the three continue-with tasks will execute. These  tasks are all issued against the synchronization context task scheduler corresponding to the GUI  thread, and this task scheduler queues the tasks to the GUI thread, allowing the code executed by  these tasks to update UI components successfully. All of these tasks update the form’s caption via the  inherited Text property.</p>\n</blockquote>\n<blockquote>\n<p>Because the compute-bound work (Sum) is running on a thread pool thread, the user can interact  with the UI to cancel the operation. In my simple code example, I allow the user to cancel the operation by clicking in the form’s client area while an operation is running.</p>\n</blockquote>\n<blockquote>\n<p>You can, of course, define your own class derived from TaskScheduler if you have special task  scheduling needs. Microsoft has provided a bunch of sample code for tasks and includes the source  code for a bunch of task schedulers in the Parallel Extensions Extras package, which can be downloaded from here: <span class=\"exturl\" data-url=\"aHR0cDovL2NvZGUubXNkbi5taWNyb3NvZnQuY29tL1BhckV4dFNhbXBsZXM=\">http://code.msdn.microsoft.com/ParExtSamples</span>. Here are some of the task schedulers included in this package:</p>\n<ul>\n<li>\n<p>IOTaskScheduler This task scheduler queues tasks to the thread pool’s I/O threads instead  of its worker threads.</p>\n</li>\n<li>\n<p>LimitedConcurrencyLevelTaskScheduler This task scheduler allows no more than n (a  constructor parameter) tasks to execute simultaneously.</p>\n</li>\n<li>\n<p>OrderedTaskScheduler This task scheduler allows only one task to execute at a time. This  class is derived from LimitedConcurrencyLevelTaskScheduler and just passes 1 for n.</p>\n</li>\n<li>\n<p>PrioritizingTaskScheduler This task scheduler queues tasks to the CLR’s thread pool. After  this has occurred, you can call Prioritize to indicate that a Task should be processed before all normal tasks (if it hasn’t been processed already). You can call Deprioritize to make  a Task be processed after all normal tasks.</p>\n</li>\n<li>\n<p>ThreadPerTaskScheduler This task scheduler creates and starts a separate thread for each  task; it does not use the thread pool at all.</p>\n</li>\n</ul>\n</blockquote>\n<p>💡小结：很容易调用  <code>ThreadPool</code>  的  <code>QueueUserWorkItem</code>  方法发起一次异步的计算限制操作。但这个技术有许多限制。最大的问题是没有内建的机制让你知道操作在什么时候完成，也没有机制在操作完成时获得返回值。为了克服这些限制 (并解决其他一些问题)，Microsoft 引入了任务的概念。我们通过  <code>System.Threading.Tasks</code>  命名空间中的类型来使用任务。无论调用构造器还是 <code>Run</code> ，都可选择传递一个  <code>CancellationToken</code> ，它使  <code>Task</code>  能在调度前取消。还可选择向构造器传递一些  <code>TaskCreationOptions</code>  标志来控制  <code>Task</code>  的执行方式。 <code>TaskCreationOptions</code>  枚举类型还定义了一组可按位 OR 的标志。有的标志只是 “提议”， <code>TaskScheduler</code>  在调度一个  <code>Task</code>  时，可能会、也可能不会采纳这些提议。不过， <code>AttachedToParent</code> ， <code>DenyChildAttach</code>  和 <code>HideScheduler</code>  总是得以采纳，因为它们和  <code>TaskScheduler</code>  本身无关。如果计算限制的任务抛出未处理的异常，异常会被 “吞噬” 并存储到一个集合中，而线程池线程可以返回到线程池中。调用  <code>Wait</code>  方法或者  <code>Result</code>  属性时，这些成员会抛出一个  <code>System.AggregateException</code>  对象。 <code>AggregateException</code>  类型封装了异常对象的一个集合 (如果父任务生成了多个子任务，而多个子任务都抛出了异常，这个集合便可能包含多个异常)。该类型的  <code>InnerExceptions</code>  属性返回一个  <code>ReadOnlyCollection&lt;Exception&gt;</code>  对象。不要混淆  <code>InnerExceptions</code>  属性和  <code>InnerException</code>  属性，后者是 <code>AggregateException</code>  类从  <code>System.Exception</code>  基类继承的。除了等待单个任务， <code>Task</code>  类还提供了两个静态方法，允许线程等待一个  <code>Task</code>  对象数组。其中， <code>Task</code>  的静态  <code>WaitAny</code>  方法会阻塞调用线程，直到数组中的任何  <code>Task</code>  对象完成。方法返回  <code>Int32</code>  数组索引值，指明完成的是哪个  <code>Task</code>  对象。方法返回后，线程被唤醒并继续运行。如果发生超时，方法将返回  <code>-1</code> 。如果  <code>WaitAny</code>  通过一个  <code>CancellationToken</code>  取消，会抛出一个  <code>OperationCanceledException</code> 。类似地， <code>Task</code>  类还有一个静态  <code>WaitAll</code>  方法，它阻塞调用线程，直到数组中的所有  <code>Task</code>  对象完成。如果所有  <code>Task</code>  对象都完成， <code>WaitAll</code>  方法返回 <code>true</code> 。发生超时则返回  <code>false</code> 。如果  <code>WaitAll</code>  通过一个  <code>CancellationToken</code>  取消，会抛出一个  <code>OperationCanceledException</code> 。可用一个  <code>CancellationTokenSource</code>  取消  <code>Task</code> 。  <code>CancellationToken</code>  的  <code>ThrowIfCancellationRequested</code>  方法定时检查操作是否已取消。这个方法与 <code>CancellationToken</code>  的  <code>IsCancellationRequested</code>  属性相似。如果  <code>CancellationTokenSource</code>  已经取消， <code>ThrowIfCancellationRequested</code>  会抛出一个  <code>OperationCanceledException</code> 。之所以选择抛出异常，是因为和  <code>ThreadPool</code>  的  <code>QueueUserWorkItem</code>  方法初始化的工作项不同，任务有办法表示完成，任务甚至能返回一个值。所以，需要采取一种方式将已完成的任务和出错的任务区分开。而让任务抛出异常，就可以知道任务没有一直运行到结束。可在创建  <code>Task</code>  时将一个  <code>CancellationToken</code>  传给构造器 (如上例所示)，从而将两者关联。如果  <code>CancellationToken</code>  在  <code>Task</code>  调度前取消， <code>Task</code>  会被取消，永远都不执行。但如果  <code>Task</code>  已调度 (通过调用  <code>Start</code>  方法)，那么 <code>Task</code>  的代码只有显示支持取消，其操作才能在执行期间取消。遗憾的是，虽然  <code>Task</code>  对象关联了一个  <code>CancellationToken</code> ，但却没有办法访问它。因此，必须在 <code>Task</code>  的代码中获得创建 <code>Task</code>  对象时的同一个 <code>CancellationToken</code> 。为此，最简单的办法就是使用一个 lambda 表达式，将  <code>CancellationToken</code>  作为闭包变量 “传递”。伸缩性好的软件不应该使线程阻塞。调用  <code>Wait</code> ，或者在任务尚未完成时查询任务的  <code>Result</code>  属性，极有可能造成线程池创建新线程，这增大了资源的消耗，也不利于性能和伸缩性。幸好，有更好的办法可以知道一个任务在什么时候结束运行。任务完成时可启动另一个任务。线程不会进入阻塞状态并等待这两个任务中的任何一个完成。相反，线程可以执行其他代码。如果线程本身就是一个线程池线程，它可以返回池中以执行其他操作。另外， <code>Task</code>  对象内部包含了  <code>ContinueWith</code>  任务的一个集合。所以，实际可以用一个  <code>Task</code>  对象来多次调用  <code>ContinueWith</code> 。任务完成时，所有 <code>ContinueWith</code>  任务都会进入线程池的队列中。此外，可在调用  <code>ContinueWith</code>  时传递对一组  <code>TaskContinuationOptions</code>  枚举值进行按位 OR 运算的结果。前 6 个标志 ( <code>None</code> ， <code>PreferFairness</code> ， <code>LongRunning</code> ， <code>AttachedToParent</code> ， <code>DenyChildAttach</code>  和  <code>HideScheduler</code> ) 与之前描述的  <code>TaskCreationOptions</code>  枚举类型提供的标志完全一致。默认情况下，如果不指定上述任何标志，则新任务无论如何都会运行，不管第一个任务如何完成。一个  <code>Task</code>  完成时，它的所有未运行的延续任务都被自动取消。一个任务创建的一个或多个  <code>Task</code>  对象默认是顶级任务，它们与创建它们的任务无关。但  <code>TaskCreationOptions.AttachedToParent</code>  标志将一个  <code>Task</code>  和创建它的  <code>Task</code>  关联，结果是除非所有子任务 (以及子任务的子任务) 结束运行，否则创建任务 (父任务) 不认为已经结束。调用  <code>ContinueWith</code>  方法创建  <code>Task</code>  时，可指定  <code>TaskCreationOptions.AttachedToParent</code>  标志将延续任务指定成子任务。每个  <code>Task</code>  对象都有一组字段，这些字段构成了任务的状态。其中包括一个  <code>Int32 ID</code>  (参见 <code>Task</code>  的只读 <code>Id</code>  属性)、代表 <code>Task</code>  执行状态的一个 <code>Int32</code> 、对父任务的引用、对 <code>Task</code>  创建时指定的  <code>TaskScheduler</code>  的引用、对回调方法的引用、对要传给回调方法的对象的引用 (可通过 <code>Task</code>  的只读 <code>AsyncState</code>  属性查询)、对  <code>ExecutionContext</code>  的引用以及对  <code>ManualResetEventSlim</code>  对象的引用。另外，每个  <code>Task</code>  对象都有对根据需要创建的补充状态的引用。补充状态包含一个  <code>CancellationToken</code>  、一个  <code>ContinueWithTask</code>  对象集合、为抛出未处理异常的子任务而准备的一个  <code>Task</code>  对象集合等。说了这么多，重点不需要任务的附加功能，那么使用  <code>ThreadPool.QueueUserWorkItem</code>  能获得更好的资源利用率。 <code>Task</code>  和  <code>Task&lt;TResult&gt;</code>  类实现了  <code>IDisposable</code>  接口，允许在用完  <code>Task</code>  对象后调用  <code>Dispose</code> 。如今，所有  <code>Dispose</code>  方法所做的都是关闭  <code>ManualResetEventSlim</code>  对象。但可定义从  <code>Task</code>  和  <code>Task&lt;TResult&gt;</code>  派生的类，在这些类中分配它们自己的资源，并在它们重写的  <code>Dispose</code>  方法中释放这些资源。不要在代码中为  <code>Task</code>  对象显式调用  <code>Dispose</code> ；相反，应该让垃圾回收器自己清理任何不再需要的资源。每个  <code>Task</code>  对象都包含代表  <code>Task</code>  唯一 ID 的  <code>Int32</code>  字段。创建  <code>Task</code>  对象时该字段初始化为零。首次查询  <code>Task</code>  的只读  <code>Id</code>  属性时，属性将一个唯一的  <code>Int32</code>  值分配给该字段，并返回该值。任务 ID 从 1 开始，没分配一个 ID 都递增 1。在一个  <code>Task</code>  对象的存在期间，可查询  <code>Task</code>  的只读  <code>Status</code>  属性了解它在其生存期的什么位置。首次构造  <code>Task</code>  对象时，它的状态是  <code>Created</code> 。以后，当任务启动时，它的状态变成  <code>WaitingToRun</code> 。 <code>Task</code>  实际在一个线程上运行时，它的状态变成  <code>Running</code> 。任务停止运行，状态变成  <code>WaitingForChildrenToComplete</code> 。任务完成时进入一下状态之一： <code>RanToCompletion</code>  (运行完成)， <code>Canceled</code>  (取消) 或 <code>Faulted</code>  (出错)。如果运行完成，可通过  <code>Task&lt;TResult&gt;</code>  的  <code>Result</code>  属性来查询任务结果。 <code>Task</code>  或  <code>Task&lt;TResult&gt;</code>  出错时，可查询  <code>Task</code>  的  <code>Exception</code>  属性来获得任务抛出的未处理异常；该属性总是返回一个  <code>AggregateException</code>  对象，对象的  <code>InnerException</code>  集合包含了所有未处理的异常。为简化编码， <code>Task</code>  提供了几个只读  <code>Boolean</code>  属性，包括  <code>IsCanceled</code> ， <code>IsFaulted</code>  和  <code>IsCompleted</code> 。注意当  <code>Task</code>  处于  <code>RanToCompletion</code> ， <code>Canceled</code>  或  <code>Faulted</code>  状态时， <code>IsCompleted</code>  返回  <code>true</code> 。调用  <code>ContinueWith</code> ， <code>ContinueWhenAll</code> ， <code>ContinueWhenAny</code>  或  <code>FromAsync</code>  等方法来创建的  <code>Task</code>  对象处于  <code>WaitingForActivation</code>  装填。该状态意味着  <code>Task</code>  的调度由任务基础结构控制。例如，不可显式启动通过调用  <code>ContinueWith</code>  来创建的对象，该  <code>Task</code>  在它的前置任务 (antecedent task) 执行完毕后自动启动。有时需要创建一组共享相同配置的  <code>Task</code>  对象。为避免机械地将相同的参数传给每个  <code>Task</code>  的构造器，可创建一个任务工厂来封装通用的配置。 <code>System.Threading.Tasks</code>  命名空间定义了一个  <code>TaskFactory</code>  类型和一个  <code>TaskFactory&lt;TResult&gt;</code>  类型。两个类型都派生自  <code>System.Object</code> ；也就是说，它们是平级的。要创建一组返回  <code>void</code>  的任务，就构造一个  <code>TaskFactory</code> ；要创建一组具有特定返回类型的任务，就构造一个  <code>TaskFactory&lt;TResult&gt;</code> ，并通过泛型  <code>TResult</code>  实参传递任务的返回类型。创建上述任何工厂类时，要向构造器传递工厂创建的所有任务都具有的默认值。具体地说，要向任务工厂传递希望任务具有的  <code>CancellationToken</code> ， <code>TaskScheduler</code> ， <code>TaskCreationOptions</code>  和  <code>TaskContinuationOptions</code>  设置。任务基础结构非常灵活，其中  <code>TaskScheduler</code>  对象功不可没。 <code>TaskScheduler</code>  对象负责执行被调度的任务，同时向 Visual Studio 调试器公开任务信息。FCL 提供了两个派生自  <code>TaskScheduler</code>  的类型：线程池任务调度器 (thread pool task scheduler)，和同步上下文任务调度器 (synchronization context task scheduler)。默认情况下，所有应用程序使用的都是线程池任务调度器。这个任务调度器将任务调度给线程池的工作者线程。可查询  <code>TaskScheduler</code>  的静态  <code>Default</code>  属性来获得对默认任务调度器的引用。</p>\n<h2 id=\"parallels-static-for-foreach-and-invoke-methods\"><a class=\"anchor\" href=\"#parallels-static-for-foreach-and-invoke-methods\">#</a> Parallel’s Static For, ForEach, and Invoke Methods</h2>\n<blockquote>\n<p>There are some common programming scenarios that can potentially benefit from the improved  performance possible with tasks. To simplify programming, the static System.Threading.Tasks. Parallel class encapsulates these common scenarios while using Task objects internally. For example, instead of processing all the items in a collection like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// One thread performs all this work sequentially</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>you can instead get multiple thread pool threads to assist in performing this work by using the  Parallel class’s For method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// The thread pool’s threads process the work in parallel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parallel<span class=\"token punctuation\">.</span><span class=\"token function\">For</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Similarly, if you have a collection, instead of doing this:</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// One thread performs all this work sequentially</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">)</span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>you can do this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// The thread pool's threads process the work in parallel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parallel<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">,</span> item <span class=\"token operator\">=></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>If you can use either For or ForEach in your code, then it is recommended that you use For because it executes faster.</p>\n</blockquote>\n<blockquote>\n<p>And finally, if you have several methods that you need to execute, you could execute them all  sequentially, like this:</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// One thread executes all the methods sequentially</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>or you could execute them in parallel, like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// The thread pool’s threads execute the methods in parallel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parallel<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>All of Parallel’s methods have the calling thread participate in the processing of the work, which  is good in terms of resource usage because we wouldn’t want the calling thread to just suspend itself  while waiting for thread pool threads to do all the work. However, if the calling thread finishes its  work before the thread pool threads complete their part of the work, then the calling thread will suspend itself until all the work is done, which is also good because this gives you the same semantics as  you’d have when using a for or foreach loop: the thread doesn’t continue running until all the work  is done. Also note that if any operation throws an unhandled exception, the Parallel method you  called will ultimately throw an AggregateException.</p>\n</blockquote>\n<blockquote>\n<p>Of course, you should not go through all your source code replacing for loops with calls to  Parallel.For and foreach loops with calls to Parallel.ForEach. When calling the Parallel method, there is an assumption that it is OK for the work items to be performed concurrently. Therefore, do not use the Parallel methods if the work must be processed in sequential order. Also, avoid  work items that modify any kind of shared data because the data could get corrupted if it is manipulated by multiple threads simultaneously. Normally, you would fix this by adding thread synchronization locks around the data access, but if you do this, then one thread at a time can access the data  and you would lose the benefit of processing multiple items in parallel.</p>\n</blockquote>\n<blockquote>\n<p>In addition, there is overhead associated with the Parallel methods; delegate objects have to  be allocated, and these delegates are invoked once for each work item. If you have lots of work items  that can be processed by multiple threads, then you might gain a performance increase. Also, if you  have lots of work to do for each item, then the performance hit of calling through the delegate is  negligible. You will actually hurt your performance if you use the Parallel methods for just a few  work items or for work items that are processed very quickly.</p>\n</blockquote>\n<blockquote>\n<p>I should mention that Parallel’s For, ForEach, and Invoke methods all have overloads that accept a ParallelOptions object, which looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParallelOptions</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">ParallelOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Allows cancellation of the operation</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CancellationToken</span> CancellationToken <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Default=CancellationToken.None</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Allows you to specify the maximum number of work items </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// that can be operated on concurrently</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int32</span> MaxDegreeOfParallelism <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Default=-1 (# of available CPUs)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Allows you to specify which TaskScheduler to use</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TaskScheduler</span> TaskScheduler <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Default=TaskScheduler.Default</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>In addition, there are overloads of the For and ForEach methods that let you pass three  delegates:</p>\n<ul>\n<li>\n<p>The task local initialization delegate (localInit) is invoked once for each task participating in  the work. This delegate is invoked before the task is asked to process a work item.</p>\n</li>\n<li>\n<p>The body delegate (body) is invoked once for each item being processed by the various  threads participating in the work.</p>\n</li>\n<li>\n<p>The task local finally delegate (localFinally) is invoked once for each task participating  in the work. This delegate is invoked after the task has processed all the work items that will  be dispatched to it. It is even invoked if the body delegate code experiences an unhandled  exception.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Here is some sample code that demonstrates the use of the three delegates by adding up the  bytes for all files contained within a directory.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Int64</span> <span class=\"token function\">DirectoryBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> searchPattern<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">SearchOption</span> searchOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> files <span class=\"token operator\">=</span> Directory<span class=\"token punctuation\">.</span><span class=\"token function\">EnumerateFiles</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> searchPattern<span class=\"token punctuation\">,</span> searchOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">Int64</span> masterTotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token class-name\">ParallelLoopResult</span> result <span class=\"token operator\">=</span> Parallel<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ForEach</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Int64<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> files<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// localInit: Invoked once per task at start</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Initialize that this task has seen 0 bytes</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set taskLocalTotal initial value to 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> loopState<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> taskLocalTotal<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// body: Invoked once per work item</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// Get this file's size and add it to this task's running total</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token class-name\">Int64</span> fileLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> fs <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">OpenRead</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> fileLength <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Ignore any files we can't access */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">return</span> taskLocalTotal <span class=\"token operator\">+</span> fileLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> taskLocalTotal <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// localFinally: Invoked once per task at end</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token comment\">// Atomically add this task's total to the \"master\" total</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> masterTotal<span class=\"token punctuation\">,</span> taskLocalTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token keyword\">return</span> masterTotal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Each task maintains its own running total (in the taskLocalTotal variable) for the files that it  is given. As each task completes its work, the master total is updated in a thread-safe way by calling the Interlocked.Add method (discussed in Chapter 29, “Primitive Thread Synchronization  Constructs”). Because each task has its own running total, no thread synchronization is required  during the processing of the items. Because thread synchronization would hurt performance, not  requiring thread synchronization is good. It’s only after each task returns that masterTotal has to  be updated in a thread-safe way, so the performance hit of calling Interlocked.Add occurs only  once per task instead of once per work item.</p>\n</blockquote>\n<blockquote>\n<p>You’ll notice that the body delegate is passed a ParallelLoopState object, which looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParallelLoopState</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsStopped <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Break</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int64<span class=\"token punctuation\">?</span></span> LowestBreakIteration<span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsExceptional <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> ShouldExitCurrentIteration <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Each task participating in the work gets its own ParallelLoopState object, and it can use this  object to interact with the other task participating in the work. The Stop method tells the loop to  stop processing any more work, and future querying of the IsStopped property will return true.  The Break method tells the loop to stop processing any items that are beyond the current item. For  example, let’s say that ForEach is told to process 100 items and Break is called while processing the  fifth item, then the loop will make sure that the first five items are processed before ForEach returns.  Note, however, that additional items may have been processed. The LowestBreakIteration property returns the lowest item number whose processing called the Break method. The LowestBreakIteration property returns null if Break was never called.</p>\n</blockquote>\n<blockquote>\n<p>The IsException property returns true if the processing of any item resulted in an unhandled  exception. If the processing of an item takes a long time, your code can query the ShouldExitCurrentIteration property to see if it should exit prematurely. This property returns true if  Stop was called, Break was called, the CancellationTokenSource (referred to by the ParallelOption’s CancellationToken property) is canceled, or if the processing of an item resulted in an  unhandled exception.</p>\n</blockquote>\n<blockquote>\n<p>Parallel’s For and ForEach methods both return a ParallelLoopResult instance, which  looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ParallelLoopResult</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// Returns false if the operation was ended prematurely</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> IsCompleted <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Int64<span class=\"token punctuation\">?</span></span> LowestBreakIteration<span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>You can examine the properties to determine the result of the loop. If IsCompleted returns  true, then the loop ran to completion and all the items were processed. If IsCompleted is false and LowestBreakIteration is null, then some thread participating in the work called the Stop method. If IsCompleted is false and LowestBreakIteration is not null, then some thread participating in the work called the Break method and the Int64 value returned from LowestBreakIteration indicates the index of the lowest item guaranteed to have been processed. If an exception  is thrown, then you should catch an AggregateException in order to recover gracefully.</p>\n</blockquote>\n<p>💡小结：一些常见的编程情形可通过任务提升性能。为简化编程，静态  <code>System.Threading.Tasks.Parallel</code>  类封装了这些情形，它内部使用  <code>Task</code>  对象。 <code>Parallel</code>  的所有方法都让调用线程参与处理。从资源利用的角度说，这是一件好事，因为我们不希望调用线程停下来 (阻塞)，等线程池线程做完所有工作才能继续。然而，如果调用线程在线程池线程完成自己额那一部分工作之前完成工作，调用线程会将自己挂起，直到所有工作完成工作。这也是一件好事，因为这提供了和使用普通 <code>for</code>  或  <code>foreach</code>  循环时相同的语义：线程要在所有工作完成后才继续运行。还要注意，如果任何操作抛出未处理的异常，你调用的  <code>Parallel</code>  方法最后会抛出一个  <code>AggregateException</code> 。但这并不是说需要对自己的源代码进行全文替换，将  <code>for</code>  循环替换成对  <code>Parallel.For</code>  的调用，将  <code>foreach</code>  循环替换成对  <code>Parallel.ForEach</code>  的调用。调用  <code>Parallel</code>  的方法时有一个很重要的前提条件：工作项必须能并行执行！所以，如果工作必须顺序执行，就不要使用  <code>Parallel</code>  的方法。另外，要避免会修改任何共享数据的工作项，否则多个线程同时处理可能会损坏数据。解决这个问题一般的办法是围绕数据访问添加线程同步锁。但这样一次就只能有一个线程访问数据，无法享受并行处理多个项所带来的好处。另外， <code>Parallel</code>  的方法本身也有开销；委托对象必须分配，而针对每个工作项都要调用一次这些委托。如果有大量可由多个线程处理的工作项，那么也许能获得性能的提升。另外，如果每一项都涉及大量工作，那么通过委托来调用所产生的性能损失是可以忽略不计的。但如果只为区区几个工作项使用  <code>Parallel</code>  的方法，或者为处理得非常快的工作项使用  <code>Parallel</code>  的方法，就会得不偿失，反而降低性能。</p>\n<h2 id=\"parallel-language-integrated-query\"><a class=\"anchor\" href=\"#parallel-language-integrated-query\">#</a> Parallel Language Integrated Query</h2>\n<blockquote>\n<p>Microsoft’s Language Integrated Query (LINQ) feature offers a convenient syntax for performing  queries over collections of data. Using LINQ, you can easily filter items, sort items, return a projected  set of items, and much more. When you use LINQ to Objects, only one thread processes all the items  in your data collection sequentially; we call this a sequential query. You can potentially improve the  performance of this processing by using Parallel LINQ, which can turn your sequential query into  a parallel query, which internally uses tasks (queued to the default TaskScheduler) to spread the  processing of the collection’s items across multiple CPUs so that multiple items are processed concurrently. Like Parallel’s methods, you will get the most benefit from Parallel LINQ if you have many  items to process or if the processing of each item is a lengthy compute-bound operation.</p>\n</blockquote>\n<blockquote>\n<p>The static System.Linq.ParallelEnumerable class (defined in System.Core.dll) implements all of the Parallel LINQ functionality, and so you must import the System.Linq namespace  into your source code via C#’s using directive. In particular, this class exposes parallel versions of  all the standard LINQ operators such as Where, Select, SelectMany, GroupBy, Join, OrderBy,  Skip, Take, and so on. All of these methods are extension methods that extend the System.Linq. ParallelQuery type. To have your LINQ to Objects query invoke the parallel versions of these  methods, you must convert your sequential query (based on IEnumerable or IEnumerable) to  a parallel query (based on ParallelQuery or ParallelQuery) using ParallelEnumerable’s  AsParallel extension method, which looks like this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">AsParallel</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery</span> <span class=\"token function\">AsParallel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable</span> source<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>Here is an example of a sequential query that has been converted to a parallel query. This query  returns all the obsolete methods defined within an assembly.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ObsoleteMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assembly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">from</span> type <span class=\"token keyword\">in</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetExportedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsParallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">from</span> method <span class=\"token keyword\">in</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">GetMethods</span><span class=\"token punctuation\">(</span>BindingFlags<span class=\"token punctuation\">.</span>Public <span class=\"token operator\">|</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> BindingFlags<span class=\"token punctuation\">.</span>Instance <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>Static<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">let</span> obsoleteAttrType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ObsoleteAttribute</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">where</span> <span class=\"token class-name\">Attribute</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> obsoleteAttrType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">orderby</span> type<span class=\"token punctuation\">.</span>FullName</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">let</span> obsoleteAttrObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ObsoleteAttribute<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Attribute<span class=\"token punctuation\">.</span><span class=\"token function\">GetCustomAttribute</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> obsoleteAttrType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">select</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type=&#123;0&#125;\\nMethod=&#123;1&#125;\\nMessage=&#123;2&#125;\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> type<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obsoleteAttrObj<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// Display the results</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token keyword\">in</span> query<span class=\"token punctuation\">)</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Although uncommon, within a query you can switch from performing parallel operations back to  performing sequential operations by calling ParallelEnumerable’s AsSequential method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">AsSequential</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>This method basically turns a ParallelQuery back to an IEnumerable so that operations  performed after calling AsSequential are performed by just one thread.</p>\n</blockquote>\n<blockquote>\n<p>Normally, the resulting data produced by a LINQ query is evaluated by having some thread  execute a foreach statement (as shown earlier). This means that just one thread iterates over all the  query’s results. If you want to have the query’s results processed in parallel, then you should process  the resulting query by using ParallelEnumerable’s ForAll method.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">ForAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>This method allows multiple threads to process the results simultaneously. I could modify my code  earlier to use this method as follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Display the results</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>query<span class=\"token punctuation\">.</span><span class=\"token function\">ForAll</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>However, having multiple threads call Console.WriteLine simultaneously actually hurts performance, because the Console class internally synchronizes threads, ensuring that only one at a time  can access the console window. This prevents text from multiple threads from being interspersed,  making the output unintelligible. Use the ForAll method when you intend to perform calculations  on each result.</p>\n</blockquote>\n<blockquote>\n<p>Because Parallel LINQ processes items by using multiple threads, the items are processed concurrently and the results are returned in an unordered fashion. If you need to have Parallel LINQ  preserve the order of items as they are processed, then you can call ParallelEnumerable’s AsOrdered method. When you call this method, threads will process items in groups and then the  groups are merged back together, preserving the order; this will hurt performance. The following  operators produce unordered operations: Distinct, Except, Intersect, Union, Join, GroupBy, GroupJoin, and ToLookup. If you want to enforce ordering again after one of these operators, just  call the AsOrdered method.</p>\n</blockquote>\n<blockquote>\n<p>The following operators produce ordered operations: OrderBy, OrderByDescending, ThenBy,  and ThenByDescending. If you want to go back to unordered processing again to improve performance after one of these operators, just call the AsUnordered method.</p>\n</blockquote>\n<blockquote>\n<p>Parallel LINQ offers some additional ParallelEnumerable methods that you can call to control  how the query is processed.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">WithCancellation</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> CancellationTokencancellationToken<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">WithDegreeOfParallelism</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> Int32degreeOfParallelism<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">WithExecutionMode</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> ParallelExecutionModeexecutionMode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">WithMergeOptions</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">this</span> <span class=\"token class-name\">ParallelQuery<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> ParallelMergeOptionsmergeOptions<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>Obviously, the WithCancellation method allows you to pass a CancellationToken so that  the query processing can be stopped prematurely. The WithDegreeOfParallelism method specifies the maximum number of threads allowed to process the query; it does not force the threads to  be created if not all of them are necessary. Usually you will not call this method, and, by default, the  query will execute using one thread per core. However, you could call WIthDegreeOfParallelism,  passing a number that is smaller than the number of available cores if you want to keep some cores  available for doing other work. You could also pass a number that is greater than the number of cores  if the query performs synchronous I/O operations because threads will be blocking during these operations. This wastes more threads but can produce the final result in less time. You might consider  doing this in a client application, but I’d highly recommend against performing synchronous I/O  operations in a server application.</p>\n</blockquote>\n<blockquote>\n<p>Parallel LINQ analyzes a query and then decides how to best process it. Sometimes processing a  query sequentially yields better performance. This is usually true when using any of these operations:  Concat, ElementAt(OrDefault), First(OrDefault), Last(OrDefault), Skip(While), Take(While),  or Zip. It is also true when using overloads of Select(Many) or Where that pass a position index into  your selector or predicate delegate. However, you can force a query to be processed in parallel  by calling WithExecutionMode, passing it one of the ParallelExecutionMode flags.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ParallelExecutionMode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> Default <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Let Parallel LINQ decide to best process the query</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> ForceParallelism <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// Force the query to be processed in parallel</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>As mentioned before, Parallel LINQ has multiple threads processing items, and then the results  must be merged back together. You can control how the items are buffered and merged by calling  WithMergeOptions, passing it one of the ParallelMergeOptions flags.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ParallelMergeOptions</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> Default <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Same as AutoBuffered today (could change in the future)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> NotBuffered <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Results are processed as ready</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> AutoBuffered <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Each thread buffers some results before processed</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> FullyBuffered <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// Each thread buffers all results before processed</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>These options basically give you some control over speed versus memory consumption. NotBuffered saves memory but processes items slower. FullyBuffered consumes more memory while  running fastest. AutoBuffered is the compromise in between NotBuffered and FullyBuffered.  Really, the best way to know which of these to choose for any given query is to try them all and compare their performance results, or just accept the default, which tends to work pretty well for many  queries. See the following blog posts for more information about how Parallel LINQ partitions work  across CPU cores:</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2dzLm1zZG4uY29tL3BmeHRlYW0vYXJjaGl2ZS8yMDA5LzA1LzI4Lzk2NDg2NzIuYXNweA==\">http://blogs.msdn.com/pfxteam/archive/2009/05/28/9648672.aspx</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2dzLm1zZG4uY29tL3BmeHRlYW0vYXJjaGl2ZS8yMDA5LzA2LzEzLzk3NDEwNzIuYXNweA==\">http://blogs.msdn.com/pfxteam/archive/2009/06/13/9741072.aspx</span></p>\n</li>\n</ul>\n</blockquote>\n<p>💡小结：Microsoft 的语言集成查询 (Language Integrated Query，LINQ) 功能提供了一个简捷的语法来查询数据集合。可用 LINQ 轻松对数据项进行筛选、排序、投射等操作。使用 LINQ to Objects 时，只有一个线程顺序处理数据集合中的所有项；我们称之为<strong>顺序查询</strong> (sequential query)。要提高处理性能，可以使用<strong>并行 LINQ</strong> (Parallel LINQ)，它将顺序查询转换成并行查询，在内部使用任务 (排队给默认  <code>TaskScheduler</code> )，将集合中的数据项的处理工作分散到多个 CPU 上，以便并发处理多个数据项。和  <code>Parallel</code>  的方法相似，要同时处理大量项，或者每一项的处理过程都是一个耗时的计算限制的操作，那么能从并行 LINQ 获得最大的收益。</p>\n<h2 id=\"performing-a-periodic-compute-bound-operation\"><a class=\"anchor\" href=\"#performing-a-periodic-compute-bound-operation\">#</a> Performing a Periodic Compute-Bound Operation</h2>\n<blockquote>\n<p>The System.Threading namespace defines a Timer class, which you can use to have a thread pool  thread call a method periodically. When you construct an instance of the Timer class, you are telling  the thread pool that you want a method of yours called back at a future time that you specify. The  Timer class offers several constructors, all quite similar to each other.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MarshalByRefObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimerCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimerCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimerCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int64</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int64</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimerCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Timespan</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>All four constructors construct a Timer object identically. The callback parameter identifies  the method that you want called back by a thread pool thread. Of course, the callback method that  you write must match the System.Threading.TimerCallback delegate type, which is defined as  follows.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TimerCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>The constructor’s state parameter allows you to pass state data to the callback method each time  it is invoked; you can pass null if you have no state data to pass. You use the dueTime parameter to  tell the CLR how many milliseconds to wait before calling your callback method for the very first time.  You can specify the number of milliseconds by using a signed or unsigned 32-bit value, a signed 64- bit value, or a TimeSpan value. If you want the callback method called immediately, specify 0 for the  dueTime parameter. The last parameter, period, allows you to specify how long, in milliseconds, to  wait before each successive call to the callback method. If you pass Timeout.Infinite (-1) for this  parameter, a thread pool thread will call the callback method just once.</p>\n</blockquote>\n<blockquote>\n<p>Internally, the thread pool has just one thread that it uses for all Timer objects. This thread knows  when the next Timer object’s time is due. When the next Timer object is due, the thread wakes  up, and internally calls ThreadPool’s QueueUserWorkItem to enter an entry into the thread pool’s  queue, causing your callback method to get called. If your callback method takes a long time to  execute, the timer could go off again. This could cause multiple thread pool threads to be executing your callback method simultaneously. To work around this problem, I recommend the following:  construct the Timer specifying Timeout.Infinite for the period parameter. Now, the timer will  fire only once. Then, in your callback method, call the Change method specifying a new due time  and again specify Timeout.Infinite for the period parameter. Here is what the Change method  overloads look like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MarshalByRefObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int32</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int32</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int64</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int64</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeSpan</span> dueTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The Timer class also offers a Dispose method that allows you to cancel the timer altogether and  optionally signal the kernel object identified by the notifyObject parameter when all pending callbacks for the time have completed. Here is what the Dispose method overloads look like.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MarshalByRefObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Boolean</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitHandle</span> notifyObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>💡重要提示： <code>Timer</code>  对象被垃圾回收时，它的终结代码告诉线程池取消计时器，使它不再触发。所以，使用  <code>Timer</code>  对象时，要确定有一个变量在保持  <code>Timer</code>  对象的存活，否则对你的回调方法的调用就会停止。21.1.3 节 “垃圾回收与调试” 对此进行了详细讨论和演示。</p>\n<blockquote>\n<p>The following code demonstrates how to have a thread pool thread call a method starting immediately and then every two seconds thereafter.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimerDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Timer</span> s_timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking status every 2 seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Create the Timer ensuring that it never fires. This ensures that</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// s_timer refers to it BEFORE Status is invoked by a thread pool thread</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> s_timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Timer</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Now that s_timer is assigned to, we can let the timer fire knowing</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// that calling Change in Status will not throw a NullReferenceException</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> s_timer<span class=\"token punctuation\">.</span><span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prevent the process from terminating</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// This method's signature must match the TimerCallback delegate</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// This method is executed by a thread pool thread</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In Status at &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulates other work (1 second)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// Just before returning, have the Timer fire again in 2 seconds</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> s_timer<span class=\"token punctuation\">.</span><span class=\"token function\">Change</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// When this method returns, the thread goes back</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">// to the pool and waits for another work item</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>If you have an operation you want performed periodically, there is another way you can structure  your code by taking advantage of Task’s static Delay method along with C#’s async and await keywords (discussed extensively in Chapter 28). Here is a rewrite of the preceding code demonstrating this.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking status every 2 seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prevent the process from terminating</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// This method can take whatever parameters you desire</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking status at &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// Put code to check status here...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// At end of loop, delay 2 seconds without blocking a thread</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// await allows thread to return</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// After 2 seconds, some thread will continue after await to loop around</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"so-many-timers-so-little-time\"><a class=\"anchor\" href=\"#so-many-timers-so-little-time\">#</a> So Many Timers, So Little Time</h3>\n<blockquote>\n<p>Unfortunately, the FCL actually ships with several timers, and it is not clear to most programmers what  makes each timer unique. Let me attempt to explain:</p>\n<ul>\n<li>\n<p>System.Threading’s Timer class This is the timer discussed in the previous section, and it is  the best timer to use when you want to perform periodic background tasks on a thread pool  thread.</p>\n</li>\n<li>\n<p>System.Windows.Forms’s Timer class Constructing an instance of this class tells Windows  to associate a timer with the calling thread (see the Win32 SetTimer function). When this  timer goes off, Windows injects a timer message (WM_TIMER) into the thread’s message queue.  The thread must execute a message pump that extracts these messages and dispatches them  to the desired callback method. Notice that all of the work is done by just one thread—the  thread that sets the timer is guaranteed to be the thread that executes the callback method.  This also means that your timer method will not be executed by multiple threads concurrently.</p>\n</li>\n<li>\n<p>System.Windows.Threading’s DispatcherTimer class This class is the equivalent of the  System.Windows.Forms’s Timer class for Silverlight and WPF applications.</p>\n</li>\n<li>\n<p>Windows.UI.Xaml’s DispatcherTimer class This class is the equivalent of the System. Windows.Forms’s Timer class for Windows Store apps.</p>\n</li>\n<li>\n<p>System.Timers’s Timer class This timer is basically a wrapper around System.Threading’s  Timer class that causes the CLR to queue events into the thread pool when the timer comes  due. The System.Timers.Timer class is derived from System.ComponentModel’s Component class, which allows these timer objects to be placed on a design surface in Visual Studio.  Also, it exposes properties and events, allowing it to be used more easily from Visual Studio’s  designer. This class was added to the FCL years ago while Microsoft was still sorting out the  threading and timer stuff. This class probably should have been removed so that everyone  would be using the System.Threading.Timer class instead. In fact, I never use the System. Timers.Timer class, and I’d discourage you from using it, too, unless you really want a timer  on a design surface.</p>\n</li>\n</ul>\n</blockquote>\n<p>💡小结： <code>System.Threading</code>  命名空间定义了一个  <code>Timer</code>  类，可用它让一个线程池线程定时调用一个方法。构造  <code>Timer</code>  类的实例相当于告诉线程池：在将来某个时间 (具体由你指定) 回调你的一个方法。在内部，线程池为所有  <code>Timer</code>  对象只使用了一个线程。这个线程知道下一个  <code>Timer</code>  对象在什么时候到期 (计时器还有多久触发)。下一个  <code>Timer</code>  对象到期时，线程就会唤醒，在内部调用  <code>ThreadPool</code>  的  <code>QueueUserWorkItem</code> ， 将一个工作项添加到线程池的队列中，使你的回调方法得到调用。如果回调方法的执行时间很长，计时器可能 (在上个回调还没有完成的时候) 再次触发。这可能造成多个线程池线程同时执行你的回调方法。为解决这个问题，我的建议是：构造  <code>Timer</code>  时，为  <code>period</code>  参数指定  <code>Timeout.Infinite</code> 。这样，计时器就只触发一次。然后，在你的回调方法中，调用  <code>Change</code>  方法来指定一个新的  <code>dueTime</code> ，并再次为  <code>period</code>  参数指定  <code>Timeout.Infinite</code> 。 <code>Timer</code>  类还提供了一个  <code>Dispose</code>  方法，允许完全取消计时器，并可在当时处于 pending 状态的所有回调完成之后，向  <code>notifyObject</code>  参数标识的内核对象发出信号。</p>\n<h2 id=\"how-the-thread-pool-manages-its-threads\"><a class=\"anchor\" href=\"#how-the-thread-pool-manages-its-threads\">#</a> How the Thread Pool Manages Its Threads</h2>\n<blockquote>\n<p>Now I’d like to talk about how the thread pool code manages worker and I/O threads. However, I  don’t want to go into a lot of detail, because the internal implementation has changed greatly over  the years with each version of the CLR, and it will continue changing with future versions. It is best to  think of the thread pool as a black box. The black box is not perfect for any one application, because  it is a general purpose thread-scheduling technology designed to work with a large myriad of applications; it will work better for some applications than for others. It works very well today, and I highly  recommend that you trust it, because it would be very hard for you to produce a thread pool that  works better than the one shipping in the CLR. And, over time, most applications should improve as  the thread pool code internally changes how it manages threads.</p>\n</blockquote>\n<h3 id=\"setting-thread-pool-limits\"><a class=\"anchor\" href=\"#setting-thread-pool-limits\">#</a> Setting Thread Pool Limits</h3>\n<blockquote>\n<p>The CLR allows developers to set a maximum number of threads that the thread pool will create.  However, it turns out that thread pools should never place an upper limit on the number of threads  in the pool because starvation or deadlock might occur. Imagine queuing 1,000 work items that all  block on an event that is signaled by the 1,001st item. If you’ve set a maximum of 1,000 threads, the  1,001st work item won’t be executed, and all 1,000 threads will be blocked forever, forcing end users  to terminate the application and lose all their work. Also, it is very unusual for developers to artificially  limit the resources that they have available to their application. For example, would you ever start  your application and tell the system you’d like to restrict the amount of memory that the application  can use or limit the amount of network bandwidth that your application can use? Yet, for some reason, developers feel compelled to limit the number of threads that the thread pool can have.</p>\n</blockquote>\n<blockquote>\n<p>Because customers have had starvation and deadlock issues, the CLR team has steadily increased  the default maximum number of threads that the thread pool can have. The default maximum is  now about 1,000 threads, which is effectively limitless because a 32-bit process has at most 2 GB of  usable address space within it. After a bunch of Win32 DLLs load, the CLR DLLs load, the native heap  and the managed heap is allocated, there is approximately 1.5 GB of address space left over. Because  each thread requires more than 1 MB of memory for its user-mode stack and thread environment  block (TEB), the most threads you can get in a 32-bit process is about 1,360. Attempting to create  more threads than this will result in an OutOfMemoryException being thrown. Of course, a 64-bit  process offers 8 terabytes of address space, so you could theoretically create hundreds of thousands  of threads. But allocating anywhere near this number of threads is really just a waste of resources,  especially when the ideal number of threads to have is equal to the number of CPUs in the machine.  What the CLR team should do is remove the limits entirely, but they can’t do this now because doing  so might break some applications that expect thread pool limits to exist.</p>\n</blockquote>\n<blockquote>\n<p>The System.Threading.ThreadPool class offers several static methods that you can call to  manipulate the number of threads in the thread pool: GetMaxThreads, SetMaxThreads, GetMinThreads, SetMinThreads, and GetAvailableThreads. I highly recommend that you do not call  any of these methods. Playing with thread pool limits usually results in making an application perform  worse, not better. If you think that your application needs hundreds or thousands of threads, there  is something seriously wrong with the architecture of your application and the way that it’s using  threads. This chapter and Chapter 28 demonstrate the proper way to use threads.</p>\n</blockquote>\n<h3 id=\"how-worker-threads-are-managed\"><a class=\"anchor\" href=\"#how-worker-threads-are-managed\">#</a> How Worker Threads Are Managed</h3>\n<blockquote>\n<p>Figure 27-1 shows the various data structures that make up the worker threads' part of the thread  pool. The ThreadPool.QueueUserWorkItem method and the Timer class always queue work  items to the global queue. Worker threads pull items from this queue using a first-in-first-out (FIFO)  algorithm and process them. Because multiple worker threads can be removing items from the global  queue simultaneously, all worker threads contend on a thread synchronization lock to ensure that  two or more threads don’t take the same work item. This thread synchronization lock can become a  bottleneck in some applications, thereby limiting scalability and performance to some degree.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/07/csharp/clr-via-csharp/Chapter%2027%20Compute-Bound%20Asynchronous%20Operations/image-20230206220449823.png\" alt=\"image-20230206220449823\" /></p>\n<blockquote>\n<p>Now let’s talk about Task objects scheduled using the default TaskScheduler (obtained by  querying TaskScheduler’s static Default property).4 When a non-worker thread schedules a Task,  the Task is added to the global queue. But, each worker thread has its own local queue, and when a  worker thread schedules a Task, the Task is added to calling the thread’s local queue.</p>\n</blockquote>\n<blockquote>\n<p>When a worker thread is ready to process an item, it always checks its local queue for a Task first.  If a Task exists, the worker thread removes the Task from its local queue and processes the item.  Note that a worker thread pulls tasks from its local queue by using a last-in-first-out (LIFO) algorithm.  Because a worker thread is the only thread allowed to access the head of its own local queue, no  thread synchronization lock is required and adding and removing Tasks from the queue is very fast.  A side effect of this behavior is that Tasks are executed in the reverse order that they were queued.</p>\n</blockquote>\n<p>💡重要提示：线程池从来不保证排队中的工作项的处理顺序。这是合理的，尤其是考虑到多个线程可能同时处理工作项。但上述副作用使这个问题变得恶化了。你必须保证自己的应用程序对于工作项或  <code>Task</code>  的执行顺序不作任何预设。</p>\n<blockquote>\n<p>If a worker thread sees that its local queue is empty, then the worker thread will attempt to steal  a Task from another worker thread’s local queue. Tasks are stolen from the tail of a local queue and  require that a thread synchronization lock be taken, which hurts performance a little bit. Of course,  the hope is that stealing rarely occurs, so this lock is taken rarely. If all the local queues are empty,  then the worker thread will extract an item from the global queue (taking its lock) using the FIFO  algorithm. If the global queue is empty, then the worker thread puts itself to sleep waiting for something to show up. If it sleeps for a long time, then it will wake itself up and destroy itself, allowing the  system to reclaim the resources (kernel object, stacks, TEB) that were used by the thread.</p>\n</blockquote>\n<blockquote>\n<p>The thread pool will quickly create worker threads so that the number of worker threads is equal  to the value pass to ThreadPool’s SetMinThreads method. If you never call this method (and it’s  recommended that you never call this method), then the default value is equal to the number of CPUs  that your process is allowed to use as determined by your process’s affinity mask. Usually your process  is allowed to use all the CPUs on the machine, so the thread pool will quickly create worker threads  up to the number of CPUs on the machine. After this many threads have been created, the thread  pool monitors the completion rate of work items and if items are taking a long time to complete  (the meaning of which is not documented), it creates more worker threads. If items start completing  quickly, then worker threads will be destroyed.</p>\n</blockquote>\n<p>💡小结：CLR 允许开发人员设置线程池要创建的最大线程数。但实践证明，线程池永远都不应该设置线程数上限，因为可能发生饥饿或死锁。 <code>System.Threading.ThreadPool</code>  类提供了几个静态方法，可调用它们设置和查询线程池的线程数： <code>GetMaxThreads</code> ， <code>SetMaxThreads</code> ， <code>GetMinThreads</code> ， <code>SetMinThreads</code>  和  <code>GetAvailableThreads</code> 。强烈建议不要调用上述任何方法。限制线程池的线程数，一般都只会造成应用程序的性能变得更差，而不是更好。如果认为自己的应用程序需要几百或几千个线程，表明你的应用程序的架构和使用线程的方式已出现严重问题。 <code>ThreadPool.QueueUserWorkItem</code>  方法和  <code>Timer</code>  类总是将工作项放到全局队列中。工作者线程采用一个先入先出 (first-in-first-out，FIFO) 算法将工作项从这个队列中取出，并处理它们。由于多个工作者线程可能同时从全局队列中拿走工作项，所以所有工作者线程都竞争一个线程同步锁，以保证两个或多个线程不会获取同一个工作项。这个线程同步锁在某些应用程序中可能成为瓶颈，对伸缩性和性能造成某种程度的限制。使用默认  <code>TaskScheduler</code>  (查询  <code>TaskScheduler</code>  的静态  <code>Default</code>  属性获得) 来调度的  <code>Task</code>  对象，非工作者线程调度一个  <code>Task</code>  时，该  <code>Task</code>  被添加到全局队列。但每个工作者线程都有自己的本地队列。工作者线程调度一个  <code>Task</code>  时，该 <code>Task</code>  被添加到调用线程的本地队列。工作者线程准备好处理工作项时，它总是先检查本地队列来查找一个  <code>Task</code> 。存在一个  <code>Task</code> ，工作者线程就从本地队列移除  <code>Task</code>  并处理工作项。要注意的是，工作者线程采用后入先出 (LIFO) 算法将任务从本地队列取出。由于工作者线程是唯一允许访问它自己的本地队列头的线程，所以无需同步锁，而且在队列中添加和删除  <code>Task</code>  的速度非常快。这个行为的副作用是  <code>Task</code>  按照和进入队列时相反的顺序执行。如果工作者线程发现它的本地队列变空了，会尝试从另一个工作者线程的本地队列 “偷” 一个  <code>Task</code> 。 这个  <code>Task</code>  是从本地队列的尾部 “偷” 走的，并要求获取一个线程同步锁，这对性能有少许影响。当然，希望这种 “偷盗” 行为很少发生，从而很少需要获取锁。如果所有本地队列都变空，那么工作者线程会使用 FIFO 算法，从全局队列提取一个工作项 (取得它的锁)。如果全局队列也为空，工作者线程会进入睡眠状态，等待事情的发生。如果睡眠了太长时间，它会自己醒来，并销毁自身，允许系统回收线程使用的资源 (内核对象、栈、TEB 等)。线程池会快速创建工作者线程，使工作者线程的数量等于传给  <code>ThreadPool</code>  的  <code>SetMinThreads</code>  方法的值。如果从不调用这个方法 (也建议你永远不调用这个方法)，那么默认值等于你的进程允许使用的 CPU 数量，这是由进程的 affinity mask (关联掩码) 决定的。通常，你的进程允许使用机器上的所有 CPU，所以线程池创建的工作者线程数量很快就会达到机器的 CPU 数。创建了这么多 (CPU 数量) 的线程后，线程池会监视工作项的完成速度。如果工作项完成的时间太长 (具体多长没有正式公布)，线程池会创建更多的工作者线程。如果工作项的完成速度开始变快，工作者线程会被销毁。</p>\n",
            "tags": [
                "CSharp",
                "CLR-via-CSharp",
                "读书笔记",
                "C#"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/",
            "url": "http://sakupinera.github.io/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/",
            "title": "CLR via C# - Chapter 26 Thread Basics",
            "date_published": "2023-02-05T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-26-thread-basics\"><a class=\"anchor\" href=\"#chapter-26-thread-basics\">#</a> Chapter 26 Thread Basics</h1>\n<h2 id=\"why-does-windows-support-threads\"><a class=\"anchor\" href=\"#why-does-windows-support-threads\">#</a> Why Does Windows Support Threads?</h2>\n<blockquote>\n<p>Back in the early days of computers, operating systems didn’t offer the concept of a thread. In effect,  there was just one thread of execution that ran throughout the entire system, which included both  operating system code and application code. The problem with having only one thread of execution  was that a long-running task would prevent other tasks from executing. For example, in the days of  16-bit Windows, it was very common for an application that was printing a document to stall the  entire machine, causing the operating system and all other applications to stop responding. And,  sometimes applications would have a bug in them, resulting in an infinite loop that also stopped the  entire machine from operating.</p>\n</blockquote>\n<blockquote>\n<p>At this point, the end user would have no choice but to reboot the computer by pressing the reset  button or power switch. Of course, end users hated doing this (they still do, in fact) because all running applications terminated; more importantly, any data that these applications were processing was  thrown out of memory and lost. Microsoft knew that 16-bit Windows would not be a good enough  operating system to keep Microsoft relevant as the computer industry progressed, so they set out to  build a new operating system to address the needs of corporations and individuals. This new operating system had to be robust, reliable, scalable, and secure, and it had to improve the many deficiencies of 16-bit Windows. This operating system kernel originally shipped in Windows NT. Over the  years, this kernel has had many tweaks and features added to it. The latest version of this kernel ships  in the latest versions of the Microsoft client and server Windows operating systems.</p>\n</blockquote>\n<blockquote>\n<p>When Microsoft was designing this operating system kernel, they decided to run each instance of  an application in what is called a process. A process is just a collection of resources that is used by a  single instance of an application. Each process is given a virtual address space, ensuring that the code  and data used by one process is not accessible to another process. This makes application instances  robust because one process cannot corrupt code or data being used by another. In addition, the operating system’s kernel code and data are not accessible to processes; therefore, it’s not possible for  application code to corrupt operating system code or data. So now, application code cannot corrupt  other applications or the operating system itself, and the whole computing experience is much better  for end users. In addition, the system is more secure because application code cannot access user  names, passwords, credit card information, or other sensitive information that is in use by another application or the operating system itself.</p>\n</blockquote>\n<blockquote>\n<p>This is all well and good, but what about the CPU itself? What if an application enters an infinite  loop? Well, if there is only one CPU in the machine, then it executes the infinite loop and cannot execute anything else, so although the data cannot be corrupted and is more secure, the system could  still stop responding to the end user. Microsoft needed to fix this problem, too, and threads were the  answer. A thread is a Windows concept whose job is to virtualize the CPU. Windows gives each process its very own thread (which functions similar to a CPU), and if application code enters an infinite  loop, the process associated with that code freezes up, but other processes (which have their own  threads) are not frozen; they keep running!</p>\n</blockquote>\n<p>💡小结：在计算机的早期岁月，操作系统没有线程的概念。事实上，整个系统只运行着一个执行线程，其中同时包含操作系统代码和应用程序代码。只用一个执行线程的问题在于，长时间运行的任务回阻止其他任务执行。Microsoft 在设计新的 OS 内核时，决定在一个进程中运行应用程序的每个实例。进程实际是应用程序的实例要使用的资源的集合。每个进程都被赋予了一个虚拟地址空间，确保在一个进程中使用的代码和数据无法由另一个进程访问。这就确保了应用程序实例的健壮性，因为一个进程无法破坏另一个进程使用的代码或数据。此外，进程访问不了 OS 的内核代码和数据；所以应用程序代码破坏不了操作系统代码或数据。但就这样还不够，如果机器只有一个 CPU，它会执行死循环，不能执行其他任何东西。所以，虽然数据无法被破坏，而且更安全，但系统仍然可能停止响应。Microsoft 需要修复这个问题，它们拿出的方案就是线程。作为一个 Windows 概念。线程的职责是对 CPU 进行虚拟化。Windows 为每个进程都提供了该进程专用的线程（功能相当于一个 CPU）。应用程序的代码进入死循环，与那个代码关联的进程会 “冻结”，但其他进程（它们有自己的线程）不会冻结，它们会继续执行。</p>\n<h2 id=\"thread-overhead\"><a class=\"anchor\" href=\"#thread-overhead\">#</a> Thread Overhead</h2>\n<blockquote>\n<p>Threads are awesome because they enable Windows to be responsive even when applications are  executing long-running tasks. Also, threads allow the user to use one application (like Task Manager) to forcibly kill an application that appears frozen because it is executing a long-running task. But as  with every virtualization mechanism, threads have space (memory consumption) and time (runtime  execution performance) overhead associated with them.</p>\n</blockquote>\n<blockquote>\n<p>Let’s explore this overhead in more detail now. Every thread has one of each of the following:</p>\n<ul>\n<li>\n<p>Thread kernel object The operating system allocates and initializes one of these data structures for each thread created in the system. The data structure contains a bunch of properties  (discussed later in this chapter) that describe the thread. This data structure also contains what  is called the thread’s context. The context is a block of memory that contains a set of the CPU’s  registers. For the x86, x64, and ARM CPU architectures, the thread’s context uses approximately 700, 1,240, or 350 bytes of memory, respectively.</p>\n</li>\n<li>\n<p>Thread environment block (TEB) The TEB is a block of memory allocated and initialized in  user mode (address space that application code can quickly access). The TEB consumes 1 page  of memory (4 KB on x86, x64 CPUs, and ARM CPUs). The TEB contains the head of the thread’s  exception-handling chain. Each try block that the thread enters inserts a node in the head of  this chain; the node is removed from the chain when the thread exits the try block. In addition, the TEB contains the thread’s thread-local storage data and some data structures for use  by Graphics Device Interface (GDI) and OpenGL graphics.</p>\n</li>\n<li>\n<p>User-mode stack The user-mode stack is used for local variables and arguments passed to  methods. It also contains the address indicating what the thread should execute next when  the current method returns. By default, Windows allocates 1 MB of memory for each thread’s  user-mode stack. More specifically, Windows reserves the 1 MB of address space and sparsely  commits physical storage to it as the thread actually requires it when growing the stack.</p>\n</li>\n<li>\n<p>Kernel-mode stack The kernel-mode stack is also used when application code passes  arguments to a kernel-mode function in the operating system. For security reasons, Windows  copies any arguments passed from user-mode code to the kernel from the thread’s user-mode  stack to the thread’s kernel-mode stack. Once copied, the kernel can verify the arguments’  values, and because the application code can’t access the kernel-mode stack, the application  can’t modify the arguments’ values after they have been validated and the operating system  kernel code begins to operate on them. In addition, the kernel calls methods within itself and  uses the kernel-mode stack to pass its own arguments, to store a function’s local variables, and  to store return addresses. The kernel-mode stack is 12 KB when running on a 32-bit Windows  system and 24 KB when running on a 64-bit Windows system.</p>\n</li>\n<li>\n<p>DLL thread-attach and thread-detach notifications Windows has a policy that whenever  a thread is created in a process, all unmanaged DLLs loaded in that process have their DllMain method called, passing a DLL_THREAD_ATTACH flag. Similarly, whenever a thread dies, all  DLLs in the process have their DllMain method called, passing it a DLL_THREAD_DETACH flag.  Some DLLs need these notifications to perform some special initialization or cleanup for each  thread created/destroyed in the process. For example, the C-Runtime library DLL allocates  some thread-local storage state that is required should the thread use functions contained  within the C-Runtime library.</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>In the early days of Windows, many processes had maybe 5 or 6 DLLs loaded into them, but today,  some processes have several hundred DLLs loaded into them. Right now, on my machine, Microsoft  Visual Studio has about 470 DLLs loaded into its process address space! This means that whenever a  new thread is created in Visual Studio, 470 DLL functions must get called before the thread is allowed  to do what it was created to do. And these 470 functions must be called again whenever a thread in  Visual Studio dies. Wow—this can seriously affect the performance of creating and destroying threads  within a process.</p>\n</blockquote>\n<blockquote>\n<p>So now, you see all the space and time overhead that is associated with creating a thread, letting  it sit around in the system, and destroying it. But the situation gets even worse—now we’re going to  start talking about context switching. A computer with only one CPU in it can do only one thing at a  time. Therefore, Windows has to share the actual CPU hardware among all the threads (logical CPUs)  that are sitting around in the system.</p>\n</blockquote>\n<blockquote>\n<p>At any given moment in time, Windows assigns one thread to a CPU. That thread is allowed to run  for a time-slice (sometimes referred to as a quantum). When the time-slice expires, Windows context  switches to another thread. Every context switch requires that Windows performs the following actions:</p>\n<ol>\n<li>Save the values in the CPU’s registers to the currently running thread’s context structure inside  the thread’s kernel object.</li>\n<li>Select one thread from the set of existing threads to schedule next. If this thread is owned by  another process, then Windows must also switch the virtual address space seen by the CPU  before it starts executing any code or touching any data.</li>\n<li>Load the values in the selected thread’s context structure into the CPU’s registers.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>After the context switch is complete, the CPU executes the selected thread until its time-slice  expires, and then another context switch happens again. Windows performs context switches about  every 30 ms. Context switches are pure overhead; that is, there is no memory or performance benefit  that comes from context switches. Windows performs context switching to provide end users with a  robust and responsive operating system.</p>\n</blockquote>\n<blockquote>\n<p>Now, if an application’s thread enters into an infinite loop, Windows will periodically preempt  that thread, assign a different thread to an actual CPU, and let this other thread run for a while. This  other thread could be Task Manager’s thread and now, the end user can use Task Manager to kill the  process containing the thread that is in an infinite loop. When doing this, the process dies and all the  data it was working on is destroyed, too, but all other processes in the system continue to run just  fine without losing their data. Of course, the user doesn’t have to reset the machine and reboot, so  context switches are required to provide end users with a much better overall experience at the cost  of performance.</p>\n</blockquote>\n<blockquote>\n<p>In fact, the performance hit is much worse than you might think. Yes, a performance hit occurs  when Windows context switches to another thread. But the CPU was executing another thread, and  the previously running thread’s code and data reside in the CPU’s caches so that the CPU doesn’t have  to access RAM memory as much, which has significant latency associated with it. When Windows context switches to a new thread, this new thread is most likely executing different code and accessing  different data that is not in the CPU’s cache. The CPU must access RAM memory to populate its cache  so it can get back to a good execution speed. But then, about 30 ms later, another context switch occurs</p>\n</blockquote>\n<blockquote>\n<p>The time required to perform a context switch varies with different CPU architectures and speed.  And the time required to build up a CPU’s cache depends on what applications are running in the system, the size of the CPU’s caches, and various other factors. So it is impossible for me to give you an  absolute figure or even an estimate as to what time overhead is incurred for each context switch. Suffice it to say that you want to avoid using context switches as much as possible if you are interested in  building high-performing applications and components.</p>\n</blockquote>\n<p>💡重要提示：一个时间片结束时，如果 Windows 决定再次调度同一个线程 (而不是切换到另一个线程)，那么 Windows 不会执行上下文切换。相反，线程将继续运行。这显著改进了性能。注意，在设计自己的代码时，上下文切换能避免就要尽量避免。</p>\n<p>💡重要提示：线程可自主提前终止其时间片。这经常发生，因为线程经常要等待 I/O 操作 (键盘、鼠标、文件、网络等) 结束。例如，“记事本” 程序的线程经常都会处于空闲状态，什么事情都不做；这个线程是在等待输入。如果用户按键盘上的 J 键，Windows 会唤醒 “记事本” 线程，让他处理按键操作。“记事本” 线程可能花 5 毫秒处理按键，然后调用一个 Win32 函数，告诉 Windows 它准备好处理下一个输入事件。如果没有更多的输入事件，Windows 使 “记事本” 线程进入等待状态 (时间片剩余的部分就放弃了)，使线程在任何 CPU 上都不再调度，直到发生下一次输入事件。这增强了系统的总体性能，因为正在等待 I/O 操作完成的线程不会在 CPU 上调度，所以不会浪费 CPU 时间，而节省出来的时间则可以供 CPU 调度其他线程。</p>\n<blockquote>\n<p>In addition, when performing a garbage collection, the CLR must suspend all the threads, walk  their stacks to find the roots to mark objects in the heap, walk their stacks again (updating roots to  objects that moved during compaction), and then resume all the threads. So avoiding threads will  greatly improve the performance of the garbage collector, too. And whenever you are using a debugger, Windows suspends all threads in the application being debugged every time a breakpoint is hit  and resumes all the threads when you single-step or run the application. So the more threads you  have, the slower your debugging experience will be.</p>\n</blockquote>\n<blockquote>\n<p>From this discussion, you should conclude that you must avoid using threads as much as possible  because they consume a lot of memory and they require time to create, destroy, and manage. Time  is also wasted when Windows context switches between threads and when garbage collections occur.  However, this discussion should also help you realize that threads must be used sometimes because  they allow Windows to be robust and responsive.</p>\n</blockquote>\n<blockquote>\n<p>I should also point out that a computer with multiple CPUs in it can actually run multiple threads  simultaneously, increasing scalability (the ability to do more work in less time). Windows will assign  one thread to each CPU core, and each core will perform its own context switching to other threads.  Windows makes sure that a single thread is not scheduled on multiple cores at one time because this  would wreak havoc. Today, computers that contain multiple CPUs, hyperthreaded CPUs, or multi-core  CPUs are commonplace. But when Windows was originally designed, single-CPU computers were  commonplace, and Windows added threads to improve system responsiveness and reliability. Today,  threads are also being used to improve scalability, which can happen only on computers that have  multiple cores in them.</p>\n</blockquote>\n<blockquote>\n<p>The remaining chapters in this book discuss the various Windows and CLR mechanisms that exist  so that you can effectively wrestle with the tension of creating as few threads as possible, while still  keeping your code responsive and allowing it to scale if your code is running on a machine with multiple cores.</p>\n</blockquote>\n<p>💡小结：和一切虚拟化机制一样，线程有空间（内存耗用）和时间（运行时的执行性能）上的开销。每个线程都有以下要素：线程内核对象、线程环境块、用户模式栈、内核模式栈、DLL 线程连接和线程分离通知。任何时候在进程中创建线程或终止线程都会调用进程中的所有非托管 DLL 的 DllMain 方法，并向方法传递对应的标志。如今，随便一个进程就可能加载几百个 DLL，这严重影响了在进程中创建和销毁线程的性能。单 CPU、计算机一次只能做一件事情。所以，Windows 必须在系统中的所有线程（逻辑 CPU）之间共享物理 CPU。Windows 任何时刻只将一个线程分配给一个 CPU。那个线程能运行一个 “时间片” 的长度。时间片到期，Windows 就上下文切换到另一个线程。上下文切换完成后，CPU 执行所选的线程，直到它的时间片到期。然后发生下次上下文切换。Windows 大约每 30 毫秒执行一次上下文切换。上下文切换是净开销；也就是说，上下文切换所产生的开销不会换来任何内存或性能上的收益。当 Windows 上下文切换到新线程时，这个新线程极有可能必须访问 RAM 来填充它的高速缓存，以恢复高速执行状态。因此，在设计自己的代码时，上下文切换能避免就要尽量避免。执行上下文切换所需的时间取决于 CPU 架构和速度。而填充 CPU 缓存所需的时间取决于系统中运行的应用程序、CPU 缓存的大小以及其他各种因素。此外，执行垃圾回收时，CLR 必须挂起（暂停）所有线程，遍历它们的栈来查找根以便对堆中对象进行标记，再次遍历它们的栈（有的对象在压缩期间发生了移动，所以要更新它们的根），再恢复所有线程。所以，减少线程的数量也会显著提升垃圾回收器的性能。调试器同理。安装了多个 CPU（或者一个多核 CPU）的计算机可以真正同时运行几个线程，这提升了应用程序的可伸缩性。Windows 为每个 CPU 内核都分配一个线程，每个内核都自己执行到其他线程的上下文切换。Windows 确保单个线程不会同时在多个内核上调度，因为这会带来巨大的混乱。</p>\n<h2 id=\"stop-the-madness\"><a class=\"anchor\" href=\"#stop-the-madness\">#</a> Stop the Madness</h2>\n<blockquote>\n<p>If all we cared about was raw performance, then the optimum number of threads to have on any  machine is identical to the number of CPUs on that machine. So a machine with one CPU would have  only one thread, a machine with two CPUs would have two threads, and so on. The reason is obvious:  if you have more threads than CPUs, then context switching is introduced and performance deteriorates. If each CPU has just one thread, then no context switching exists and the threads run at full  speed.</p>\n</blockquote>\n<blockquote>\n<p>However, Microsoft designed Windows to favor reliability and responsiveness as opposed to favoring raw speed and performance. And I commend this decision: I don’t think any of us would be using  Windows or the .NET Framework today if applications could still stop the operating system and other  applications. Therefore, Windows gives each process its own thread for improved system reliability  and responsiveness. On my machine, for example, when I run Task Manager and select the Performance tab, I see the image shown in Figure 26-1.</p>\n</blockquote>\n<blockquote>\n<p>It shows that my machine currently has 55 processes running on it, and so we’d expect that there  were at least 55 threads on my machine, because each process gets at least 1 thread. But Task Manager also shows that my machine currently has 864 threads in it! All these threads end up allocating  many megabytes of memory on my machine, which has only 4 GB of RAM in it. This also means that  there is an average of approximately 15.7 threads per process, when I should ideally have only 2  threads per process on my dual core machine!</p>\n</blockquote>\n<p><img data-src=\"/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/image-20230203194758897.png\" alt=\"image-20230203194758897\" /></p>\n<p><strong>Figure 26-1</strong> Task Manager showing system performance.</p>\n<blockquote>\n<p>To make matters worse, when I look at the CPU Usage, it shows that my CPU is busy 5 percent of  the time. This means that 95 percent of the time, these 864 threads have literally nothing to do—they  are just soaking up memory that is definitely not being used when the threads are not running. You  have to ask yourself: Do these applications need all these threads to do nothing 95 percent of the  time? The answer to this question has to be “No.” Now, if you want to see which processes are the  most wasteful, click the Task Manager’s Details tab, add the Threads column, and sort this column in  descending order, as shown in Figure 26-2.</p>\n</blockquote>\n<blockquote>\n<p>As you can see here, System has created 105 threads and is using 1 percent of the CPU, Explorer  has created 47 threads to use 0 percent of the CPU, Visual Studio (Devenv.exe) has created 36 threads  to use 0 percent of the CPU, Microsoft Outlook has created 24 threads to use 0 percent of the CPU,  and so on. What is going on here?</p>\n</blockquote>\n<blockquote>\n<p>When developers were learning about Windows, they learned that a process in Windows is very,  very expensive. Creating a process usually takes several seconds, a lot of memory must be allocated,  this memory must be initialized, the EXE and DLL files have to load from disk, and so on. By comparison, creating a thread in Windows is very cheap, so developers decided to stop creating processes  and start creating threads instead. So now we have lots of threads. But even though threads are  cheaper than processes, they are still very expensive compared to most other system resources, so  they should be used sparingly and appropriately.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/image-20230203203315170.png\" alt=\"image-20230203203315170\" /></p>\n<p><strong>FIGURE 26-2</strong> Task Manager showing details.</p>\n<blockquote>\n<p>Well, without a doubt, we can say for sure that all of the applications we’ve just discussed are using  threads inefficiently. There is just no way that all of these threads need to exist in the system. It is one  thing to allocate resources inside an application; it’s quite another to allocate them and then not use  them. This is just wasteful, and allocating all the memory for thread stacks means that there is less  memory for more important data, such as a user’s document.</p>\n</blockquote>\n<blockquote>\n<p>To make matters worse, what if these were the processes running in a single user’s Remote Desktop  Services session—and what if there were actually 100 users on this machine? Then there would be  100 instances of Outlook, all creating 24 threads only to do nothing with them. That’s 2,400 threads  each with its own kernel object, TEB, user-mode stack, kernel-mode stack, etc. That is a lot of wasted  resources. This madness has to stop, especially if Microsoft wants to give users a good experience  when running Windows on netbook computers, many of which have only 1 GB of RAM. Again, the  chapters in this part of the book will describe how to properly design an application to use very few  threads in an efficient manner.</p>\n</blockquote>\n<p>💡小结：在 Windows 中，进程是十分 “昂贵” 的。创建一个进程通常要花几秒钟的时间，必须分配大量内存，这些内存必须初始化，EXE 和 DLL 文件必须从磁盘上加载，等等。相反，在 Windows 中创建线程则十分 “廉价”。但是，虽然线程比进程廉价，它们和其他系统资源相比仍然十分昂贵，所以还是应该省着用，而且要用得恰当。</p>\n<h2 id=\"cpu-trends\"><a class=\"anchor\" href=\"#cpu-trends\">#</a> CPU Trends</h2>\n<blockquote>\n<p>In the past, CPU speeds used to increase with time, so an application that ran slowly on one machine  would typically run faster on a newer machine. However, CPU manufacturers are unable to continue  the trend of making CPUs faster. When you run CPUs at high speeds, they produce a lot of heat  that has to be dissipated. A few years ago, I acquired a newly released notebook computer from a  respected manufacturer. This computer had a bug in its firmware that made it not turn the fan on  enough; as a result, after running the computer for a while, the CPU and the motherboard melted.  The hardware manufacturer replaced the machine and then “improved” the firmware by making the  fan run more frequently. Unfortunately, this had the effect of draining the battery faster, because fans  consume a lot of power.</p>\n</blockquote>\n<blockquote>\n<p>These are the kinds of problems that the hardware vendors face today. Because CPU manufacturers can’t continuously produce higher-speed CPUs, they have instead turned their attention to making transistors smaller so that more of them can reside on a single chip. Today, we can have a single  silicon chip that contains two or more CPU cores. The result is that our software only gets faster if  we write our software to use the multiple cores. How do we do this? We use threads in an intelligent  fashion.</p>\n</blockquote>\n<blockquote>\n<p>Computers use three kinds of multi-CPU technologies today:</p>\n<ul>\n<li>\n<p>Multiple CPUs Some computers just have multiple CPUs in them. That is, the motherboard  has multiple sockets on it, with each socket containing a CPU. Because the motherboard must  be bigger, the computer case is bigger as well, and sometimes these machines have multiple  power supplies in them due to the additional power drain. These kinds of computers have  been around for a few decades, but they are not as popular today due to their increased size  and cost.</p>\n</li>\n<li>\n<p>Hyperthreaded chips This technology (owned by Intel) allows a single chip to look like two  chips. The chip contains two sets of architectural states, such as CPU registers, but the chip  has only one set of execution resources. To Windows, this looks like there are two CPUs in the  machine, so Windows schedules two threads concurrently. However, the chip only executes  one of the threads at a time. When one thread pauses due to a cache miss, branch misprediction, or data dependency, the chip switches to the other thread. This all happens in hardware,  and Windows doesn’t know that it is happening; Windows believes that both threads are running concurrently. Windows does know about hyperthreaded CPUs, and if you have multiple  hyperthreaded CPUs in a single machine, Windows will first schedule one thread on each CPU  so that the threads are truly running concurrently and then schedule other threads on the  already-busy CPUs. Intel claims that a hyperthreaded CPU can improve performance by 10  percent to 30 percent.</p>\n</li>\n<li>\n<p>Multi-core chips A few years ago, single chips containing multiple CPU cores have entered  the scene. As I write this, chips with two, three, and four cores are readily available. Even my  notebook computer has two cores in it; our mobile phones now have multiple cores in them  too. Intel has even been working on a single chip with 80 cores on it! Wow, this is a lot of computing power! And Intel even has hyperthreaded multi-core chips.</p>\n</li>\n</ul>\n</blockquote>\n<p>💡小结：CPU 厂商过去只知道一味地提高 CPU 速度，但高速运行的 CPU 会产生大量热量。由于不能做到一直提升 CPU 的速度，所以又改为侧重于讲晶体管做的更小，使一个芯片能容下更多的晶体管。如今的计算机使用了一下三种多 CPU 技术：1. 多个 CPU，有的主板上有多个 CPU 插座。2. 超线程芯片，这种技术允许一个芯片在操作系统中显示成两个。芯片中包含两组架构状态，但芯片只有一组执行资源。对于 Windows，这看起来是安装了两个 CPU，所以 Windows 会同时调度两个线程。但芯片一次只能执行一个线程。一个线程由于缓未命中 (cache miss)、分支预测错误 (branch misprediction) 或者要等待数据 (data dependency) 而暂停时，芯片将切换到另一个线程。Windows 不知道实际使用的是超线程 CPU。如果一台机器上安装了多个超线程 CPU，Windows 首先在每个 CPU 上都调度一个线程，使线程真正并发运行，然后再已经处于 “忙” 状态的 CPU 上调度其他线程。Intel 声称超线程 CPU 能提升 10%~30% 的性能。3. 多核芯片，有的 CPU 包含多个内核。初次之外，Intel 甚至推出了超线程的多核芯片。</p>\n<h2 id=\"clr-threads-and-windows-threads\"><a class=\"anchor\" href=\"#clr-threads-and-windows-threads\">#</a> CLR Threads and Windows Threads</h2>\n<blockquote>\n<p>Today, the CLR uses the threading capabilities of Windows, so Part V of this book is really focusing  on how the threading capabilities of Windows are exposed to developers who write code by using  the CLR. I will explain about how threads in Windows work and how the CLR alters the behavior (if it  does). However, if you’d like more information about threads, I recommend reading some of my earlier writings on the topic, such as Windows via C/C++, Fifth Edition, by myself and Christophe Nasarre  (Microsoft Press, 2007).</p>\n</blockquote>\n<p>💡注意：在 .NET Framework 的早期岁月，CLR 团队认为有朝一日 CLR 会提供不一定会映射到 Windows 线程的逻辑线程。但大约在 2005 年的时候，这个尝试宣告失败，CLR 团队放弃了在这个方面的努力。所以，今天的 CLR 线程完全等价于 Windows 线程，但 .NET Framework 仍然留下了一些能看出当年努力成果的一些东西。例如， <code>System.Environment</code>  类公开了  <code>CurrentManagedThreadId</code>  属性，返回线程的 CLR ID；而  <code>System.Diagnostics.ProcessThread</code>  类公开了  <code>Id</code>  属性，返回同一个线程的 Windows ID。 <code>System.Thread</code>  类的  <code>BeginThreadAffinity</code>  和  <code>EndThreadAffinity</code>  方法则处理 CLR 线程没有映射到 Windows 线程的情况。</p>\n<p>💡注意：Microsoft 为 Windows Store 应用移除了和线程处理有关的一些 API，因为它们鼓励不好的编程实践 (就像 26.3 节 “停止疯狂” 描述的那样)，或者是因为它们不利于达成 Microsoft 为 Windows Store 应用设立的目标。例如，整个  <code>System.Thread</code>  类都不开放给 Windows Store 应用，因为其中有许多不好的 API (比如  <code>Start</code> ， <code>IsBackground</code> ， <code>Sleep</code> ， <code>Suspend</code> ， <code>Resume</code> ， <code>Join</code> ， <code>Interrupt</code> ， <code>Abort</code> ， <code>BeginThreadAffinity</code>  和  <code>EndThreadAffinity</code> )。我个人赞成这个做法，而且认为早就该这么做。所以，第 26 章到第 30 章讨论了适合桌面应用但不适合 Windows Store 应用的一些 API 和功能。阅读过程中能清楚地认识到为何有一些 API 不适合 Windows Store 应用。</p>\n<p>💡小结：CLR 线程完全等价于 Windows 线程。</p>\n<h2 id=\"using-a-dedicated-thread-to-perform-an-asynchronous-compute-bound-operation\"><a class=\"anchor\" href=\"#using-a-dedicated-thread-to-perform-an-asynchronous-compute-bound-operation\">#</a> Using a Dedicated Thread to Perform an Asynchronous  Compute-Bound Operation</h2>\n<blockquote>\n<p>In this section, I will show you how to create a thread and have it perform an asynchronous computebound operation. Although I am going to walk you through this, I highly recommend that you avoid  the technique I show you here. And, in fact, this technique is not even possible if you are building a  Windows Store app because the Thread class is not available. Instead, you should use the thread pool to execute asynchronous compute-bound operations whenever possible. I go into the details about  doing this in Chapter 27, “Compute-Bound Asynchronous Operations.”</p>\n</blockquote>\n<blockquote>\n<p>However, there are some very unusual occasions when you might want to explicitly create a thread  dedicated to executing a particular compute-bound operation. Typically, you’d want to create a dedicated thread if you’re going to execute code that requires the thread to be in a particular state that  is not normal for a thread pool thread. For example, explicitly create your own thread if any of the  following is true:</p>\n<ul>\n<li>\n<p>You need the thread to run with a non-normal thread priority. All thread pool threads run at  normal priority. Although you can change this, it is not recommended, and the priority change  does not persist across thread pool operations.</p>\n</li>\n<li>\n<p>You need the thread to behave as a foreground thread, thereby preventing the application  from dying until the thread has completed its task. For more information, see the ”Foreground  Threads vs. Background Threads” section later in this chapter. Thread pool threads are always  background threads, and they may not complete their task if the CLR wants to terminate the  process.</p>\n</li>\n<li>\n<p>The compute-bound task is extremely long-running; this way, I would not be taxing the thread  pool’s logic as it tries to figure out whether to create an additional thread.</p>\n</li>\n<li>\n<p>You want to start a thread and possibly abort it prematurely by calling Thread’s Abort method (discussed in Chapter 22, “CLR Hosting and AppDomains”).</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>To create a dedicated thread, you construct an instance of the System.Threading.Thread class,  passing the name of a method into its constructor. Here is the prototype of Thread’s constructor.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">:</span> CriticalFinalizerObject<span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterizedThreadStart</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// Less commonly used constructors are not shown here </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>The start parameter identifies the method that the dedicated thread will execute, and this  method must match the signature of the ParameterizedThreadStart delegate.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ParameterizedThreadStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Constructing a Thread object is a relatively lightweight operation because it does not actually  create a physical operating system thread. To actually create the operating system thread and have it  start executing the callback method, you must call Thread’s Start method, passing into it the object  (state) that you want passed as the callback method’s argument.</p>\n</blockquote>\n<blockquote>\n<p>The following code demonstrates how to create a dedicated thread and have it call a method  asynchronously.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main thread: starting a dedicated thread \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token string\">\"to do an asynchronous operation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token class-name\">Thread</span> dedicatedThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span>ComputeBoundOp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> dedicatedThread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main thread: Doing other work here...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulating other work (10 seconds) </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> dedicatedThread<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for thread to terminate </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hit &lt;Enter> to end this program...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token comment\">// This method's signature must match the ParameterizedThreadStart delegate </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ComputeBoundOp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">// This method is executed by a dedicated thread </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In ComputeBoundOp: state=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulates other work (1 second) </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// When this method returns, the dedicated thread dies </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>When I compile and run this code, I get the following output.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Main thread: starting a dedicated thread to do an asynchronous operation \nMain thread: Doing other work here... \nIn ComputeBoundOp: state=5\n</code></pre>\n<blockquote>\n<p>Sometimes when I run this code, I get the following output, because I can’t control how Windows  schedules the two threads.</p>\n</blockquote>\n<pre><code class=\"language-cmd\">Main thread: starting a dedicated thread to do an asynchronous operation \nIn ComputeBoundOp: state=5 \nMain thread: Doing other work here...\n</code></pre>\n<blockquote>\n<p>Notice that the Main method calls Join. The Join method causes the calling thread to stop  executing any code until the thread identified by dedicatedThread has destroyed itself or been  terminated.</p>\n</blockquote>\n<p>💡小结：应尽量使用线程池来执行异步的计算限制操作。如果执行的代码要求线程处于一种特定状态，而这种状态对于线程池线程来说是非同寻常的，就可考虑创建专用线程。1. 线程需要以非普通线程优先级运行。所有线程池线程都以普通优先级运行。2. 需要线程表现为一个前台线程，防止应用程序再线程结束任务前终止。3. 计算限制的任务需要长时间运行。线程池为了判断是否需要创建一个额外的线程，所采用的逻辑是比较复杂的。直接为长时间运行的任务创建专用线程，就可以避免这个问题。4. 要启动线程，并可能调用 Thread 的 Abort 方法来提前终止它。要创建专用线程，需要构造 <code>System.Threading.Thread</code>  类的实例。构造 <code>Thread</code>  对象是轻量级操作，因为它并不实际创建一个操作系统线程。要实际创建操作系统线程，并让它开始执行回调方法，必须调用 <code>Thread</code>  的 <code>Start</code>  方法，向它创建要作为回调方法的实参传递的对象（状态）。</p>\n<h2 id=\"reasons-to-use-threads\"><a class=\"anchor\" href=\"#reasons-to-use-threads\">#</a> Reasons to Use Threads</h2>\n<blockquote>\n<p>There are really two reasons to use threads:</p>\n<ul>\n<li>\n<p>Responsiveness (typically for client-side GUI applications) Windows gives each process  its own thread so that one application entering an infinite loop doesn’t prevent the user from  working with other applications. Similarly, within your client-side GUI application, you could  spawn some work off onto a thread so that your GUI thread remains responsive to user input  events. In this example, you are possibly creating more threads than available cores on the  machine, so you are wasting system resources and hurting performance. However, the user is  gaining a responsive user interface and therefore having a better overall experience with your  application.</p>\n</li>\n<li>\n<p>Performance (for client and server side applications) Because Windows can schedule  one thread per CPU and because the CPUs can execute these threads concurrently, your application can improve its performance by having multiple operations executing at the same time  in parallel. Of course, you only get the improved performance if and only if your application  is running on a machine with multiple CPUs in it. Today, machines with multiple CPUs in them  are quite common, so designing your application to use multiple cores makes sense and is the  focus of Chapter 27 and Chapter 28, “I/O-Bound Asynchronous Operations.”</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Now, I’d like to share with you a theory of mine. Every computer has an incredibly powerful resource inside it: the CPU itself. If someone spends money on a computer, then that computer should  be working all the time. In other words, I believe that all the CPUs in a computer should be running  at 100 percent utilization all the time. I will qualify this statement with two caveats. First, you may  not want the CPUs running at 100 percent utilization if the computer is on battery power, because  that may drain the battery too quickly. Second, some data centers would prefer to have 10 machines  running at 50 percent CPU utilization rather than 5 machines running at 100 percent CPU utilization,  because running CPUs at full power tends to generate heat, which requires cooling systems, and  powering an HVAC cooling system can be more expensive than powering more computers running at  reduced capacity. Although data centers find it increasingly expensive to maintain multiple machines,  because each machine has to have periodic hardware and software upgrades and monitoring, this has  to be weighed against the expense of running a cooling system.</p>\n</blockquote>\n<blockquote>\n<p>Now, if you agree with my theory, then the next step is to figure out what the CPUs should be doing. Before I give you my ideas here, let me say something else first. In the past, developers and end  users always felt that the computer was not powerful enough. Therefore, we developers would never  just execute code unless the end users give us permission to do so and indicate that it is OK for the  application to consume CPU resources via UI elements, such as menu items, buttons, and check boxes.</p>\n</blockquote>\n<blockquote>\n<p>But now, times have changed. Computers ship with phenomenal amounts of computing power.  Earlier in this chapter, I showed you how Task Manager was reporting that my CPU was busy just 5  percent of the time. If my computer contained a quad-core CPU in it instead of the dual-core CPU  that it now has, then Task Manager will report 2 percent more often. When an 80-core processor  comes out, the machine will look like it’s doing nothing almost all the time. To computer purchasers, it  looks like they’re spending more money for more CPUs and the computer is doing less work!</p>\n</blockquote>\n<blockquote>\n<p>This is the reason why the hardware manufacturers are having a hard time selling multi-core  computers to users: the software isn’t taking advantage of the hardware and users get no benefit  from buying machines with additional CPUs. What I’m saying is that we now have an abundance  of computing power available and more is on the way, so developers can aggressively consume it.  That’s right—in the past, we would never dream of having our applications perform some computation unless we knew the end user wanted the result of that computation. But now that we have extra  computing power, we can dream like this.</p>\n</blockquote>\n<blockquote>\n<p>Here’s an example: when you stop typing in Visual Studio’s editor, Visual Studio automatically  spawns the compiler and compiles your code. This makes developers incredibly productive because  they can see warnings and errors in their source code as they type and can fix things immediately. In  fact, what developers think of today as the Edit-Build-Debug cycle will become just the Edit-Debug  cycle, because building (compiling) code will just happen all the time. You, as an end user, won’t  notice this because there is a lot of CPU power available and other things you’re doing will barely be  affected by the frequent running of the compiler. In fact, I would expect that in some future version  of Visual Studio, the Build menu item will disappear completely, because building will just become  automatic. Not only does the application’s UI get simpler, but the application also offers “answers” to  the end user, making them more productive.</p>\n</blockquote>\n<blockquote>\n<p>When we remove UI components like menu items, computers get simpler for end users. There  are fewer options for them and fewer concepts for them to read and understand. It is the multi-core  revolution that allows us to remove these UI elements, thereby making software so much simpler for  end users that my grandmother might someday feel comfortable using a computer. For developers,  removing UI elements usually results in less testing, and offering fewer options to the end user simplifies the code base. And if you currently localize the text in your UI elements and your documentation  (like Microsoft does), then removing the UI elements means that you write less documentation and  you don’t have to localize this documentation anymore. All of this can save your organization a lot of  time and money.</p>\n</blockquote>\n<blockquote>\n<p>Here are some more examples of aggressive CPU consumption: spell checking and grammar  checking of documents, recalculation of spreadsheets, indexing files on your disk for fast searching,  and defragmenting your hard disk to improve I/O performance.</p>\n</blockquote>\n<blockquote>\n<p>I want to live in a world where the UI is reduced and simplified, I have more screen real estate to  visualize the data that I’m actually working on, and applications offer me information that helps me  get my work done quickly and efficiently instead of me telling the application to go get information  for me. I think the hardware has been there for software developers to use for the past few years. It’s  time for the software to start using the hardware creatively.</p>\n</blockquote>\n<p>💡小结：使用线程主要有两个理由：1. 可响应性（通常是对于客户端 GUI 应用程序），Windows 为每个进程提供它自己的线程，确保发生死循环的应用程序不会妨碍其他应用程序。2. 性能（对于客户端和服务器应用程序），由于 Windows 每个 CPU 调度一个线程，而且多个 CPU 能并发执行这些线程，所以同时执行多个操作能提升性能。当然，只有多个 CPU（或多核 CPU）才能得到性能的提升。如今的计算机一般都配备了强大的计算能力，所以开发人员应该大胆消费它。事实上，传统的 “编辑 - 生成 - 调试” 模式逐渐变成 “编辑 - 调试”，因为生成（编译）代码的动作一直都在发生。作为最终用户，你是注意不到这一点的，因为有充足的计算资源可供使用，而且编译器的频繁运行一般不会影响你正在做的其他事情。</p>\n<h2 id=\"thread-scheduling-and-priorities\"><a class=\"anchor\" href=\"#thread-scheduling-and-priorities\">#</a> Thread Scheduling and Priorities</h2>\n<blockquote>\n<p>A preemptive operating system must use some kind of algorithm to determine which threads should  be scheduled when and for how long. In this section, we’ll look at the algorithm Windows uses. Earlier  in this chapter, I mentioned how every thread’s kernel object contains a context structure. The context  structure reflects the state of the thread’s CPU registers when the thread last executed. After a timeslice, Windows looks at all the thread kernel objects currently in existence. Of these objects, only the  threads that are not waiting for something are considered schedulable. Windows selects one of the  schedulable thread kernel objects and context switches to it. Windows actually keeps a record of how  many times each thread gets context switched to. You can see this when using a tool such as Microsoft  Spy++. Figure 26-3 shows the properties for a thread. Notice that this thread has been scheduled  31,768 times.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/image-20230206115047785.png\" alt=\"image-20230206115047785\" /></p>\n<p><strong>FIGURE 26-3</strong> Spy++ showing a thread’s properties.</p>\n<blockquote>\n<p>At this point, the thread is executing code and manipulating data in its process’s address space.  After another time-slice, Windows performs another context switch. Windows performs context  switches from the moment the system is booted and continues until the system is shut down.</p>\n</blockquote>\n<blockquote>\n<p>Windows is called a preemptive multithreaded operating system because a thread can be stopped  at any time and another thread can be scheduled. As you’ll see, you have some control over this, but  not much. Just remember that you cannot guarantee that your thread will always be running and that  no other thread will be allowed to run.</p>\n</blockquote>\n<p>💡注意：经常有开发人员问我，怎样保证线程在发生某个事件后的一段时间内开始运行 —— 例如，怎样保证一个线程在网络有数据传来的 1 毫秒内开始运行？对此我的回答总是很干脆：保证不了！</p>\n<p>实时操作系统能做出这样的保证，但 Windows 不是实时操作系统。实时操作系统需要对硬件的运行情况有一个精准的把握，它知道硬盘控制器、键盘以及其他组件的准确延迟时间。但 Microsoft Windows 的设计目标是兼容大范围的硬件，包括不同的 CPU、不同的驱动器、不同的网络等。简单地说，Windows 没有被设计成实时操作系统。补充一句，CLR 使托管代码的行为变得更不 “实时” 了。之所以要这样设计，是出于许多方面的原因，包括 DLL 的 JIT (just-in-time) 加载、代码的 JIT 编译以及垃圾回收器无法预测的介入时间等。</p>\n<blockquote>\n<p>Every thread is assigned a priority level ranging from 0 (the lowest) to 31 (the highest). When the  system decides which thread to assign to a CPU, it examines the priority 31 threads first and schedules  them in a round-robin fashion. If a priority 31 thread is schedulable, it is assigned to a CPU. At the end  of this thread’s time-slice, the system checks to see whether there is another priority 31 thread that  can run; if so, it allows that thread to be assigned to a CPU.</p>\n</blockquote>\n<blockquote>\n<p>As long as priority 31 threads are schedulable, the system never assigns any thread with a priority of 0 through 30 to a CPU. This condition is called starvation, and it occurs when higher-priority  threads use so much CPU time that they prevent lower-priority threads from executing. Starvation is  much less likely to occur on a multiprocessor machine because a priority 31 thread and a priority 30  thread can run simultaneously on such a machine. The system always tries to keep the CPUs busy, and  CPUs sit idle only if no threads are schedulable.</p>\n</blockquote>\n<blockquote>\n<p>Higher-priority threads always preempt lower-priority threads, regardless of what the lower-priority  threads are executing. For example, if a priority 5 thread is running and the system determines that  a higher-priority thread is ready to run, the system immediately suspends the lower-priority thread  (even if it’s in the middle of its time-slice) and assigns the CPU to the higher-priority thread, which  gets a full time-slice.</p>\n</blockquote>\n<blockquote>\n<p>By the way, when the system boots, it creates a special thread called the zero page thread. This  thread is assigned priority 0 and is the only thread in the entire system that runs at priority 0. The  zero page thread is responsible for zeroing any free pages of RAM in the system when no other  threads need to perform work.</p>\n</blockquote>\n<blockquote>\n<p>Microsoft realized that assigning priority levels to threads was going to be too hard for developers  to rationalize. Should this thread be priority level 10? Should this other thread be priority level 23? To  resolve this issue, Windows exposes an abstract layer over the priority level system.</p>\n</blockquote>\n<blockquote>\n<p>When designing your application, you should decide whether your application needs to be more  or less responsive than other applications that may be running on the machine. Then you choose  a process priority class to reflect your decision. Windows supports six process priority classes: Idle,  Below Normal, Normal, Above Normal, High, and Realtime. Of course, Normal is the default and is  therefore the most common priority class by far.</p>\n</blockquote>\n<blockquote>\n<p>The Idle priority class is perfect for applications (like screen savers) that run when the system is  all but doing nothing. A computer that is not being used interactively might still be busy (acting as a  file server, for example) and should not have to compete for CPU time with a screen saver. Statisticstracking applications that periodically update some state about the system usually should not interfere with more critical tasks.</p>\n</blockquote>\n<blockquote>\n<p>You should use the High priority class only when absolutely necessary. You should avoid using the  Realtime priority class if possible. Realtime priority is extremely high and can interfere with operating  system tasks, such as preventing required disk I/O and network traffic from occurring. In addition, a  Realtime process’s threads could prevent keyboard and mouse input from being processed in a timely  manner, causing the user to think that the system is completely frozen. Basically, you should have a  good reason for using Realtime priority, such as the need to respond to hardware events with short  latency or to perform some short-lived task.</p>\n</blockquote>\n<p>💡注意：为了保持系统总体平稳运行，除非用户有 “提高调度优先级”(Increase Scheduling Priority) 特权，否则进程不能以  <code>Realtime</code>  优先级类运行。管理员和 Power User 默认有这个特权。</p>\n<blockquote>\n<p>After you select a priority class, you should stop thinking about how your application relates to  other applications and just concentrate on the threads within your application. Windows supports  seven relative thread priorities: Idle, Lowest, Below Normal, Normal, Above Normal, Highest, and  Time-Critical. These priorities are relative to the process’s priority class. Again, Normal relative thread  priority is the default, and it is therefore the most common.</p>\n</blockquote>\n<blockquote>\n<p>So, to summarize, your process is a member of a priority class and within that process you assign  thread priorities that are relative to each other. You’ll notice that I haven’t said anything about priority levels 0 through 31. Application developers never work with priority levels directly. Instead, the  system maps the process’s priority class and a thread’s relative priority to a priority level. Table 26-1  shows how the process’s priority class and the thread’s relative priority maps to priority levels.</p>\n</blockquote>\n<p><img data-src=\"/2023/02/06/csharp/clr-via-csharp/Chapter%2026%20Thread%20Basics/image-20221205211539751.png\" alt=\"image-20221205211539751\" /></p>\n<blockquote>\n<p>For example, a Normal thread in a Normal process is assigned a priority level of 8. Because most  processes are of the Normal priority class and most threads are of Normal thread priority, most  threads in the system have a priority level of 8.</p>\n</blockquote>\n<blockquote>\n<p>If you have a Normal thread in a high-priority process, the thread will have a priority level of 13. If  you change the process’s priority class to Idle, the thread’s priority level becomes 4. Remember that  thread priorities are relative to the process’s priority class. If you change a process’s priority class, the  thread’s relative priority will not change, but its priority number will.</p>\n</blockquote>\n<blockquote>\n<p>Notice that the table does not show any way for a thread to have a priority level of 0. This is  because the 0 priority is reserved for the zero page thread and the system does not allow any other  thread to have a priority of 0. Also, the following priority levels are not obtainable: 17, 18, 19, 20, 21,  27, 28, 29, or 30. If you are writing a device driver that runs in kernel mode, you can obtain these  levels; a user-mode application cannot. Also note that a thread in the Realtime priority class can’t be  below priority level 16. Likewise, a thread in a priority class other than Realtime cannot be above 15.</p>\n</blockquote>\n<p>💡注意：“进程优先级类” 的概念容易引起混淆。人们可能以为 Windows 在调度进程。事实上 Windows 永远不会调度进程，它只调度线程。“进程优先级类” 是 Microsoft 提出的抽象概念，旨在帮助你理解自己的应用程序和其他正在运行的应用程序的关系，它没有别的用途。</p>\n<p>💡重要提示：最好是降低一个线程的优先级，而不是提升另一个线程的优先级。如果线程要执行长时间的计算限制任务，比如编译代码、拼写检查、电子表格重新计算等，一般应降低该线程的优先级。如果线程要快速响应某个事件，运行短暂时间，再回复为等待状态，则应提高该线程的优先级。高优先级线程在其生存期的大多数时间里都应出于等待状态，这样才不至于影响系统的总体响应能力。例如，响应用户按 Windows 徽标键的 “Windows 资源管理器” 线程就是一个高优先级线程。当用户按这个键时，Windows 资源管理器立即抢占其他更低优先级的线程，并显示它的菜单。用户在菜单中上下移动时， Windows 资源管理器的线程会快速响应每一次按键 (或鼠标移动)，更新菜单，并停止运行，直到用户继续在菜单中导航。</p>\n<blockquote>\n<p>Normally, a process is assigned a priority class based on the process that starts it running. And  most processes are started by Explorer, which spawns all its child processes in the Normal priority  class. Managed applications are not supposed to act as though they own their own processes; they  are supposed to act as though they run in an AppDomain, so managed applications are not supposed  to change their process’s priority class because this would affect all code running in the process. For  example, many <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> applications run in a single process, with each application in its own AppDomain. The same is true for Microsoft Silverlight applications, which run in an Internet browser  process, and managed stored procedures, which run inside the Microsoft SQL Server process.</p>\n</blockquote>\n<blockquote>\n<p>In addition, a Windows Store app is not able to create additional AppDomains, cannot change its  process’s priority class, or any of its threads’ priorities. Furthermore, when a Windows Store app is not  in the foreground, Windows automatically suspends all its threads. This serves two purposes. First, it  prevents a background app from “stealing” CPU time away from the app the user is actively interacting with. This ensures that touch events like swipes are fast and fluid. Second, by reducing CPU  usage, battery power is conserved, allowing the PC to run longer on a single charge.</p>\n</blockquote>\n<blockquote>\n<p>On the other hand, your application can change the relative thread priority of its threads by setting Thread’s Priority property, passing it one of the five values (Lowest, BelowNormal, Normal,  AboveNormal, or Highest) defined in the ThreadPriority enumerated type. However, just as  Windows has reserved the priority level 0 and the real-time range for itself, the CLR reserves the  Idle and Time-Critical priority levels for itself. Today, the CLR has no threads that run at Idle priority  level, but this could change in the future. However, the CLR’s finalizer thread, discussed in Chapter 21,  “The Managed Heap and Garbage Collection,” runs at the Time-Critical priority level. Therefore, as a  managed developer, you really only get to use the five highlighted relative thread priorities listed in  Table 26-1.</p>\n</blockquote>\n<p>💡重要提示：今天，大多数应用程序都没有利用线程优先级。但在我设想的理想世界中，CPU 应保持 100% 的利用率，一致都在做有用的工作。在这种情况下，为了保证系统响应能力不受影响，线程优先级就显得至关重要。遗憾的是，多年来最终用户已养成了一个习惯；一旦看到太高的 CPU 使用率，就感觉应用程序要失去控制了。在我的新世界中，需要对最终用户进行 “知识再普及”，让他们明白高的 CPU 利用率也许是一件好事情 —— 表明计算机正在积极地为用户处理有用的信息。如果所有 CPU 都忙于运行优先级 8 和以上的线程，就真的出问题了。这意味着应用程序在响应最终用户的输入时遇到麻烦。“任务管理器” 未来的版本在报告 CPU 利用率时，或许应该将线程优先级考虑在内；诊断有问题的系统时，这种信息是相当有帮助的。</p>\n<blockquote>\n<p>For desktop apps (non–Windows Store apps), I should point out that the System.Diagnostics namespace contains a Process class and a ProcessThread class. These classes provide the Windows  view of a process and thread, respectively. These classes are provided for developers wanting to write  utility applications in managed code or for developers who are trying to instrument their code to help  them debug it. In fact, this is why the classes are in the System.Diagnostics namespace. Applications need to be running with special security permissions to use these two classes. You would not be  able to use these classes from a Silverlight application or an <span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span> application, for example.</p>\n</blockquote>\n<blockquote>\n<p>On the other hand, applications can use the AppDomain and Thread classes, which expose the  CLR’s view of an AppDomain and thread. For the most part, special security permissions are not required to use these classes, although some operations are still considered privileged.</p>\n</blockquote>\n<p>💡小结：每个线程的内核对象都包含一个上下文结构。上下文（context）结构反映了线程上一次执行完毕后 CPU 寄存器的状态。在一个时间片（time-slice）之后，Windows 检查现存的所有线程内核对象。在这些对象中，只有那些没有正在等待什么的线程才适合调度。Windows 之所以被称为抢占式多线程（preemptive multithreaded）操作系统，是因为线程可在任何时间停止（被抢占）并调度另一个线程。每个线程都分配了从 0（最低）到 31（最高）的优先级。系统决定为 CPU 分配哪个线程时，首先检查优先级 31 的线程，并以一种轮流（round-robin）方式调度它们。如果优先级 31 的一个线程可以调度，就把它分配给 CPU。在这个线程的时间片结束时，系统检查是否有另一个优先级 31 的线程可以运行；如果是，就运行将那个线程分配给 CPU。只要存在可调度的较高优先级的线程，其他优先级的线程就无法运行，这种情况称为饥饿。多处理器机器发生饥饿的可能性要小得多，因为这种机器上优先级为 31 的线程和优先级为 30 的线程可以同时运行。系统总是保持各个 CPU 处于忙碌状态，只有没有线程可调度的时候，CPU 才会空闲下来。较高优先级的线程总是抢占较低优先级的线程，无论正在运行的是什么较低优先级的线程。系统启动时会创建一个特殊的零页线程（zero page thread）。该线程的优先级是 0，而且是整个系统唯一优先级为 0 的线程。在没有其他线程需要 “干活儿” 的时候，零页线程将系统 RAM 的所有空闲页清零。由于开发人员在为线程分配优先级时很难做到完全合理，因此 Windows 公开了优先级系统的一个抽象层。Windows 支持 6 个进程优先级类：Idle、Below Normal、Normal、Above Normal、High 和 Realtime。默认的 Normal 是最常用的优先级类。只有绝对必要的时候才应使用 High 优先级类。Realtime 优先级类要尽可能地避免。Realtime 优先级相当高，它甚至可能干扰操作系统任务，比如阻碍一些必要的磁盘 I/O 和网络传输。此外，Windows 支持 7 个相对线程优先级：Idle、Lowest、Below Normal、Normal、Above Normal、Highest 和 Time-Critical。这些优先级是相对于进程优先级类而言的。每个线程的优先级取决于两个标准：1) 它的进程的优先级类；2) 在其进程的优先级类中，线程的优先级。优先级类和优先级合并构成了一个线程的 “基础优先级”(base priority)。注意，每个线程都有一个动态优先级 (dynamic priority)。线程调度器根据这个优先级来决定要执行哪个线程。最初，线程的动态优先级和它的基础优先级是相同的。系统可提升 (boost) 和降低 (lower) 动态优先级，以确保它的可响应性，并避免线程在处理器时间内 “饥饿”。但是，对于基础优先级 16~31 之间的线程，系统不会提升它们的优先级。只有基础优先级在 0 到 15 之间的线程才会被动态提升 (优先级)。更改一个进程的优先级类，线程的相对优先级不会改变，但它的绝对优先级值会改变。以下优先级只有以内核模式运行的设备驱动程序才能获得：0，17，18，19，20，21，27，28，29 或者 30。你的应用程序可更改其线程的相对线程优先级，这需要设置  <code>Thread</code>  的  <code>Priority</code>  属性，向其传递  <code>ThreadPriority</code>  枚举类型定义的 5 个值之一； <code>Lowest</code> ， <code>BelowNormal</code> ， <code>Normal</code> ， <code>AboveNormal</code>  或者  <code>Highest</code> 。然而，就像 Windows 为自己保留了优先级 0 和 Realtime 范围一样，CLR 为自己保留了 Idle 和 Time-Critical 优先级。<strong>CLR 的终结器线程以 Time-Critical 优先级运行。</strong></p>\n<h2 id=\"foreground-threads-vs-background-threads\"><a class=\"anchor\" href=\"#foreground-threads-vs-background-threads\">#</a> Foreground Threads vs. Background Threads</h2>\n<blockquote>\n<p>The CLR considers every thread to be either a foreground thread or a background thread. When all  the foreground threads in a process stop running, the CLR forcibly ends any background threads that  are still running. These background threads are ended immediately; no exception is thrown.</p>\n</blockquote>\n<blockquote>\n<p>Therefore, you should use foreground threads to execute tasks that you really want to complete,  like flushing data from a memory buffer out to disk. And you should use background threads for tasks  that are not mission-critical, like recalculating spreadsheet cells or indexing records, because this work  can continue again when the application restarts, and there is no need to force the application to stay  active if the user wants to terminate it.</p>\n</blockquote>\n<blockquote>\n<p>The CLR needed to provide this concept of foreground and background threads to better support AppDomains. You see, each AppDomain could be running a separate application and each of  these applications would have its own foreground thread. If one application exits, causing its foreground thread to terminate, then the CLR still needs to stay up and running so that other applications  continue to run. After all the applications exit and all their foreground threads terminate, the whole  process can be destroyed.</p>\n</blockquote>\n<blockquote>\n<p>The following code demonstrates the difference between foreground and background threads.</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// Create a new thread (defaults to foreground)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span>Worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// Make the thread a background thread</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> t<span class=\"token punctuation\">.</span>IsBackground <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> t<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Start the thread</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// If t is a foreground thread, the application won't die for about 10 seconds</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// If t is a background thread, the application dies immediately</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Returning from Main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Simulate doing 10 seconds of work</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// The following line only gets displayed if this code is executed by a foreground thread</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Returning from Worker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>It is possible to change a thread from foreground to background and vice versa at any time during its lifetime. An application’s primary thread and any threads explicitly created by constructing a  Thread object default to being foreground threads. On the other hand, thread pool threads default  to being background threads. Also, any threads created by native code that enter the managed execution environment are marked as background threads.</p>\n</blockquote>\n<p>💡重要提示：尽量避免使用前台线程。我有次接手了一个顾问工作，有个应用程序就是不终止。花了几小时研究问题后，才发现是一个 UI 组件显式地创建了一个前台线程 (默认)，这正是进程一直不终止的原因。后来修改组件使用线程池才解决了问题。执行效率也提升了。</p>\n<p>💡小结：CLR 将每个线程要么视为前台线程，要么视为后台线程。一个进程的所有前台线程停止运行时，CLR 强制终止仍然在运行的任何后台线程。这些后台线程被直接终止，不抛出异常。每个 AppDomain 都可运行一个单独的应用程序，而每个应用程序都有自己的前台线程。如果应用程序退出，造成它的前台线程终止，则 CLR 仍需保持活动并运行，使其他应用程序能继续运行。在线程的生存期中，任何时候都可以从前台变成后台，或者从后台变成前台。应用程序的主线程以及通过构造一个 Thread 对象来显式创建的任何线程都默认为前台线程。相反，线程池线程默认为后台线程。另外，由进入托管执行环境的本机（native）代码创建的任何线程都被标记为后台线程。</p>\n<h2 id=\"what-now\"><a class=\"anchor\" href=\"#what-now\">#</a> What Now?</h2>\n<blockquote>\n<p>In this chapter, I’ve explained the basics about threads, and I hope I’ve made it clear to you that  threads are very expensive resources that should be used sparingly. The best way to accomplish  this is by using the thread pool. The thread pool will manage thread creation and destruction for  you automatically. The thread pool creates a set of threads that get reused for various tasks so your  application requires just a few threads to accomplish all of its work.</p>\n</blockquote>\n<blockquote>\n<p>In Chapter 27, I will focus on how to use the thread pool to perform compute-bound operations.  Then, in Chapter 28, I will discuss how to use the thread pool to perform I/O-bound operations. In  many scenarios, you can perform asynchronous compute-bound and I/O-bound operations in such  a way that thread synchronization is not required at all. However, there are some scenarios where  thread synchronization is required, and the way that the thread synchronization constructs work and  the difference between these various constructs are discussed in Chapter 29, “Primitive Thread Synchronization Constructs,” and Chapter 30, “Hybrid Thread Synchronization Constructs.”</p>\n</blockquote>\n<blockquote>\n<p>Before ending this discussion, I’d like to point out that I have been working extensively with  threads because the first beta version of Windows NT 3.1 was available around 1992. And when .NET  was in beta, I started producing a library of classes that can simplify asynchronous programming and  thread synchronization. This library is called the Wintellect Power Threading Library, and it is freely  downloadable and usable. Versions of the library exist for the desktop CLR, the Silverlight CLR, and  the Compact Framework. The library, documentation, and sample code can be downloaded from  <span class=\"exturl\" data-url=\"aHR0cDovL1dpbnRlbGxlY3QuY29tL1Bvd2VyVGhyZWFkaW5nLmFzcHg=\">http://Wintellect.com/PowerThreading.aspx</span>. This website also contains links to a support forum, in  addition to videos that show how to use various parts of the library.</p>\n</blockquote>\n<p>💡小结：线程是非常宝贵的资源，必须省着用，为了做到这一点，最好的方式就是使用 CLR 的线程池。线程池自动为你管理线程的创建和销毁。线程池创建的线程将为各种任务而重用，所以你的应用程序其实只需几个线程即可完成全部工作。</p>\n",
            "tags": [
                "CSharp",
                "CLR-via-CSharp",
                "读书笔记",
                "C#"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/11/cpp/cpp-primer/Chapter%2019%20Specialized%20Tools%20and%20Techniques/",
            "url": "http://sakupinera.github.io/2023/01/11/cpp/cpp-primer/Chapter%2019%20Specialized%20Tools%20and%20Techniques/",
            "title": "C++ Primer - Chapter 19 Specialized Tools and Techniques",
            "date_published": "2023-01-10T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-19-specialized-tools-and-techniques\"><a class=\"anchor\" href=\"#chapter-19-specialized-tools-and-techniques\">#</a> Chapter 19 Specialized Tools and Techniques</h1>\n<h2 id=\"controlling-memory-allocation\"><a class=\"anchor\" href=\"#controlling-memory-allocation\">#</a> Controlling Memory Allocation</h2>\n<hr />\n<h3 id=\"控制内存分配\"><a class=\"anchor\" href=\"#控制内存分配\">#</a> 控制内存分配</h3>\n<h4 id=\"重载new和delete\"><a class=\"anchor\" href=\"#重载new和delete\">#</a> 重载 new 和 delete</h4>\n<ul>\n<li><strong> <code>new</code>  表达式的工作机理</strong>：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token operator\">*</span>sp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配并初始化一个 string 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 分配 10 个默认初始化的 string 对象</span></pre></td></tr></table></figure><ul>\n<li>\n<p>上述代码实际执行了<strong>三步操作</strong>：</p>\n<ul>\n<li><code>new</code>  表达式调用一个名为 <code>operator new</code>  (或 <code>operator new []</code> ) 的标准库函数，它分配一块<strong>足够大的</strong>、<strong>原始的</strong>、<strong>未命名的</strong>内存空间以便存储特定类型的对象 (或对象的数组)。</li>\n<li>编译器运行相应的构造函数以构造这些对象，并为其传入初始值。</li>\n<li>对象被分配了空间并构造完成，返回一个指向该对象的指针。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>delete</code>  表达式的工作机理</strong>：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> sp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 销毁 * sp，然后释放 sp 指向的内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 销毁数组中的元素，然后释放对应的内存空间</span></pre></td></tr></table></figure><ul>\n<li>上述代码实际执行了<strong>两步操作</strong>：\n<ul>\n<li>对 <code>sp</code>  所指向的对象或者 <code>arr</code>  所指的数组中的元素执行对应的析构函数。</li>\n<li>编译器调用名为 <code>operator delete</code>  (或 <code>operator delete[]</code> ) 的标准库函数释放内存空间。</li>\n</ul>\n</li>\n<li>当自定义了全局的 <code>operator new</code>  函数和 <code>operator delete</code>  函数后，我们就担负起了控制动态内存分配的职责。这两个函数<strong>必须是正确的</strong>。因为它们是程序整个处理过程中至关重要的一部分。</li>\n<li>标准库定义了 <code>operator new</code>  函数和 <code>operator delete</code>  函数的 8 个重载版本：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这些版本可能抛出异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配一个对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 分配一个数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放一个对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 释放一个数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 这些版本承诺不会抛出异常</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">,</span> nothrow_t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">,</span> nothrow_t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> nothrow_t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> nothrow_t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>应用程序可以自定义上面函数版本中的任意一个，前提是自定义的版本必须位于<strong>全局作用域</strong>或者<strong>类作用域</strong>中。</li>\n<li><strong>注意：</strong> 提供新的 <code>operator new</code>  函数和 <code>operator delete</code>  函数的目的在于改变内存分配的方式，但是不管怎样，都不能改变 <code>new</code>  运算符和 <code>delete</code>  运算符的基本含义。</li>\n<li>使用从 C 语言继承的函数 <code>malloc</code>  和 <code>free</code>  函数能实现以某种方式执行分配内存和释放内存的操作：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>mem <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> mme<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">bad_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>mem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"定位new表达式\"><a class=\"anchor\" href=\"#定位new表达式\">#</a> 定位 new 表达式</h4>\n<ul>\n<li>应该使用 new 的定位 <code>new(placement new)</code>  形式传递一个地址，定位 <code>new</code>  的形式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> type</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> <span class=\"token function\">type</span> <span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> type <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> type <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>braced initializer list<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//place_address 必须是一个指针，同时在 initializers 中提供一个 (可能为空的) 以逗号分隔的初始值列表，该初始值列表将用于构造新分配的对象。</span></pre></td></tr></table></figure><ul>\n<li>当只传入一个指针类型的实参时，定位 <code>new</code>  表达式构造对象但是不分配内存。</li>\n<li>调用析构函数会销毁对象，但是不会释放内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token operator\">*</span>sp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配并初始化一个 string 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">-></span><span class=\"token operator\">~</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"exercise-191\"><a class=\"anchor\" href=\"#exercise-191\">#</a> Exercise 19.1</h3>\n<blockquote>\n<p>使用 malloc 编写你自己的 operator new (sizt_t) 函数，使用 free 编写 operator delete (void *) 函数。</p>\n</blockquote>\n<h3 id=\"exercise-192\"><a class=\"anchor\" href=\"#exercise-192\">#</a> Exercise 19.2</h3>\n<blockquote>\n<p>默认情况下，allocator 类使用 operator new 获取存储空间，然后使用 operator delete 释放它。利用上一题中的两个函数重新编译并运行你的 StrVec 程序。</p>\n</blockquote>\n<h2 id=\"run-time-type-identification\"><a class=\"anchor\" href=\"#run-time-type-identification\">#</a> Run-Time Type Identification</h2>\n<hr />\n<h3 id=\"运行时类型识别\"><a class=\"anchor\" href=\"#运行时类型识别\">#</a> 运行时类型识别</h3>\n<ul>\n<li>运行时类型识别 <code>(run-time type identification, RTTI)</code>  的功能由两个运算符实现：\n<ul>\n<li><code>typeid</code>  运算符， 用于返回表达式的类型。</li>\n<li><code>dynamic_cast</code>  运算符，用于将基类的指针或引用安全地转换曾派生类的指针或引用。</li>\n</ul>\n</li>\n<li>使用 <code>RTTI</code>  必须要加倍小心。在可能的情况下，最好定义虚函数而非直接接管类型管理的重任。</li>\n</ul>\n<h4 id=\"dynamic_cast运算符\"><a class=\"anchor\" href=\"#dynamic_cast运算符\">#</a> dynamic_cast 运算符</h4>\n<ul>\n<li>dynamic_cast 运算符的使用形式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//e 必须是一个有效的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//e 必须是一个左值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">//e 不能是左值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上，type 类型必须时一个类类型，并且通常情况下该类型应该含有虚函数。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//e 的类型必须符合三个条件中的任意一个，它们是：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 1. e 的类型是目标 type 的公有派生类；</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. e 的类型是目标 type 的共有基类；</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 3. e 的类型就是目标 type 的类型；</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 指针类型的 dynamic_cast</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 假设 Base 类至少含有一个虚函数，Derived 是 Base 的共有派生类。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Derived <span class=\"token operator\">*</span>dp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Derived<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用 dp 指向的 Derived 对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//bp 指向一个 Base 对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 使用 dp 指向的 Base 对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 引用类型的 dynamic_cast</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">const</span> Derived <span class=\"token operator\">&amp;</span>d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Derived<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 使用 b 引用的 Derived 对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>bad_cast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 处理类型转换失败的情况</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>可以对一个空指针执行 <code>dynamic_cast</code> ，结果是所需类型的空指针。</li>\n</ul>\n<h4 id=\"typeid运算符\"><a class=\"anchor\" href=\"#typeid运算符\">#</a> typeid 运算符</h4>\n<ul>\n<li><code>typeid运算符(typeid operator)</code> ，它允许程序向表达式提问：<strong>你的对象是什么类型？</strong></li>\n<li><code>typeid</code>  表达式的形式是 <code>typeid(e)</code> ，其中 <code>e</code>  可以是任意表达式或类型的名字，它操作的结果是一个常量对象的引用。它可以作用于任意类型的表达式。</li>\n<li>通常情况下，使用 typeid 比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Derived <span class=\"token operator\">*</span>dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Derived<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Base <span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//bp 和 dp 指向同一类型的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>Derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//bp 实际指向 Derived 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当 typeid 作用于指针时 (而非指针所指向的对象)，返回的结果是该指针的静态编译时类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 下面的检查永远是失败的：bp 的类型是指向 Base 的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>Derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 永远不会执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用rtti\"><a class=\"anchor\" href=\"#使用rtti\">#</a> 使用 RTTI</h4>\n<ul>\n<li>用途：为具有继承关系的类实现相等运算符时。对于两个对象来说，如果它们的类型相同并且对应的数据成员取值相同，则说这两个对象是相等的。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 类的层次关系</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Base<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// Base 的接口成员</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// Base 的数据成员和其他用于实现的成员</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Derived 的其他接口成员</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Derived 的数据成员和其他用于实现的成员</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 类型敏感的相等运算符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Base <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 如果 typeid 不相同，返回 false；否则虚调用 equal</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> lhs<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 虚 equal 函数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Derived</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">auto</span> r <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Derived<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 执行比较两个 Derived 对象的操作并返回结果</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 基类 equal 函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Base <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 执行比较 Base 对象的操作</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"type_info类\"><a class=\"anchor\" href=\"#type_info类\">#</a> type_info 类</h4>\n<hr />\n<h3 id=\"exercise-193\"><a class=\"anchor\" href=\"#exercise-193\">#</a> Exercise 19.3</h3>\n<blockquote>\n<p>已知存在如下的类继承体系，其中每个类分别定义了一个公有的默认构造函数和一个析构函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面哪个 dynamic_cast 将失败？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> A <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tB <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>B<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> B <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tC <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> A <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tB <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>B<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-194\"><a class=\"anchor\" href=\"#exercise-194\">#</a> Exercise 19.4</h3>\n<blockquote>\n<p>使用上一个练习定义的类改写下面的代码，将表达式 * pa 转换成类型 C&amp;：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>C <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 使用 C 的成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 使用 A 的成员</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-195\"><a class=\"anchor\" href=\"#exercise-195\">#</a> Exercise 19.5</h3>\n<blockquote>\n<p>在什么情况下你应该用 dynamic_cast 替代虚函数？</p>\n</blockquote>\n<h3 id=\"exercise-196\"><a class=\"anchor\" href=\"#exercise-196\">#</a> Exercise 19.6</h3>\n<blockquote>\n<p>编写一条表达式将 Query_base 指针动态转换为 AndQuery 指针。分别使用 AndQuery 的对象以及其他类型的对象测试转换是否有效。打印一条表示类型转换是否成功的信息，确保实际输出的结果与期望的一致。</p>\n</blockquote>\n<h3 id=\"exercise-197\"><a class=\"anchor\" href=\"#exercise-197\">#</a> Exercise 19.7</h3>\n<blockquote>\n<p>编写与上一个练习类似的转换，这一次将 Query_base 对象转换为 AndQuery 的引用。重复上面的测试过程，确保转换能正常工作。</p>\n</blockquote>\n<h3 id=\"exercise-198\"><a class=\"anchor\" href=\"#exercise-198\">#</a> Exercise 19.8</h3>\n<blockquote>\n<p>编写一条 typeid 表达式检查两个 Query_base 对象是否指向同一种类型。再检查该类型是否是 AndQuery。</p>\n</blockquote>\n<h3 id=\"exercise-199\"><a class=\"anchor\" href=\"#exercise-199\">#</a> Exercise 19.9</h3>\n<blockquote>\n<p>编写与本节最后一个程序类似的代码，令其打印你的编译器为一些常见类型所起的名字。如果你得到的输出结果与本书类似，尝试编写一个函数将这些字符串翻译成人们更容易读懂的形式。</p>\n</blockquote>\n<h3 id=\"exercise-1910\"><a class=\"anchor\" href=\"#exercise-1910\">#</a> Exercise 19.10</h3>\n<blockquote>\n<p>已知存在如下的类继承体系，其中每个类定义了一个默认公有的构造函数和一个虚析构函数。下面的语句将打印哪些类型名字？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> A <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> C cobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tA<span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> cobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> B <span class=\"token operator\">*</span>px <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tA<span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"enumerations\"><a class=\"anchor\" href=\"#enumerations\">#</a> Enumerations</h2>\n<hr />\n<h3 id=\"枚举类型\"><a class=\"anchor\" href=\"#枚举类型\">#</a> 枚举类型</h3>\n<ul>\n<li>枚举类型 <code>(enumeration)</code>  使我们可以将一组整型常量组织在一起。枚举属于字面值常量类型。</li>\n<li><strong>限定作用域的枚举类型 (scoped enumeration)</strong>：首先是关键字 <code>enum class(或enum struct)</code> ，随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">open_modes</span> <span class=\"token punctuation\">&#123;</span>input<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> append<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>不限定作用域的枚举类型 <code>(unscoped enumeration)</code> ：省略关键字 <code>class(或struct)</code> ，枚举类型的名字是可选的。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span>floatPrec <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> doublePrec <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> double_doublePrec <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"pointer-to-class-member\"><a class=\"anchor\" href=\"#pointer-to-class-member\">#</a> Pointer to Class Member</h2>\n<hr />\n<h3 id=\"类成员指针\"><a class=\"anchor\" href=\"#类成员指针\">#</a> 类成员指针</h3>\n<p><strong>成员指针</strong>：指可以指向类的非静态成员的指针。</p>\n<h4 id=\"数据成员指针\"><a class=\"anchor\" href=\"#数据成员指针\">#</a> 数据成员指针</h4>\n<ul>\n<li>和其他指针一样，在声明成员指针时也使用 * 来表示当前声明的名字是一个指针。与普通指针不同的时，成员指针还必须包含成员所属的类。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//pdata 可以指向一个常量 (非常量) Screen 对象的 string 成员</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> string Screen<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">*</span>pdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// C++11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> pdata <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Screen<span class=\"token double-colon punctuation\">::</span>contents<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>当我们初始化一个成员指针或为成员指针赋值时，该指针没有指向任何数据。成员指针指定了成员而非该成员所属的对象，只有当解引用成员指针时才提供对象的信息。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Screen myScreen<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pScreen <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>myScreen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> s <span class=\"token operator\">=</span> myScreen<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>pdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s <span class=\"token operator\">=</span> pScreen<span class=\"token operator\">-></span><span class=\"token operator\">*</span>pdata<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"成员函数指针\"><a class=\"anchor\" href=\"#成员函数指针\">#</a> 成员函数指针</h4>\n<ul>\n<li>因为函数调用运算符的优先级较高，所以在声明指向成员函数的指针并使用这些的指针进行函数调用时，括号必不可少： <code>(C::*p)(parms)</code>  和 <code>(obj.*p)(args)</code> 。</li>\n</ul>\n<h4 id=\"将成员函数用作可调用对象\"><a class=\"anchor\" href=\"#将成员函数用作可调用对象\">#</a> 将成员函数用作可调用对象</h4>\n<hr />\n<h3 id=\"exercise-1911\"><a class=\"anchor\" href=\"#exercise-1911\">#</a> Exercise 19.11</h3>\n<blockquote>\n<p>普通的数据指针和指向数据成员的指针有何区别？</p>\n</blockquote>\n<h3 id=\"exercise-1912\"><a class=\"anchor\" href=\"#exercise-1912\">#</a> Exercise 19.12</h3>\n<blockquote>\n<p>定义一个成员指针，令其可以指向 Screen 类的 cursor 成员。通过该指针获得 Screen::cursor 的值。</p>\n</blockquote>\n<h3 id=\"exercise-1913\"><a class=\"anchor\" href=\"#exercise-1913\">#</a> Exercise 19.13</h3>\n<blockquote>\n<p>定义一个类型，使其可以表示指向 Sales_data 类的 bookNo 成员的指针。</p>\n</blockquote>\n<h3 id=\"exercise-1914\"><a class=\"anchor\" href=\"#exercise-1914\">#</a> Exercise 19.14</h3>\n<blockquote>\n<p>下面的代码合法吗？如果合法，代码的含义是什么？如果不合法，解释原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> pmf <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Screen<span class=\"token double-colon punctuation\">::</span>get_cursor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pmf <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Screen<span class=\"token double-colon punctuation\">::</span>get<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1915\"><a class=\"anchor\" href=\"#exercise-1915\">#</a> Exercise 19.15</h3>\n<blockquote>\n<p>普通函数指针和指向成员函数的指针有何区别？</p>\n</blockquote>\n<h3 id=\"exercise-1916\"><a class=\"anchor\" href=\"#exercise-1916\">#</a> Exercise 19.16</h3>\n<blockquote>\n<p>声明一个类型别名，令其作为指向 Sales_data 的 avg_price 成员的指针的同义词。</p>\n</blockquote>\n<h3 id=\"exercise-1917\"><a class=\"anchor\" href=\"#exercise-1917\">#</a> Exercise 19.17</h3>\n<blockquote>\n<p>为 Screen 的所有成员函数类型各定义一个类型别名。</p>\n</blockquote>\n<h3 id=\"exercise-1918\"><a class=\"anchor\" href=\"#exercise-1918\">#</a> Exercise 19.18</h3>\n<blockquote>\n<p>编写一个函数，使用 count_if 统计在给定的 vector 中有多少个空 string。</p>\n</blockquote>\n<h3 id=\"exercise-1919\"><a class=\"anchor\" href=\"#exercise-1919\">#</a> Exercise 19.19</h3>\n<blockquote>\n<p>编写一个函数，令其接受 vector&lt;Sales_data&gt; 并查找平均价格高于某个值的第一个元素。</p>\n</blockquote>\n<h2 id=\"nested-classes\"><a class=\"anchor\" href=\"#nested-classes\">#</a> Nested Classes</h2>\n<hr />\n<h3 id=\"嵌套类\"><a class=\"anchor\" href=\"#嵌套类\">#</a> 嵌套类</h3>\n<ul>\n<li>一个类可以定义在另一个类的内部，前者称为嵌套类 (nested class) 或嵌套类型 (nested type)。<strong>嵌套类常用于定义作为实现部分的类</strong>。</li>\n<li>嵌套类是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象是相互独立的。</li>\n<li>嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1920\"><a class=\"anchor\" href=\"#exercise-1920\">#</a> Exercise 19.20</h3>\n<blockquote>\n<p>将你的 QueryResult 类嵌套在 TextQuery 中，然后重新运行 12.3.2 节中使用了 TextQuery 的程序。</p>\n</blockquote>\n<h2 id=\"union-a-space-saving-class\"><a class=\"anchor\" href=\"#union-a-space-saving-class\">#</a> union: A Space-Saving Class</h2>\n<hr />\n<h3 id=\"union一种节省空间的类\"><a class=\"anchor\" href=\"#union一种节省空间的类\">#</a> union：一种节省空间的类</h3>\n<ul>\n<li><code>联合(union)</code>  是一种特殊的类。一个 <code>union</code>  可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。<strong>它不能含有引用类型的成员和虚函数</strong>。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Token 类型的对象只有一个成员，该成员的类型可能是下列类型中的任意一种</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> Token <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 默认情况下成员是共有的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> cval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>；</pre></td></tr></table></figure><ul>\n<li><code>匿名union(anonymous union)</code>  是一个未命名的 <code>union</code> ，并且在右花括号和分号之间没有任何声明。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> cval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 可以直接访问它的成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cal <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ival <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>注意：</strong>  <code>匿名union</code>  不能包含受保护的成员或私有成员，也不能定义成员函数。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1921\"><a class=\"anchor\" href=\"#exercise-1921\">#</a> Exercise 19.21</h3>\n<blockquote>\n<p>编写你自己的 Token 类。</p>\n</blockquote>\n<h3 id=\"exercise-1922\"><a class=\"anchor\" href=\"#exercise-1922\">#</a> Exercise 19.22</h3>\n<blockquote>\n<p>为你的 Token 类添加一个 Sales_data 类型的成员。</p>\n</blockquote>\n<h3 id=\"exercise-1923\"><a class=\"anchor\" href=\"#exercise-1923\">#</a> Exercise 19.23</h3>\n<blockquote>\n<p>为你的 Token 类添加移动构造函数和移动赋值运算符。</p>\n</blockquote>\n<h3 id=\"exercise-1924\"><a class=\"anchor\" href=\"#exercise-1924\">#</a> Exercise 19.24</h3>\n<blockquote>\n<p>如果我们将一个 Token 对象付给它自己将发生什么情况？</p>\n</blockquote>\n<h3 id=\"exercise-1925\"><a class=\"anchor\" href=\"#exercise-1925\">#</a> Exercise 19.25</h3>\n<blockquote>\n<p>编写一系列赋值运算符，令其分别接收 union 中各种类型的值。</p>\n</blockquote>\n<h2 id=\"local-classes\"><a class=\"anchor\" href=\"#local-classes\">#</a> Local Classes</h2>\n<hr />\n<h3 id=\"局部类\"><a class=\"anchor\" href=\"#局部类\">#</a> 局部类</h3>\n<ul>\n<li><code>局部类(local class)</code> ：可以定义在某个函数的内部的类。它的类型只在定义它的作用域内可见。和嵌套类不同，局部类的成员受到严格限制。</li>\n<li>局部类的所有成员 (包括函数在内) 都必须完整定义在类的内部。因此，局部类的作用与嵌套类相比相差很远。</li>\n<li><strong>局部类不能使用函数作用域中的变量。</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> inti si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">loc</span> <span class=\"token punctuation\">&#123;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// Bar 是 foo 的局部类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Loc locVal<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：使用一个局部类型名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> barVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">fooBar</span><span class=\"token punctuation\">(</span>Loc l <span class=\"token operator\">=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 正确：默认实参是 Loc::a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            barVal <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 错误：val 是 foo 的局部变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            barVal <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>val<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 正确：使用一个全局对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            barVal <span class=\"token operator\">=</span> si<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 正确：使用一个静态局部对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            locVal <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：使用一个枚举成员</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>；</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"inherently-nonportable-features\"><a class=\"anchor\" href=\"#inherently-nonportable-features\">#</a> Inherently Nonportable Features</h2>\n<hr />\n<h3 id=\"固有的不可移植的特性\"><a class=\"anchor\" href=\"#固有的不可移植的特性\">#</a> 固有的不可移植的特性</h3>\n<p>所谓不可移植的特性是指<strong>因机器而异的特性</strong>，当将含有不可移植特性的程序从一台机器转移到另一台机器上时，通常需要重新编写该程序。</p>\n<h4 id=\"位域\"><a class=\"anchor\" href=\"#位域\">#</a> 位域</h4>\n<ul>\n<li>类可以将其 (非静态) 数据成员定义成<strong>位域 (bit-field)</strong>，在一个位域中含有一定数量的二进制位。当一个程序需要向其他程序或硬件设备传递二进制数据时，通常会用到位域。</li>\n<li>位域在内存中的布局是与机器相关的。</li>\n<li>位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，通常情况下我们使用无符号类型保存一个位域。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> Bit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Bit mode<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Bit modified<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Bit prot_owner<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Bit prot_group<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Bit prot_world<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">modes</span> <span class=\"token punctuation\">&#123;</span>READ <span class=\"token operator\">=</span> <span class=\"token number\">01</span><span class=\"token punctuation\">,</span> WRITE <span class=\"token operator\">=</span> <span class=\"token number\">02</span><span class=\"token punctuation\">,</span> EXECUTE <span class=\"token operator\">=</span> <span class=\"token number\">03</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    File <span class=\"token operator\">&amp;</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>modes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 使用位域</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">File</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    modified <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">File</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> modified<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//... 保存内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>File <span class=\"token operator\">&amp;</span><span class=\"token class-name\">File</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>File<span class=\"token double-colon punctuation\">::</span>modes m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    mode <span class=\"token operator\">|=</span> READ<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 按默认方式设置 READ</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 其他处理</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">&amp;</span> WRITE<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 如果打开了 READ 和 WRITE</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 按照读 / 写方式打开文件</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"volatile限定符\"><a class=\"anchor\" href=\"#volatile限定符\">#</a> volatile 限定符</h4>\n<ul>\n<li>当对象的值可能在程序的控制或检测之外被改变时，应该将该对象声明为 <code>volatile</code> 。关键字 <code>volatile</code>  告诉编译器不应对这样的对象进行优化。</li>\n<li><code>const</code>  和 <code>volatile</code>  的一个重要区别是不能使用合成的拷贝 / 移动构造函数及赋值运算符初始化 <code>volatile</code>  对象或者从 <code>volatile</code>  对象赋值。</li>\n</ul>\n<h4 id=\"链接指示extern-c\"><a class=\"anchor\" href=\"#链接指示extern-c\">#</a> 链接指示：extern &quot;C&quot;</h4>\n<ul>\n<li><code>C++</code>  使用 <code>链接指示(linkage directive)</code>  指出任意非 <code>C++</code>  函数所用的语言。</li>\n<li>要想把 <code>C++</code>  代码和其他语言 (包括 <code>C</code>  语言) 编写的代码放在一起使用，要求我们必须有权访问该语言的编译器，并且这个编译器与当前的 <code>C++</code>  编译器是兼容的。</li>\n<li><code>C++</code>  从 C 语言继承的标准库函数可以定义为 <code>C</code>  函数，但并非必须：决定使用 <code>C</code>  还是 <code>C++</code>  实现的 <code>C</code>  标准库，是每个 <code>C++</code>  实现的事情。</li>\n<li>有时需要在 C 和 C<ins> 中编译同一个源文件，为了实现这一目的，在编译 C</ins> 版本的程序时预处理器定义 <code>__cplusplus</code> 。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"exercise-1926\"><a class=\"anchor\" href=\"#exercise-1926\">#</a> Exercise 19.26</h3>\n<blockquote>\n<p>说明下列声明语句的含义并判断它们是否合法：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">double</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/10/cpp/cpp-primer/Chapter%2018%20Tools%20for%20Large%20Programs/",
            "url": "http://sakupinera.github.io/2023/01/10/cpp/cpp-primer/Chapter%2018%20Tools%20for%20Large%20Programs/",
            "title": "C++ Primer - Chapter 18 Tools for Large Programs",
            "date_published": "2023-01-09T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-18-tools-for-large-programs\"><a class=\"anchor\" href=\"#chapter-18-tools-for-large-programs\">#</a> Chapter 18 Tools for Large Programs</h1>\n<p>大规模应用程序的特殊要求包括：</p>\n<ul>\n<li>在独立开发的子系统之间协同处理错误的能力。</li>\n<li>使用各种库进行协同开发的能力。</li>\n<li>对比较复杂的应用概念建模的能力。</li>\n</ul>\n<h2 id=\"exception-handling\"><a class=\"anchor\" href=\"#exception-handling\">#</a> Exception Handling</h2>\n<hr />\n<h3 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<p><strong>异常处理</strong>（exception handling）机制允许程序中独立开发的部分能够在运行时就出现的问题进行通信并作出相应的处理。</p>\n<h4 id=\"抛出异常\"><a class=\"anchor\" href=\"#抛出异常\">#</a> 抛出异常</h4>\n<p>在 C++ 语言中，我们通过<strong>抛出</strong>（throwing）一条表达式来<strong>引发</strong>（raised）一个异常。异常类型和当前的调用链决定了哪段<strong>处理代码</strong>（handler）将用来处理该异常。</p>\n<p>程序的控制权从 <code>throw</code>  转移到 <code>catch</code>  模块。</p>\n<p><strong>栈展开</strong>：当 <code>throw</code>  出现在一个 <code>try语句块</code> 时，检查该 <code>try语句块</code> 相关的 <code>catch</code>  字句，若有匹配则处理；若无匹配，则继续检查外层的 <code>try</code>  匹配的 <code>catch</code> 。</p>\n<p>若一个异常没有被捕获，则它将终止当前的程序。</p>\n<p>对象销毁：</p>\n<ul>\n<li>块退出后，它的局部对象将被销毁。</li>\n<li>若异常发生在构造函数中，即使某个对象只构造了一部分，也要确保已构造的成员正确地被销毁。</li>\n<li>将资源释放放在类的析构函数中，以保证资源能被正确释放。析构函数本身不会引发异常。</li>\n</ul>\n<h4 id=\"捕获异常\"><a class=\"anchor\" href=\"#捕获异常\">#</a> 捕获异常</h4>\n<p>若无需访问抛出的异常对象，则可以忽略捕获形参的名字。</p>\n<p>通常，若 <code>catch</code>  接受的异常与某个继承体系有关，则最好将该 <code>catch</code>  的参数定义成引用类型。</p>\n<p>搜索 <code>catch</code>  未必是最佳匹配，而是第一个匹配，因此，越细化的 <code>catch</code>  越应该放在 <code>catch</code>  列表前段。</p>\n<p>重新抛出： <code>catch</code>  代码执行一条 <code>throw;</code>  将异常传递给另一个 <code>catch</code>  语句。</p>\n<p>捕获所有异常： <code>catch(...)</code></p>\n<h4 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p>处理构造函数初始值异常的唯一方法是将构造函数协程函数 <code>try</code>  语句块。</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span> <span class=\"token keyword\">try</span><span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/* 函数体 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>bad_alloc <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">handle_out_of_memory</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"noexcept异常说明\"><a class=\"anchor\" href=\"#noexcept异常说明\">#</a> noexcept 异常说明</h4>\n<p>使用 <code>noexcept</code>  说明指定某个函数不会抛出异常。</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">recoup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//C++11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>coid <span class=\"token function\">recoup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 老版本</span></pre></td></tr></table></figure><h4 id=\"异常类层次\"><a class=\"anchor\" href=\"#异常类层次\">#</a> 异常类层次</h4>\n<p>标准 exception 层次：</p>\n<ul>\n<li>exception\n<ul>\n<li>bad_cast</li>\n<li>bad_alloc</li>\n<li>runtime_error\n<ul>\n<li>overflow_error</li>\n<li>underflow_error</li>\n<li>range_error</li>\n</ul>\n</li>\n<li>logic_error\n<ul>\n<li>domain_error</li>\n<li>invalid_argument</li>\n<li>out_of_range</li>\n<li>length_error</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>自定义异常类：</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">out_of_stock</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">runtime_error</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">out_of_stock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"exercise-181\"><a class=\"anchor\" href=\"#exercise-181\">#</a> Exercise 18.1</h3>\n<blockquote>\n<p>在下列  <code>throw</code>  语句中异常对象的类型是什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> range_error <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">throw</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> exception <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a):  <code>range_error</code></li>\n<li>(b):  <code>exception</code></li>\n</ul>\n<h3 id=\"exercise-182\"><a class=\"anchor\" href=\"#exercise-182\">#</a> Exercise 18.2</h3>\n<blockquote>\n<p>当在指定的位置发生了异常时将出现什么情况？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">exercise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 此处发生异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>指针 <code>p</code>  指向的内容不会被释放，将造成内存泄漏。</p>\n<h3 id=\"exercise-183\"><a class=\"anchor\" href=\"#exercise-183\">#</a> Exercise 18.3</h3>\n<blockquote>\n<p>要想让上面的代码在发生异常时能正常工作，有两种解决方案。请描述这两种方法并实现它们。</p>\n</blockquote>\n<p>解：</p>\n<p>方法一：不使用指针，使用对象：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">intArray</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">intArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">explicit</span>    <span class=\"token function\">intArray</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">intArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// data meber</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>intArray <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二：使用智能指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-184\"><a class=\"anchor\" href=\"#exercise-184\">#</a> Exercise 18.4</h3>\n<blockquote>\n<p>查看图 18.1 所示的继承体系，说明下面的  <code>try</code>  块有何错误并修改它。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 使用 C++ 标准库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> runtime_error <span class=\"token operator\">&amp;</span>re<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>overflow_error eobj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>细化的异常类型应该写在前面：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 使用 C++ 标准库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>overflow_error eobj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> runtime_error <span class=\"token operator\">&amp;</span>re<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-185\"><a class=\"anchor\" href=\"#exercise-185\">#</a> Exercise 18.5</h3>\n<blockquote>\n<p>修改下面的 <code>main</code>  函数，使其能捕获图 18.1 所示的任何异常类型：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 使用 C++ 标准库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>处理代码应该首先打印异常相关的错误信息，然后调用  <code>abort</code>  终止函数。</p>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-186\"><a class=\"anchor\" href=\"#exercise-186\">#</a> Exercise 18.6</h3>\n<blockquote>\n<p>已知下面的异常类型和  <code>catch</code>  语句，书写一个  <code>throw</code>  表达式使其创建的异常对象能被这些  <code>catch</code>  语句捕获：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">exceptionType</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exceptionType <span class=\"token operator\">*</span>pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> EXCPTYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>EXCPTYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">exceptionType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">expection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> EXCPTYPE e <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-187\"><a class=\"anchor\" href=\"#exercise-187\">#</a> Exercise 18.7</h3>\n<blockquote>\n<p>根据第 16 章的介绍定义你自己的  <code>Blob</code>  和  <code>BlobPtr</code> ，注意将构造函数写成函数 <code>try</code>  语句块。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-188\"><a class=\"anchor\" href=\"#exercise-188\">#</a> Exercise 18.8</h3>\n<blockquote>\n<p>回顾你之前编写的各个类，为它们的构造函数和析构函数添加正确的异常说明。如果你认为某个析构函数可能抛出异常，尝试修改代码使得该析构函数不会抛出异常。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-189\"><a class=\"anchor\" href=\"#exercise-189\">#</a> Exercise 18.9</h3>\n<blockquote>\n<p>定义本节描述的书店程序异常类，然后为  <code>Sales_data</code>  类重新编写一个复合赋值运算符并令其抛出一个异常。</p>\n</blockquote>\n<h3 id=\"exercise-1810\"><a class=\"anchor\" href=\"#exercise-1810\">#</a> Exercise 18.10</h3>\n<blockquote>\n<p>编写程序令其对两个  <code>ISBN</code>  编号不相同的对象执行  <code>Sales_data</code>  的加法运算。为该程序编写两个不同的版本：一个处理异常，另一个不处理异常。观察并比较这两个程序的行为，用心体会当出现了一个未被捕获的异常时程序会发生什么情况。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1811\"><a class=\"anchor\" href=\"#exercise-1811\">#</a> Exercise 18.11</h3>\n<blockquote>\n<p>为什么  <code>what</code>  函数不应该抛出异常？</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h2 id=\"namespaces\"><a class=\"anchor\" href=\"#namespaces\">#</a> Namespaces</h2>\n<hr />\n<h3 id=\"命名空间\"><a class=\"anchor\" href=\"#命名空间\">#</a> 命名空间</h3>\n<p>多个库将名字放置在全局命名空间中将引发<strong>命名空间污染</strong>（namespace pollution）。<strong>命名空间</strong>（namespace）分割了全局命名空间，其中每个命名空间是一个作用域。</p>\n<h4 id=\"命名空间定义\"><a class=\"anchor\" href=\"#命名空间定义\">#</a> 命名空间定义</h4>\n<p>命名空间的定义包含两部分：1. 关键字 <code>namespace</code> ；2. 命名空间名称。后面是一系列由花括号括起来的声明和定义。命名空间作用域后面无需分号。</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> cplusplus_primer<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每个命名空间都是一个<strong>作用域</strong>。定义在某个命名空间内的名字可以被该命名空间内的其他成员直接访问，也可以被这些成员内嵌套作用域中的任何单位访问。位于该命名空间之外的代码必须明确指出所用的名字是属于哪个命名空间的。</p>\n<p>命名空间可以是<strong>不连续</strong>的。这点不同于其他作用域，意味着同一命名空间可以在多处出现。</p>\n<p><strong>内联命名空间</strong>（C++11）：</p>\n<p>无需使用该命名空间的前缀，通过外层命名空间就可以直接访问。</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> cplusplus_primer<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">inline</span> <span class=\"token keyword\">namespace</span> FifthEd<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 表示本书第 5 版代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query_base</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cplusplus_primer<span class=\"token double-colon punctuation\">::</span>Query_base qb<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>未命名的命名空间</strong>：</p>\n<p>指关键字 <code>namespace</code>  后面紧跟花括号的用法。未命名的命名空间中定义的变量拥有静态的声明周期：在第一次使用前创建，直到程序结束才销毁。不能跨越多个文件。</p>\n<h4 id=\"使用命名空间成员\"><a class=\"anchor\" href=\"#使用命名空间成员\">#</a> 使用命名空间成员</h4>\n<p>像 <code>namespace_name::member_name</code>  这样使用命名空间的成员非常繁琐。</p>\n<p><strong>命名空间的别名</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> primer <span class=\"token operator\">=</span> cplusplus_primer<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>using 声明</strong>（using declaration）：</p>\n<p>一条 <code>using</code>  声明语句一次只引入命名空间的一个成员。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>using 指示</strong>（using directive）：</p>\n<p>使得某个特定的命名空间中所有的名字都可见。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"类-命名空间与作用域\"><a class=\"anchor\" href=\"#类-命名空间与作用域\">#</a> 类、命名空间与作用域</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> A<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">C1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>A<span class=\"token double-colon punctuation\">::</span>C1<span class=\"token double-colon punctuation\">::</span>f3</pre></td></tr></table></figure><h4 id=\"重载与命名空间\"><a class=\"anchor\" href=\"#重载与命名空间\">#</a> 重载与命名空间</h4>\n<p><code>using</code>  声明语句声明的是一个名字，而非特定的函数，也就是包括该函数的所有版本，都被引入到当前作用域中。</p>\n<hr />\n<h3 id=\"exercise-1812\"><a class=\"anchor\" href=\"#exercise-1812\">#</a> Exercise 18.12</h3>\n<blockquote>\n<p>将你为之前各章练习编写的程序放置在各自的命名空间中。也就是说，命名空间 chapter15 包含 <code>Query</code>  程序的代码，命名空间 chapter10 包含 <code>TextQuery</code>  的代码；使用这种结构重新编译 <code>Query</code>  代码实例。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1813\"><a class=\"anchor\" href=\"#exercise-1813\">#</a> Exercise 18.13</h3>\n<blockquote>\n<p>什么时候应该使用未命名的命名空间？</p>\n</blockquote>\n<p>解：</p>\n<p>需要定义一系列静态的变量的时候。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU0NDY5L3VubmFtZWQtYW5vbnltb3VzLW5hbWVzcGFjZXMtdnMtc3RhdGljLWZ1bmN0aW9ucw==\">https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions</span></p>\n<h3 id=\"exercise-1814\"><a class=\"anchor\" href=\"#exercise-1814\">#</a> Exercise 18.14</h3>\n<blockquote>\n<p>假设下面的  <code>operator*</code>  声明的是嵌套的命名空间  <code>mathLib::MatrixLib</code>  的一个成员：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> mathLib <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">namespace</span> MatrixLib <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">matrix</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tmatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> matrix <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> matrix <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>请问你应该如何在全局作用域中声明该运算符？</p>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mathLib<span class=\"token double-colon punctuation\">::</span>MatrixLib<span class=\"token double-colon punctuation\">::</span>matrix mathLib<span class=\"token double-colon punctuation\">::</span>MatrixLib<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> mathLib<span class=\"token double-colon punctuation\">::</span>MatrixLib<span class=\"token double-colon punctuation\">::</span>matrix <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> mathLib<span class=\"token double-colon punctuation\">::</span>MatrixLib<span class=\"token double-colon punctuation\">::</span>matrix <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1815\"><a class=\"anchor\" href=\"#exercise-1815\">#</a> Exercise 18.15</h3>\n<blockquote>\n<p>说明  <code>using</code>  指示与  <code>using</code>  声明的区别。</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li>一条 <code>using</code>  声明语句一次只引入命名空间的一个成员。</li>\n<li><code>using</code>  指示使得某个特定的命名空间中所有的名字都可见。</li>\n</ul>\n<p>有点像 python 中的 <code>import</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> lib <span class=\"token keyword\">import</span> func</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> lib <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr></table></figure><h3 id=\"exercise-1816\"><a class=\"anchor\" href=\"#exercise-1816\">#</a> Exercise 18.16</h3>\n<blockquote>\n<p>假定在下面的代码中标记为 “位置 1” 的地方是对命名空间 Exercise 中所有成员的 <code>using</code>  声明，请解释代码的含义。如果这些 <code>using</code>  声明出现在 “位置 2” 又会怎样呢？将 <code>using</code>  声明变为 <code>using</code>  指示，重新回答之前的问题。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> Exercise <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> ivar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">double</span> dvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> ivar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 位置 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 位置 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">double</span> dvar <span class=\"token operator\">=</span> <span class=\"token number\">3.1416</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> iobj <span class=\"token operator\">=</span> limit <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">++</span>ivar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token operator\">++</span><span class=\"token double-colon punctuation\">::</span>ivar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1817\"><a class=\"anchor\" href=\"#exercise-1817\">#</a> Exercise 18.17</h3>\n<blockquote>\n<p>实际编写代码检验你对上一题的回答是否正确。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1818\"><a class=\"anchor\" href=\"#exercise-1818\">#</a> Exercise 18.18</h3>\n<blockquote>\n<p>已知有下面的  <code>swap</code>  的典型定义，当  <code>mem1</code>  是一个  <code>string</code>  时程序使用  <code>swap</code>  的哪个版本？如果  <code>mem1</code>  是  <code>int</code>  呢？说明在这两种情况下名字查找的过程。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>T v1<span class=\"token punctuation\">,</span> T v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>mem1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span>mem1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 交换类型的其他成员</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p><code>std::swap</code>  是一个模板函数，如果是 <code>string</code>  会找到 <code>string</code>  版本；反之如果是 <code>int</code>  会找到 <code>int</code>  版本。</p>\n<h3 id=\"exercise-1819\"><a class=\"anchor\" href=\"#exercise-1819\">#</a> Exercise 18.19</h3>\n<blockquote>\n<p>如果对  <code>swap</code>  的调用形如  <code>std::swap(v1.mem1, v2.mem1)</code>  将会发生什么情况？</p>\n</blockquote>\n<p>解：</p>\n<p>会直接调用 <code>std</code>  版的 <code>swap</code> ，但对后面的调用无影响。</p>\n<h3 id=\"exercise-1820\"><a class=\"anchor\" href=\"#exercise-1820\">#</a> Exercise 18.20</h3>\n<blockquote>\n<p>在下面的代码中，确定哪个函数与 <code>compute</code>  调用匹配。列出所有候选函数和可行函数，对于每个可行函数的实参与形参的匹配过程来说，发生了哪种类型转换？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> primerLib <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> primerLib<span class=\"token double-colon punctuation\">::</span>compute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>略</p>\n<h2 id=\"multiple-and-virtual-inheritance\"><a class=\"anchor\" href=\"#multiple-and-virtual-inheritance\">#</a> Multiple and Virtual Inheritance</h2>\n<hr />\n<h3 id=\"多重继承与虚继承\"><a class=\"anchor\" href=\"#多重继承与虚继承\">#</a> 多重继承与虚继承</h3>\n<h4 id=\"多重继承\"><a class=\"anchor\" href=\"#多重继承\">#</a> 多重继承</h4>\n<h4 id=\"类型转换与多个基类\"><a class=\"anchor\" href=\"#类型转换与多个基类\">#</a> 类型转换与多个基类</h4>\n<h4 id=\"多重继承下的类作用域\"><a class=\"anchor\" href=\"#多重继承下的类作用域\">#</a> 多重继承下的类作用域</h4>\n<ul>\n<li>当一个类拥有多个基类时，有可能出现派生类从两个或更多基类中继承了同名成员的情况。此时，不加前缀限定符直接使用该名字将引发二义性。</li>\n</ul>\n<h4 id=\"虚继承\"><a class=\"anchor\" href=\"#虚继承\">#</a> 虚继承</h4>\n<ul>\n<li>虚继承的目的是令某个类做出声明，承诺愿意共享它的基类。其中，共享的基类子对象成为<strong>虚基类</strong>。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含唯一一个共享的虚基类子对象。</li>\n<li>虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身。</li>\n</ul>\n<h4 id=\"构造函数与虚继承\"><a class=\"anchor\" href=\"#构造函数与虚继承\">#</a> 构造函数与虚继承</h4>\n<ul>\n<li>h 含有虚基类的对象的构造顺序与一般的顺序稍有<strong>区别</strong>：首先使用提供给最底层派生类构造函数的初始值初始化该对象的虚基类子部分，接下来按照直接基类在派生列表中出现的次序对其进行初始化。</li>\n<li>虚基类总是先于非虚基类构造，与它们在继承体系中的次序和位置无关。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1821\"><a class=\"anchor\" href=\"#exercise-1821\">#</a> Exercise 18.21</h3>\n<blockquote>\n<p>解释下列声明的含义，在它们当作存在错误吗？如果有，请指出来并说明错误的原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CADVehicle</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CAD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vehicle</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbiList</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">iostream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">istream</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">ostream</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1822\"><a class=\"anchor\" href=\"#exercise-1822\">#</a> Exercise 18.22</h3>\n<blockquote>\n<p>已知存在如下所示的类的继承体系，其中每个类都定义了一个默认构造函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Z</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Y</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MI</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Z</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于下面的定义来说，构造函数的执行顺序是怎样的？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MI mi<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1823\"><a class=\"anchor\" href=\"#exercise-1823\">#</a> Exercise 18.23</h3>\n<blockquote>\n<p>使用练习 18.22 的继承体系以及下面定义的类  <code>D</code> ，同时假定每个类都定义了默认构造函数，请问下面的哪些类型转换是不被允许的？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">*</span>pd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> X <span class=\"token operator\">*</span>px <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> A <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> B <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> C <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1824\"><a class=\"anchor\" href=\"#exercise-1824\">#</a> Exercise 18.24</h3>\n<blockquote>\n<p>在第 714 页，我们使用一个指向  <code>Panda</code>  对象的  <code>Bear</code>  指针进行了一系列调用，假设我们使用的是一个指向  <code>Panda</code>  对象的  <code>ZooAnimal</code>  指针将会发生什么情况，请对这些调用语句逐一进行说明。</p>\n</blockquote>\n<h3 id=\"exercise-1825\"><a class=\"anchor\" href=\"#exercise-1825\">#</a> Exercise 18.25</h3>\n<blockquote>\n<p>假设我们有两个基类  <code>Base1</code>  和  <code>Base2</code>  ，它们各自定义了一个名为  <code>print</code>  的虚成员和一个虚析构函数。从这两个基类中文名派生出下面的类，它们都重新定义了  <code>print</code>  函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D1</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MI</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">D1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">D2</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过下面的指针，指出在每个调用中分别使用了哪个函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Base1 <span class=\"token operator\">*</span>pb1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Base2 <span class=\"token operator\">*</span>pb2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>D1 <span class=\"token operator\">*</span>pd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>D2 <span class=\"token operator\">*</span>pd2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> pb1<span class=\"token operator\">-></span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> pd1<span class=\"token operator\">-></span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> pd2<span class=\"token operator\">-></span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> pb2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> pd1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> pd2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> cval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">double</span> fval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string sval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MI</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Derived</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> dvec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1826\"><a class=\"anchor\" href=\"#exercise-1826\">#</a> Exercise 18.26</h3>\n<blockquote>\n<p>已知如上所示的继承体系，下面对 <code>print</code>  的调用为什么是错误的？适当修改 <code>MI</code> ，令其对 <code>print</code>  的调用可以编译通过并正确执行。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MI mi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mi<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1827\"><a class=\"anchor\" href=\"#exercise-1827\">#</a> Exercise 18.27</h3>\n<blockquote>\n<p>已知如上所示的继承体系，同时假定为 MI 添加了一个名为 <code>foo</code>  的函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MI</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> cval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 练习中的问题发生在此处</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> 列出在MI<span class=\"token double-colon punctuation\">::</span>foo中可见的所有名字。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> 是否存在某个可见的名字是继承自多个基类的？</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 将Base1的dval成员与Derived 的dval 成员求和后赋给dval的局部实例。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> 将MI<span class=\"token double-colon punctuation\">::</span>dvec的最后一个元素的值赋给Base2<span class=\"token double-colon punctuation\">::</span>fval。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> 将从Base1继承的cval赋给从Derived继承的sval的第一个字符。</pre></td></tr></table></figure><h3 id=\"exercise-1828\"><a class=\"anchor\" href=\"#exercise-1828\">#</a> Exercise 18.28</h3>\n<blockquote>\n<p>已知存在如下的继承体系，在  <code>VMI</code>  类的内部哪些继承而来的成员无须前缀限定符就能直接访问？哪些必须有限定符才能访问？说明你的原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived1</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">char</span> cval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">char</span> cval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VMI</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Derived1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Derived2</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1829\"><a class=\"anchor\" href=\"#exercise-1829\">#</a> Exercise 18.29</h3>\n<blockquote>\n<p>已知有如下所示的类继承关系：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D1</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MI</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">D1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">D2</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Final</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MI</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> 当作用于一个Final对象时，构造函数和析构函数的执行次序分别是什么？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> 在一个Final对象中有几个Base部分？几个Class部分？</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 下面的哪些赋值运算符将造成编译错误？</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Base <span class=\"token operator\">*</span>pb<span class=\"token punctuation\">;</span> Class <span class=\"token operator\">*</span>pc<span class=\"token punctuation\">;</span> MI <span class=\"token operator\">*</span>pmi<span class=\"token punctuation\">;</span> D2 <span class=\"token operator\">*</span>pd2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Final<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> pmi <span class=\"token operator\">=</span> pb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> pd2 <span class=\"token operator\">=</span> pmi<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1830\"><a class=\"anchor\" href=\"#exercise-1830\">#</a> Exercise 18.30</h3>\n<blockquote>\n<p>在 <code>Base</code>  中定义一个默认构造函数、一个拷贝构造函数和一个接受 <code>int</code>  形参的构造函数。在每个派生类中分别定义这三种构造函数，每个构造函数应该使用它的形参初始化其 <code>Base</code>  部分。</p>\n</blockquote>\n<h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/09/cpp/cpp-primer/Chapter%2017%20Specialized%20Library%20Facilities/",
            "url": "http://sakupinera.github.io/2023/01/09/cpp/cpp-primer/Chapter%2017%20Specialized%20Library%20Facilities/",
            "title": "C++ Primer - Chapter 17 Specialized Library Facilities",
            "date_published": "2023-01-08T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-17-specialized-library-facilities\"><a class=\"anchor\" href=\"#chapter-17-specialized-library-facilities\">#</a> Chapter 17 Specialized Library Facilities</h1>\n<h2 id=\"the-tuple-type\"><a class=\"anchor\" href=\"#the-tuple-type\">#</a> The tuple Type</h2>\n<hr />\n<h3 id=\"tuple类型\"><a class=\"anchor\" href=\"#tuple类型\">#</a> tuple 类型</h3>\n<ul>\n<li><code>tuple</code>  是类似 <code>pair</code>  的模板，每个成员类型都可以不同，但 <code>tuple</code>  可以有任意数量的成员。</li>\n<li>但每个确定的 <code>tuple</code>  类型的成员数目是固定的。</li>\n<li>我们可以将 <code>tuple</code>  看做一个 “快速而随意” 的数据结构。</li>\n</ul>\n<p><strong>tuple 支持的操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tuple&lt;T1, T2, ..., Tn&gt; t;</code></td>\n<td><code>t</code>  是一个 <code>tuple</code> ，成员数为 <code>n</code> ，第 <code>i</code>  个成员的类型是 <code>Ti</code>  所有成员都进行值初始化。</td>\n</tr>\n<tr>\n<td><code>tuple&lt;T1, T2, ..., Tn&gt; t(v1, v2, ..., vn);</code></td>\n<td>每个成员用对应的初始值 <code>vi</code>  进行初始化。此构造函数是 <code>explicit</code>  的。</td>\n</tr>\n<tr>\n<td><code>make_tuple(v1, v2, ..., vn)</code></td>\n<td>返回一个用给定初始值初始化的 <code>tuple</code> 。 <code>tuple</code>  的类型从初始值的类型<strong>推断</strong>。</td>\n</tr>\n<tr>\n<td><code>t1 == t2</code></td>\n<td>当两个 <code>tuple</code>  具有相同数量的成员且成员对应相等时，两个 <code>tuple</code>  相等。</td>\n</tr>\n<tr>\n<td><code>t1 relop t2</code></td>\n<td><code>tuple</code>  的关系运算使用<strong>字典序</strong>。两个 <code>tuple</code>  必须具有相同数量的成员。</td>\n</tr>\n<tr>\n<td><code>get&lt;i&gt;(t)</code></td>\n<td>返回 <code>t</code>  的第 <code>i</code>  个数据成员的引用：如果 <code>t</code>  是一个左值，结果是一个左值引用；否则，结果是一个右值引用。 <code>tuple</code>  的所有成员都是 <code>public</code>  的。</td>\n</tr>\n<tr>\n<td><code>tuple_size&lt;tupleType&gt;::value</code></td>\n<td>一个类模板，可以通过一个 <code>tuple</code>  类型来初始化。它有一个名为 <code>value</code>  的 <code>public constexpr static</code>  数据成员，类型为 <code>size_t</code> ，表示给定 <code>tuple</code>  类型中成员的数量。</td>\n</tr>\n<tr>\n<td><code>tuple_element&lt;i, tupleType&gt;::type</code></td>\n<td>一个类模板，可以通过一个整型常量和一个 <code>tuple</code>  类型来初始化。它有一个名为 <code>type</code>  的 <code>public</code>  成员，表示给定 <code>tuple</code>  类型中指定成员的类型。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"定义和初始化tuple\"><a class=\"anchor\" href=\"#定义和初始化tuple\">#</a> 定义和初始化 tuple</h4>\n<p>定义和初始化示例：</p>\n<ul>\n<li><code>tuple&lt;size_t, size_t, size_t&gt; threeD;</code></li>\n<li><code>tuple&lt;size_t, size_t, size_t&gt; threeD&#123;1,2,3&#125;;</code></li>\n<li><code>auto item = make_tuple(&quot;0-999-78345-X&quot;, 3, 2.00)；</code></li>\n</ul>\n<p>访问 tuple 成员：</p>\n<ul>\n<li><code>auto book = get&lt;0&gt;(item);</code></li>\n<li><code>get&lt;2&gt;(item) *= 0.8;</code></li>\n</ul>\n<h4 id=\"使用tuple返回多个值\"><a class=\"anchor\" href=\"#使用tuple返回多个值\">#</a> 使用 tuple 返回多个值</h4>\n<ul>\n<li><code>tuple</code>  最常见的用途是从一个函数返回多个值。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-171\"><a class=\"anchor\" href=\"#exercise-171\">#</a> Exercise 17.1</h3>\n<blockquote>\n<p>定义一个保存三个 <code>int</code>  值的  <code>tuple</code> ，并将其成员分别初始化为 10、20 和 30。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> t <span class=\"token operator\">=</span> tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-172\"><a class=\"anchor\" href=\"#exercise-172\">#</a> Exercise 17.2</h3>\n<blockquote>\n<p>定义一个  <code>tuple</code> ，保存一个  <code>string</code> 、一个 <code>vector&lt;string&gt;</code>  和一个  <code>pair&lt;string, int&gt;</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> t <span class=\"token operator\">=</span> tuple<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"exercise-173\"><a class=\"anchor\" href=\"#exercise-173\">#</a> Exercise 17.3</h3>\n<blockquote>\n<p>重写 12.3 节中的  <code>TextQuery</code>  程序，使用  <code>tuple</code>  代替  <code>QueryResult</code>  类。你认为哪种设计更好？为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>程序略。</p>\n<p>我认为 <code>tuple</code>  更方便。</p>\n<h3 id=\"exercise-174\"><a class=\"anchor\" href=\"#exercise-174\">#</a> Exercise 17.4</h3>\n<blockquote>\n<p>编写并测试你自己版本的  <code>findBook</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_17_4_SalesData.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//matches 有三个成员：1. 一个书店的索引。2. 指向书店中元素的迭代器。3. 指向书店中元素的迭代器。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> tuple<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    matches<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//files 保存每家书店的销售记录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//findBook 返回一个 vector，每家销售了给定书籍的书店在其中都有一项</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>matches<span class=\"token operator\">></span> <span class=\"token function\">findBook</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>files<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                         <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>matches<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为空 vector</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 对每家书店，查找给定书籍匹配的记录范围</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>cbegin<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 查找具有相同 ISBN 的 Sales_data 范围，found 是一个迭代器 pair</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">auto</span> found <span class=\"token operator\">=</span> <span class=\"token function\">equal_range</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token operator\">-></span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">,</span> compareIsbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span>first <span class=\"token operator\">!=</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 此书店销售了给定书籍</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 记住此书店的索引及匹配的范围</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">-</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果未找到匹配记录，ret 为空</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reportResults</span><span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">,</span> ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                       <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    string s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要查找的书</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>in <span class=\"token operator\">>></span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">auto</span> trans <span class=\"token operator\">=</span> <span class=\"token function\">findBook</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trans<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" not found in any stores\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获得下一本要查找的书</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>store <span class=\"token operator\">:</span> trans<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 对每家销售了给定书籍的书店</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">//get&lt;n > 返回 store 中 tuple 的指定的成员</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            os <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"store \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" sales: \"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-175\"><a class=\"anchor\" href=\"#exercise-175\">#</a> Exercise 17.5</h3>\n<blockquote>\n<p>重写  <code>findBook</code> ，令其返回一个  <code>pair</code> ，包含一个索引和一个迭代器 pair。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator<span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                                                      matches_pair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>matches_pair<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">findBook_pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>files<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>matches_pair<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">auto</span> found <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">equal_range</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token operator\">-></span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">,</span> compareIsbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span>first <span class=\"token operator\">!=</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">-</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                         std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-176\"><a class=\"anchor\" href=\"#exercise-176\">#</a> Exercise 17.6</h3>\n<blockquote>\n<p>重写  <code>findBook</code> ，不使用 <code>tuple</code>  和 <code>pair</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">matches_struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">matches_struct</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type s<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                   std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator f<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                   std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator l<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">st</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>matches_struct<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">findBook_struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>files<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>matches_struct<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">auto</span> found <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">equal_range</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token operator\">-></span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">,</span> compareIsbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span>first <span class=\"token operator\">!=</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">matches_struct</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">-</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-177\"><a class=\"anchor\" href=\"#exercise-177\">#</a> Exercise 17.7</h3>\n<blockquote>\n<p>解释你更倾向于哪个版本的 <code>findBook</code> ，为什么。</p>\n</blockquote>\n<p>解：</p>\n<p>使用 <code>tuple</code>  的版本。很明显更加灵活方便。</p>\n<h3 id=\"exercise-178\"><a class=\"anchor\" href=\"#exercise-178\">#</a> Exercise 17.8</h3>\n<blockquote>\n<p>在本节最后一段代码中，如果我们将 <code>Sales_data()</code>  作为第三个参数传递给 <code>accumulate</code> ，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>结果是 0，以为 <code>Sales_data</code>  是默认初始化的。</p>\n<h2 id=\"the-bitset-type\"><a class=\"anchor\" href=\"#the-bitset-type\">#</a> The bitset Type</h2>\n<hr />\n<h3 id=\"bitset类型\"><a class=\"anchor\" href=\"#bitset类型\">#</a> bitset 类型</h3>\n<ul>\n<li>处理二进制位的有序集；</li>\n<li><code>bitset</code>  也是类模板，但尖括号中输入的是 <code>bitset</code>  的长度而不是元素类型，因为元素类型是固定的，都是一个二进制位。</li>\n</ul>\n<p>初始化 <code>bitset</code>  的方法：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bitset&lt;n&gt; b;</code></td>\n<td><code>b</code>  有 <code>n</code>  位；每一位均是 0. 此构造函数是一个 <code>constexpr</code> 。</td>\n</tr>\n<tr>\n<td><code>bitset&lt;n&gt; b(u);</code></td>\n<td><code>b</code>  是 <code>unsigned long long</code>  值 <code>u</code>  的低 <code>n</code>  位的拷贝。如果 <code>n</code>  大于 <code>unsigned long long</code>  的大小，则 <code>b</code>  中超出 <code>unsigned long long</code>  的高位被置为 0。此构造函数是一个 <code>constexpr</code> 。</td>\n</tr>\n<tr>\n<td><code>bitset&lt;n&gt; b(s, pos, m, zero, one);</code></td>\n<td><code>b</code>  是 <code>string s</code>  从位置 <code>pos</code>  开始 <code>m</code>  个字符的拷贝。 <code>s</code>  只能包含字符 <code>zero</code>  或 <code>one</code> ：如果 <code>s</code>  包含任何其他字符，构造函数会抛出 <code>invalid_argument</code>  异常。字符在 <code>b</code>  中分别保存为 <code>zero</code>  和 <code>one</code> 。 <code>pos</code>  默认为 0， <code>m</code>  默认为 <code>string::npos</code> ， <code>zero</code>  默认为 '0'， <code>one</code>  默认为 '1'。</td>\n</tr>\n<tr>\n<td><code>bitset&lt;n&gt; b(cp, pos, m, zero, one);</code></td>\n<td>和上一个构造函数相同，但从 <code>cp</code>  指向的字符数组中拷贝字符。如果未提供 <code>m</code> ，则 <code>cp</code>  必须指向一个 <code>C</code>  风格字符串。如果提供了 <code>m</code> ，则从 <code>cp</code>  开始必须至少有 <code>m</code>  个 <code>zero</code>  或 <code>one</code>  字符。</td>\n</tr>\n</tbody>\n</table>\n<p>初始化案例；</p>\n<ul>\n<li><code>bitset&lt;13&gt; bitvec1(0xbeef);</code></li>\n<li><code>bitset&lt;32&gt; bitvec4(&quot;1100&quot;);</code></li>\n</ul>\n<p><code>bitset</code>  操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>b.any()</code></td>\n<td><code>b</code>  中是否存在 1。</td>\n</tr>\n<tr>\n<td><code>b.all()</code></td>\n<td><code>b</code>  中都是 1。</td>\n</tr>\n<tr>\n<td><code>b.none()</code></td>\n<td><code>b</code>  中是否没有 1。</td>\n</tr>\n<tr>\n<td><code>b.count()</code></td>\n<td><code>b</code>  中 1 的个数。</td>\n</tr>\n<tr>\n<td><code>b.size()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>b.test(pos)</code></td>\n<td><code>pos</code>  下标是否是 1</td>\n</tr>\n<tr>\n<td><code>b.set(pos)</code></td>\n<td><code>pos</code>  置 1</td>\n</tr>\n<tr>\n<td><code>b.set()</code></td>\n<td>所有都置 1</td>\n</tr>\n<tr>\n<td><code>b.reset(pos)</code></td>\n<td>将位置 <code>pos</code>  处的位复位</td>\n</tr>\n<tr>\n<td><code>b.reset()</code></td>\n<td>将 <code>b</code>  中所有位复位</td>\n</tr>\n<tr>\n<td><code>b.flip(pos)</code></td>\n<td>将位置 <code>pos</code>  处的位取反</td>\n</tr>\n<tr>\n<td><code>b.flip()</code></td>\n<td>将 <code>b</code>  中所有位取反</td>\n</tr>\n<tr>\n<td><code>b[pos]</code></td>\n<td>访问 <code>b</code>  中位置 <code>pos</code>  处的位；如果 <code>b</code>  是 <code>const</code>  的，则当该位置位时，返回 <code>true</code> ；否则返回 <code>false</code> 。</td>\n</tr>\n<tr>\n<td><code>b.to_ulong()</code></td>\n<td>返回一个 <code>unsigned long</code>  值，其位模式和 <code>b</code>  相同。如果 <code>b</code>  中位模式不能放入指定的结果类型，则抛出一个 <code>overflow_error</code>  异常。</td>\n</tr>\n<tr>\n<td><code>b.to_ullong()</code></td>\n<td>类似上面，返回一个 <code>unsigned long long</code>  值。</td>\n</tr>\n<tr>\n<td><code>b.to_string(zero, one)</code></td>\n<td>返回一个 <code>string</code> ，表示 <code>b</code>  中位模式。 <code>zero</code>  和 <code>one</code>  默认为 0 和 1。</td>\n</tr>\n<tr>\n<td><code>os &lt;&lt; b</code></td>\n<td>将 <code>b</code>  中二进制位打印为字符 <code>1</code>  或 <code>0</code> ，打印到流 <code>os</code> 。</td>\n</tr>\n<tr>\n<td><code>is &gt;&gt; b</code></td>\n<td>从 <code>is</code>  读取字符存入 <code>b</code> 。当下一个字符不是 1 或 0 时，或是已经读入 <code>b.size()</code>  个位时，读取过程停止。</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-179\"><a class=\"anchor\" href=\"#exercise-179\">#</a> Exercise 17.9</h3>\n<blockquote>\n<p>解释下列每个 <code>bitset</code>  对象所包含的位模式：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">64</span><span class=\"token operator\">></span> <span class=\"token function\">bitvec</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 0000000000000000000000000000000000000000000000000000000000100000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span><span class=\"token operator\">></span> <span class=\"token function\">bv</span><span class=\"token punctuation\">(</span><span class=\"token number\">1010101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 00000000000011110110100110110101</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> string bstr<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> bstr<span class=\"token punctuation\">;</span> bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">></span> <span class=\"token function\">bv</span><span class=\"token punctuation\">(</span>bstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 根据输入的 str 转换成 bitset</span></pre></td></tr></table></figure><h3 id=\"exercise-1710\"><a class=\"anchor\" href=\"#exercise-1710\">#</a> Exercise 17.10</h3>\n<blockquote>\n<p>使用序列 1、2、3、5、8、13、21 初始化一个 <code>bitset</code> ，将这些位置置位。对另一个 <code>bitset</code>  进行默认初始化，并编写一小段程序将其恰当的位置位。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bitset></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span><span class=\"token operator\">></span> bset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>    bset<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span><span class=\"token operator\">></span> bset2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bset2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span>bset <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span>bset2<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1711\"><a class=\"anchor\" href=\"#exercise-1711\">#</a> Exercise 17.11</h3>\n<blockquote>\n<p>定义一个数据结构，包含一个整型对象，记录一个包含 10 个问题的真 / 假测验的解答。如果测验包含 100 道题，你需要对数据结构做出什么改变（如果需要的话）？</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bitset></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//class Quiz</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t N<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Quiz</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//constructors</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Quiz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Quiz</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">bitquiz</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//generate grade</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t M<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//print</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t M<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//update bitset</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>bitset<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> bitquiz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t N<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Quiz</span><span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> pair<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    bitquiz<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t M<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> quiz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    os <span class=\"token operator\">&lt;&lt;</span> quiz<span class=\"token punctuation\">.</span>bitquiz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t M<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> corAns<span class=\"token punctuation\">,</span> Quiz<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> stuAns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">auto</span> result <span class=\"token operator\">=</span> stuAns<span class=\"token punctuation\">.</span>bitquiz <span class=\"token operator\">^</span> corAns<span class=\"token punctuation\">.</span>bitquiz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">//Ex17_11</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1010101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Quiz<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token function\">quiz</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> quiz <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//EX17_12</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    quiz<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> quiz <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">//Ex17_13</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string answer <span class=\"token operator\">=</span> <span class=\"token string\">\"10011\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string stu_answer <span class=\"token operator\">=</span> <span class=\"token string\">\"11001\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    Quiz<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token operator\">></span> <span class=\"token function\">ans</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stu_ans</span><span class=\"token punctuation\">(</span>stu_answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> stu_ans<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1712\"><a class=\"anchor\" href=\"#exercise-1712\">#</a> Exercise 17.12</h3>\n<blockquote>\n<p>使用前一题中的数据结构，编写一个函数，它接受一个问题编号和一个表示真 / 假解答的值，函数根据这两个参数更新测验的解答。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.11。</p>\n<h3 id=\"exercise-1713\"><a class=\"anchor\" href=\"#exercise-1713\">#</a> Exercise 17.13</h3>\n<blockquote>\n<p>编写一个整型对象，包含真 / 假测验的正确答案。使用它来为前两题中的数据结构生成测验成绩。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.11。</p>\n<h2 id=\"regular-expressions\"><a class=\"anchor\" href=\"#regular-expressions\">#</a> Regular Expressions</h2>\n<hr />\n<h3 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<ul>\n<li>正则表达式（reqular expression）是一种描述字符序列的方法，是一种很强大的工具。</li>\n</ul>\n<p>正则表达式库组件：</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>regex</code></td>\n<td>表示一个正则表达式的类</td>\n</tr>\n<tr>\n<td><code>regex_match</code></td>\n<td>将一个字符序列与一个正则表达式匹配</td>\n</tr>\n<tr>\n<td><code>regex_search</code></td>\n<td>寻找第一个与正则表达式匹配的子序列</td>\n</tr>\n<tr>\n<td><code>regex_replace</code></td>\n<td>使用给定格式替换一个正则表达式</td>\n</tr>\n<tr>\n<td><code>sregex_iterator</code></td>\n<td>迭代器适配器，调用 <code>regex_searcg</code>  来遍历一个 <code>string</code>  中所有匹配的子串</td>\n</tr>\n<tr>\n<td><code>smatch</code></td>\n<td>容器类，保存在 <code>string</code>  中搜索的结果</td>\n</tr>\n<tr>\n<td><code>ssub_match</code></td>\n<td><code>string</code>  中匹配的子表达式的结果</td>\n</tr>\n</tbody>\n</table>\n<p><code>regex_match</code>  和 <code>regex_search</code>  的参数：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(seq, m, r, mft)</code></td>\n<td>在字符序列 <code>seq</code>  中查找 <code>regex</code>  对象 <code>r</code>  中的正则表达式。 <code>seq</code>  可以是一个 <code>string</code> 、标识范围的一对迭代器、一个指向空字符结尾的字符数组的指针。</td>\n</tr>\n<tr>\n<td><code>(seq, r, mft)</code></td>\n<td><code>m</code>  是一个 <code>match</code>  对象，用来保存匹配结果的相关细节。 <code>m</code>  和 <code>seq</code>  必须具有兼容的类型。 <code>mft</code>  是一个可选的 <code>regex_constants::match_flag_type</code>  值。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>这些操作会返回 <code>bool</code>  值，指出是否找到匹配。</li>\n</ul>\n<h4 id=\"使用正则表达式库\"><a class=\"anchor\" href=\"#使用正则表达式库\">#</a> 使用正则表达式库</h4>\n<ul>\n<li><code>regex</code>  使用的正则表达式语言是 <code>ECMAScript</code> ，模式 <code>[[::alpha::]]</code>  匹配任意字母。</li>\n<li>由于反斜线是 C<ins> 中的特殊字符，在模式中每次出现 <code>\\</code>  的地方，必须用一个额外的反斜线 <code>\\\\</code>  告知 C</ins> 我们需要一个反斜线字符。</li>\n<li>简单案例：\n<ul>\n<li><code>string pattern(&quot;[^c]ei&quot;); pattern = &quot;[[:alpha:]]*&quot; + pattern + &quot;[[:alpha:]]*&quot;</code>  查找不在字符 c 之后的字符串 ei</li>\n<li><code>regex r(pattern);</code>  构造一个用于查找模式的 regex</li>\n<li><code>smatch results;</code>  定义一个对象保存搜索结果</li>\n<li><code>string test_str = &quot;receipt freind theif receive&quot;;</code></li>\n<li><code>if (regex_search(test_str, results, r)) cout &lt;&lt; results.str() &lt;&lt; endl;</code>  如有匹配子串，打印匹配的单词。</li>\n</ul>\n</li>\n</ul>\n<p><code>regex</code> （和 <code>wregex</code> ）选项：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>regex r(re)</code>   <code>regex r(re, f)</code></td>\n<td><code>re</code>  表示一个正则表达式，它可以是一个 <code>string</code> 、一对表示字符范围的迭代器、一个指向空字符结尾的字符数组的指针、一个字符指针和一个计数器、一个花括号包围的字符列表。 <code>f</code>  是指出对象如何处理的标志。 <code>f</code>  通过下面列出来的值来设置。如果未指定 <code>f</code> ，其默认值为 <code>ECMAScript</code> 。</td>\n</tr>\n<tr>\n<td><code>r1 = re</code></td>\n<td>将 <code>r1</code>  中的正则表达式替换 Wie <code>re</code> 。 <code>re</code>  表示一个正则表达式，它可以是另一个 <code>regex</code>  对象、一个 <code>string</code> 、一个指向空字符结尾的字符数组的指针或是一个花括号包围的字符列表。</td>\n</tr>\n<tr>\n<td><code>r1.assign(re, f)</code></td>\n<td>和使用赋值运算符（=）的效果相同：可选的标志 <code>f</code>  也和 <code>regex</code>  的构造函数中对应的参数含义相同。</td>\n</tr>\n<tr>\n<td><code>r.mark_count()</code></td>\n<td><code>r</code>  中子表达式的数目</td>\n</tr>\n<tr>\n<td><code>r.flags()</code></td>\n<td>返回 <code>r</code>  的标志集</td>\n</tr>\n</tbody>\n</table>\n<p>定义 <code>regex</code>  时指定的标志：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>icase</code></td>\n<td>在匹配过程中忽略大小写</td>\n</tr>\n<tr>\n<td><code>nosubs</code></td>\n<td>不保存匹配的子表达式</td>\n</tr>\n<tr>\n<td><code>optimize</code></td>\n<td>执行速度优先于构造速度</td>\n</tr>\n<tr>\n<td><code>ECMAScript</code></td>\n<td>使用 <code>ECMA-262</code>  指定的语法</td>\n</tr>\n<tr>\n<td><code>basic</code></td>\n<td>使用 <code>POSIX</code>  基本的正则表达式语法</td>\n</tr>\n<tr>\n<td><code>extended</code></td>\n<td>使用 <code>POSIX</code>  扩展的正则表达式语法</td>\n</tr>\n<tr>\n<td><code>awk</code></td>\n<td>使用 <code>POSIX</code>  版本的 <code>awk</code>  语言的语法</td>\n</tr>\n<tr>\n<td><code>grep</code></td>\n<td>使用 <code>POSIX</code>  版本的 <code>grep</code>  的语法</td>\n</tr>\n<tr>\n<td><code>egrep</code></td>\n<td>使用 <code>POSIX</code>  版本的 <code>egrep</code>  的语法</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以将正则表达式本身看做是一种简单程序语言设计的程序。在运行时，当一个 <code>regex</code>  对象被初始化或被赋予新模式时，才被 “编译”。</li>\n<li>如果编写的正则表达式存在错误，会在运行时抛出一个 <code>regex_error</code>  的异常。</li>\n<li>避免创建不必要的正则表达式。构建一个 <code>regex</code>  对象可能比较耗时。</li>\n</ul>\n<h4 id=\"匹配与regex迭代器类型\"><a class=\"anchor\" href=\"#匹配与regex迭代器类型\">#</a> 匹配与 regex 迭代器类型</h4>\n<p><code>sregex_iterator</code>  操作（用来获得所有匹配）：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sregex_iterator it(b, e, r);</code></td>\n<td>一个 <code>sregex_iterator</code> ，遍历迭代器 <code>b</code>  和 <code>e</code>  表示的 <code>string</code> 。它调用 <code>sregex_search(b, e, r)</code>  将 <code>it</code>  定位到输入中第一个匹配的位置。</td>\n</tr>\n<tr>\n<td><code>sregex_iterator end;</code></td>\n<td><code>sregex_iterator</code>  的尾后迭代器</td>\n</tr>\n<tr>\n<td><code>*it</code> ，  <code>it-&gt;</code></td>\n<td>根据最后一个调用 <code>regex_search</code>  的结果，返回一个 <code>smatch</code>  对象的引用或一个指向 <code>smatch</code>  对象的指针。</td>\n</tr>\n<tr>\n<td><code>++it</code>  ，  <code>it++</code></td>\n<td>从输入序列当前匹配位置开始调用 <code>regex_search</code> 。前置版本返回递增后迭代器；后置版本返回旧值。</td>\n</tr>\n<tr>\n<td><code>it1 == it2</code></td>\n<td>如果两个 <code>sregex_iterator</code>  都是尾后迭代器，则它们相等。两个非尾后迭代器是从相同的输入序列和 <code>regex</code>  对象构造，则它们相等。</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串 file 中所有匹配模式 r 的子串输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>sregex_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end_it<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> end_it<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it <span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>smatch</code>  操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>m.ready()</code></td>\n<td>如果已经通过调用 <code>regex_search</code>  或 <code>regex_match</code>  设置了 <code>m</code> ，则返回 <code>true</code> ；否则返回 <code>false</code> 。如果 <code>ready</code>  返回 <code>false</code> ，则对 <code>m</code>  进行操作是未定义的。</td>\n</tr>\n<tr>\n<td><code>m.size()</code></td>\n<td>如果匹配失败，则返回 0，；否则返回最近一次匹配的正则表达式中子表达式的数目。</td>\n</tr>\n<tr>\n<td><code>m.empty()</code></td>\n<td>等价于 <code>m.size() == 0</code></td>\n</tr>\n<tr>\n<td><code>m.prefix()</code></td>\n<td>一个 <code>ssub_match</code>  对象，标识当前匹配之前的序列</td>\n</tr>\n<tr>\n<td><code>m.suffix()</code></td>\n<td>一个 <code>ssub_match</code>  对象，标识当前匹配之后的部分</td>\n</tr>\n<tr>\n<td><code>m.format(...)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>m.length(n)</code></td>\n<td>第 <code>n</code>  个匹配的子表达式的大小</td>\n</tr>\n<tr>\n<td><code>m.position(n)</code></td>\n<td>第 <code>n</code>  个子表达式距离序列开始的长度</td>\n</tr>\n<tr>\n<td><code>m.str(n)</code></td>\n<td>第 <code>n</code>  个子表达式匹配的 <code>string</code></td>\n</tr>\n<tr>\n<td><code>m[n]</code></td>\n<td>对应第 <code>n</code>  个子表达式的 <code>ssub_match</code>  对象</td>\n</tr>\n<tr>\n<td><code>m.begin(), m.end()</code></td>\n<td>表示 <code>m</code>  中 <code>ssub_match</code>  元素范围的迭代器。</td>\n</tr>\n<tr>\n<td><code>m.cbegin(), m.cend()</code></td>\n<td>常量迭代器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用子表达式\"><a class=\"anchor\" href=\"#使用子表达式\">#</a> 使用子表达式</h4>\n<ul>\n<li>正则表达式语法通常用括号表示子表达式。</li>\n<li>子表达式的索引从 1 开始。</li>\n<li>在 <code>fmt</code>  中用 <code>$</code>  后跟子表达式的索引号来标识一个特定的子表达式。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//.str (1) 获取第一个子表达式匹配结果</span></pre></td></tr></table></figure><p><code>ssub_match</code>  子匹配操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>matched</code></td>\n<td>一个 <code>public bool</code>  数据成员，指出 <code>ssub_match</code>  是否匹配了</td>\n</tr>\n<tr>\n<td><code>first</code> ，  <code>second</code></td>\n<td><code>public</code>  数据成员，指向匹配序列首元素和尾后位置的迭代器。如果未匹配，则 <code>first</code>  和 <code>second</code>  是相等的。</td>\n</tr>\n<tr>\n<td><code>length()</code></td>\n<td>匹配的大小，如果 <code>matched</code>  为 <code>false</code> ，则返回 0。</td>\n</tr>\n<tr>\n<td><code>str()</code></td>\n<td>返回一个包含输入中匹配部分的 <code>string</code> 。如果 <code>matched</code>  为 <code>false</code> ，则返回空 <code>string</code> 。</td>\n</tr>\n<tr>\n<td><code>s = ssub</code></td>\n<td>将 <code>ssub_match</code>  对象 <code>ssub</code>  转化为 <code>string</code>  对象 <code>s</code> 。等价于 <code>s=ssub.str()</code> ，转换运算符不是 <code>explicit</code>  的。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用regex_replace\"><a class=\"anchor\" href=\"#使用regex_replace\">#</a> 使用 regex_replace</h4>\n<p>正则表达式替换操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>m.format(dest, fmt, mft)</code> ,  <code>m.format(fmt, mft)</code></td>\n<td>使用格式字符串 <code>fmt</code>  生成格式化输出，匹配在 <code>m</code>  中，可选的 <code>match_flag_type</code>  标志在 <code>mft</code>  中。第一个版本写入迭代器 <code>dest</code>  指向的目的为止，并接受 <code>fmt</code>  参数，可以是一个 <code>string</code> ，也可以是一个指向空字符结尾的字符数组的指针。 <code>mft</code>  的默认值是 <code>format_default</code> 。</td>\n</tr>\n<tr>\n<td><code>rege_replace(dest, seq, r, fmt, mft)</code> ，   <code>regex_replace(seq, r, fmt, mft)</code></td>\n<td>遍历 <code>seq</code> ，用 <code>regex_search</code>  查找与 <code>regex</code>  对象 <code>r</code>  相匹配的子串，使用格式字符串 <code>fmt</code>  和可选的 <code>match_flag_type</code>  标志来生成输出。 <code>mft</code>  的默认值是 <code>match_default</code></td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string phone <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\()?(\\\\d&#123;3&#125;)(\\\\))?([-. ])?(\\\\d&#123;3&#125;)([-. ]?)(\\\\d&#123;4&#125;)\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string fmt <span class=\"token operator\">=</span> <span class=\"token string\">\"$2.$5.$7\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将号码格式改为 ddd.ddd.dddd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用来寻找模式的 regex 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string number <span class=\"token operator\">=</span> <span class=\"token string\">\"(908) 555-1800\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>匹配标志：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>match_default</code></td>\n<td>等价于 <code>format_default</code></td>\n</tr>\n<tr>\n<td><code>match_not_bol</code></td>\n<td>不将首字符作为行首处理</td>\n</tr>\n<tr>\n<td><code>match_not_eol</code></td>\n<td>不将尾字符作为行尾处理</td>\n</tr>\n<tr>\n<td><code>match_not_bow</code></td>\n<td>不将首字符作为单词首处理</td>\n</tr>\n<tr>\n<td><code>match_not_eow</code></td>\n<td>不将尾字符作为单词尾处理</td>\n</tr>\n<tr>\n<td><code>match_any</code></td>\n<td>如果存在多于一个匹配，则可以返回任意一个匹配</td>\n</tr>\n<tr>\n<td><code>match_not_null</code></td>\n<td>不匹配任何空序列</td>\n</tr>\n<tr>\n<td><code>match_continuous</code></td>\n<td>匹配必须从输入的首字符开始</td>\n</tr>\n<tr>\n<td><code>match_prev_avail</code></td>\n<td>输入序列包含第一个匹配之前的内容</td>\n</tr>\n<tr>\n<td><code>format_default</code></td>\n<td>用 <code>ECMAScript</code>  规则替换字符串</td>\n</tr>\n<tr>\n<td><code>format_sed</code></td>\n<td>用 <code>POSIX sed</code>  规则替换字符串</td>\n</tr>\n<tr>\n<td><code>format_no_copy</code></td>\n<td>不输出输入序列中未匹配的部分</td>\n</tr>\n<tr>\n<td><code>format_first_only</code></td>\n<td>只替换子表达式的第一次出现</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-1714\"><a class=\"anchor\" href=\"#exercise-1714\">#</a> Exercise 17.14</h3>\n<blockquote>\n<p>编写几个正则表达式，分别触发不同错误。运行你的程序，观察编译器对每个错误的输出。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// for ex17.14</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// error_brack</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[[:alnum:]+\\\\.(cpp|cxx|cc)$\"</span><span class=\"token punctuation\">,</span> regex<span class=\"token double-colon punctuation\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>regex_error e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" code: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// for ex17.15</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[[:alpha:]]*[^c]ei[[:alpha:]]*\"</span><span class=\"token punctuation\">,</span> regex<span class=\"token double-colon punctuation\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a word! Input 'q' to quit!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s <span class=\"token operator\">&amp;&amp;</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">regex_match</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input word \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is okay!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input word \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not okay!\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a word! Input 'q' to quit!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// for ex17.16</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[^c]ei\"</span><span class=\"token punctuation\">,</span> regex<span class=\"token double-colon punctuation\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a word! Input 'q' to quit!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s <span class=\"token operator\">&amp;&amp;</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">regex_match</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input word \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is okay!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input word \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not okay!\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a word! Input 'q' to quit!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1715\"><a class=\"anchor\" href=\"#exercise-1715\">#</a> Exercise 17.15</h3>\n<blockquote>\n<p>编写程序，使用模式查找违反 “i 在 e 之前，除非在 c 之后” 规则的单词。你的程序应该提示用户输入一个单词，然后指出此单词是否符号要求。用一些违反和未违反规则的单词测试你的程序。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.14。</p>\n<h3 id=\"exercise-1716\"><a class=\"anchor\" href=\"#exercise-1716\">#</a> Exercise 17.16</h3>\n<blockquote>\n<p>如果前一题程序中的 <code>regex</code>  对象用 <code>&quot;[^c]ei&quot;</code>  进行初始化，将会发生什么？用此模式测试你的程序，检查你的答案是否正确。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.14。</p>\n<h3 id=\"exercise-1717\"><a class=\"anchor\" href=\"#exercise-1717\">#</a> Exercise 17.17</h3>\n<blockquote>\n<p>更新你的程序，令它查找输入序列中所有违反 &quot;ei&quot; 语法规则的单词。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sregex_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a sequence of words:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Word(s) that violiate the \\\"ei\\\" grammar rule:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstring <span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[^c]ei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tpattern <span class=\"token operator\">=</span> <span class=\"token string\">\"[[:alpha:]]*\"</span> <span class=\"token operator\">+</span> pattern <span class=\"token operator\">+</span> <span class=\"token string\">\"[[:alpha:]]*\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tregex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> regex<span class=\"token double-colon punctuation\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>sregex_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end_it<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> end_it<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1718\"><a class=\"anchor\" href=\"#exercise-1718\">#</a> Exercise 17.18</h3>\n<blockquote>\n<p>修改你的程序，忽略包含 “ei` 但并非拼写错误的单词，如 “albeit” 和 “neighbor”。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.17。</p>\n<h3 id=\"exercise-1719\"><a class=\"anchor\" href=\"#exercise-1719\">#</a> Exercise 17.19</h3>\n<blockquote>\n<p>为什么可以不先检查 <code>m[4]</code>  是否匹配了就直接调用 <code>m[4].str()</code> ？</p>\n</blockquote>\n<p>解：</p>\n<p>如果不匹配，则 <code>m[4].str()</code>  返回空字符串。</p>\n<h3 id=\"exercise-1720\"><a class=\"anchor\" href=\"#exercise-1720\">#</a> Exercise 17.20</h3>\n<blockquote>\n<p>编写你自己版本的验证电话号码的程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sregex_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>smatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstring phone <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\()?(\\\\d&#123; 3 &#125;)(\\\\))?([-. ])?(\\\\d&#123; 3 &#125;)([-. ]?)(\\\\d&#123; 4 &#125;)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tregex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tsmatch m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">bool</span> valid_record<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// read each record from the input file</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tvalid_record <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// for each matching phone number</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>sregex_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end_it<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> end_it<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tvalid_record <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// check whether the number's formatting is valid</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"valid phone number: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"invalid phone number: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid_record<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"invalid record!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// if there is an open parenthesis before the area code</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// the area code must be followed by a close parenthesis</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// and followed immediately by the rest of the number or a space</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">// then there can't be a close after the area code</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// the delimiters between the other two components must match</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1721\"><a class=\"anchor\" href=\"#exercise-1721\">#</a> Exercise 17.21</h3>\n<blockquote>\n<p>使用本节定义的 <code>valid</code>  函数重写 8.3.2 节中的电话号码程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cerr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ifstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ofstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>istringstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ostringstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sregex_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>smatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PersonInfo</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> phones<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">read_record</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>PersonInfo<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">format_record</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>PersonInfo<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// fake function that makes the program compile</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>string <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>PersonInfo<span class=\"token operator\">></span> people<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    string filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input a record file name: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cin <span class=\"token operator\">>></span> filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    ifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read_record</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        ofstream <span class=\"token function\">fout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\\\\result.txt\"</span><span class=\"token punctuation\">,</span> ofstream<span class=\"token double-colon punctuation\">::</span>trunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">format_record</span><span class=\"token punctuation\">(</span>fout<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Fail to open file \"</span> <span class=\"token operator\">&lt;&lt;</span> filename <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// if there is an open parenthesis before the area code</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// the area code must be followed by a close parenthesis</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// and followed immediately by the rest of the number or a space</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// then there can't be a close after the area code</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// the delimiters between the other two components must match</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">read_record</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>PersonInfo<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        string line<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">;</span> <span class=\"token comment\">// will hold a line and word from input, respectively</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                           <span class=\"token comment\">// read the input a line at a time until cin hits end-of-file (or another error)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            PersonInfo info<span class=\"token punctuation\">;</span> <span class=\"token comment\">// create an object to hold this record's data</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            istringstream <span class=\"token function\">record</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind record to the line we just read</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            record <span class=\"token operator\">>></span> info<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// read the name</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>record <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span> <span class=\"token comment\">// read the phone numbers</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                info<span class=\"token punctuation\">.</span>phones<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// and store them</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            people<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// append this record to people</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">format_record</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>PersonInfo<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    string phone <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\()?(\\\\d&#123; 3 &#125;)(\\\\))?([-. ])?(\\\\d&#123; 3 &#125;)([-. ]?)(\\\\d&#123; 4 &#125;)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    smatch m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>entry <span class=\"token operator\">:</span> people<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// for each entry in people</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        ostringstream formatted<span class=\"token punctuation\">,</span> badNums<span class=\"token punctuation\">;</span> <span class=\"token comment\">// objects created on each loop</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>nums <span class=\"token operator\">:</span> entry<span class=\"token punctuation\">.</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>sregex_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end_it<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> end_it<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token comment\">// for each number</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token comment\">// check whether the number's formatting is valid</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token comment\">// string in badNums</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    badNums <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> nums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    <span class=\"token comment\">// \"writes\" to formatted's string</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                    formatted <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>badNums<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// there were no bad numbers</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            os <span class=\"token operator\">&lt;&lt;</span> entry<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token comment\">// print the name</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token operator\">&lt;&lt;</span> formatted<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// and reformatted numbers</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token comment\">// otherwise, print the name and bad numbers</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"input error: \"</span> <span class=\"token operator\">&lt;&lt;</span> entry<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" invalid number(s) \"</span> <span class=\"token operator\">&lt;&lt;</span> badNums<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1722\"><a class=\"anchor\" href=\"#exercise-1722\">#</a> Exercise 17.22</h3>\n<blockquote>\n<p>重写你的电话号码程序，使之允许在号码的三个部分之间放置任意多个空白符。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.21。</p>\n<h3 id=\"exercise-1723\"><a class=\"anchor\" href=\"#exercise-1723\">#</a> Exercise 17.23</h3>\n<blockquote>\n<p>编写查找邮政编码的正则表达式。一个美国邮政编码可以由五位或九位数字组成。前五位数字和后四位数字之间可以用一个短横线分隔。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>regex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sregex_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>smatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstring zipcode <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token string\">\"(\\\\d&#123;5&#125;)([-])?(\\\\d&#123;4&#125;)?\\\\b\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tregex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>zipcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tsmatch m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">//! for each matching zipcode number</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>sregex_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end_it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tit <span class=\"token operator\">!=</span> end_it<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">//! check whether the number's formatting is valid</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"valid zipcode number: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"invalid zipcode number: \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> smatch<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1724\"><a class=\"anchor\" href=\"#exercise-1724\">#</a> Exercise 17.24</h3>\n<blockquote>\n<p>编写你自己版本的重拍电话号码格式的程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\()?(\\\\d&#123;3&#125;)(\\\\))?([-. ])?(\\\\d&#123;3&#125;)([-. ])?(\\\\d&#123;4&#125;)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string format <span class=\"token operator\">=</span> <span class=\"token string\">\"$2.$5.$7\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1725\"><a class=\"anchor\" href=\"#exercise-1725\">#</a> Exercise 17.25</h3>\n<blockquote>\n<p>重写你的电话号码程序，使之只输出每个人的第一个电话号码。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\()?(\\\\d&#123;3&#125;)(\\\\))?([-. ])?(\\\\d&#123;3&#125;)([-. ])?(\\\\d&#123;4&#125;)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string fmt <span class=\"token operator\">=</span> <span class=\"token string\">\"$2.$5.$7\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        smatch result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Sorry, No match.\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1726\"><a class=\"anchor\" href=\"#exercise-1726\">#</a> Exercise 17.26</h3>\n<blockquote>\n<p>重写你的电话号码程序，使之对多于一个电话号码的人只输出第二个和后续号码。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1727\"><a class=\"anchor\" href=\"#exercise-1727\">#</a> Exercise 17.27</h3>\n<blockquote>\n<p>编写程序，将九位数字邮政编码的格式转换为  <code>ddddd-dddd</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\d&#123;5&#125;)([.- ])?(\\\\d&#123;4&#125;)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string fmt <span class=\"token operator\">=</span> <span class=\"token string\">\"$1-$3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>regex <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        smatch result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Sorry, No match.\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"random-numbers\"><a class=\"anchor\" href=\"#random-numbers\">#</a> Random Numbers</h2>\n<hr />\n<h3 id=\"随机数\"><a class=\"anchor\" href=\"#随机数\">#</a> 随机数</h3>\n<ul>\n<li>新标准之前，C 和 C++ 都依赖一个简单的 C 库函数 <code>rand</code>  来生成随机数，且只符合均匀分布。</li>\n<li>新标准：<strong>随机数引擎</strong> + <strong>随机数分布类</strong>， 定义在    <code>random</code>  头文件中。</li>\n<li>C++ 程序应该使用 <code>default_random_engine</code>  类和恰当的分布类对象。</li>\n</ul>\n<h4 id=\"随机数引擎和分布\"><a class=\"anchor\" href=\"#随机数引擎和分布\">#</a> 随机数引擎和分布</h4>\n<p>随机数引擎操作</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Engine e;</code></td>\n<td>默认构造函数；使用该引擎类型默认的种子</td>\n</tr>\n<tr>\n<td><code>Engine e(s);</code></td>\n<td>使用整型值 <code>s</code>  作为种子</td>\n</tr>\n<tr>\n<td><code>e.seed(s)</code></td>\n<td>使用种子 <code>s</code>  重置引擎的状态</td>\n</tr>\n<tr>\n<td><code>e.min()</code> ， <code>e.max()</code></td>\n<td>此引擎可生成的最小值和最大值</td>\n</tr>\n<tr>\n<td><code>Engine::result_type</code></td>\n<td>此引擎生成的 <code>unsigned</code>  整型类型</td>\n</tr>\n<tr>\n<td><code>e.discard(u)</code></td>\n<td>将引擎推进 <code>u</code>  步； <code>u</code>  的类型为 <code>unsigned long long</code></td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化分布类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uniform_int_distribution<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span> <span class=\"token function\">u</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化引擎</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>default_random_engine e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 随机生成 0-9 的无符号整数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">u</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>设置随机数发生器种子</strong>：</p>\n<ul>\n<li>种子就是一个数值，引擎可以利用它从序列中一个新位置重新开始生成随机数。</li>\n<li>种子可以使用系统函数 <code>time(0)</code> 。</li>\n</ul>\n<h4 id=\"其他随机数分布\"><a class=\"anchor\" href=\"#其他随机数分布\">#</a> 其他随机数分布</h4>\n<p>分布类型的操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Dist d;</code></td>\n<td>默认够赞函数；使 <code>d</code>  准备好被使用。其他构造函数依赖于 <code>Dist</code>  的类型；分布类型的构造函数是 <code>explicit</code>  的。</td>\n</tr>\n<tr>\n<td><code>d(e)</code></td>\n<td>用相同的 <code>e</code>  连续调用 <code>d</code>  的话，会根据 <code>d</code>  的分布式类型生成一个随机数序列； <code>e</code>  是一个随机数引擎对象。</td>\n</tr>\n<tr>\n<td><code>d.min()</code> , <code>d.max()</code></td>\n<td>返回 <code>d(e)</code>  能生成的最小值和最大值。</td>\n</tr>\n<tr>\n<td><code>d.reset()</code></td>\n<td>重建 <code>d</code>  的状态，是的随后对 <code>d</code>  的使用不依赖于 <code>d</code>  已经生成的值。</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-1728\"><a class=\"anchor\" href=\"#exercise-1728\">#</a> Exercise 17.28</h3>\n<blockquote>\n<p>编写函数，每次调用生成并返回一个均匀分布的随机 <code>unsigned int</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;random></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// default version</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// with seed spicified</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// with seed and range spicified</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>default_random_engine e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>uniform_int_distribution<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span> ud<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ud</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>default_random_engine <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>uniform_int_distribution<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span> ud<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ud</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">random_gen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>default_random_engine <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>uniform_int_distribution<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span> <span class=\"token function\">ud</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ud</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1729\"><a class=\"anchor\" href=\"#exercise-1729\">#</a> Exercise 17.29</h3>\n<blockquote>\n<p>修改上一题中编写的函数，允许用户提供一个种子作为可选参数。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.28。</p>\n<h3 id=\"exercise-1730\"><a class=\"anchor\" href=\"#exercise-1730\">#</a> Exercise 17.30</h3>\n<blockquote>\n<p>再次修改你的程序，此次增加两个参数，表示函数允许返回的最小值和最大值。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.28。</p>\n<h3 id=\"exercise-1731\"><a class=\"anchor\" href=\"#exercise-1731\">#</a> Exercise 17.31</h3>\n<blockquote>\n<p>对于本节中的游戏程序，如果在 <code>do</code>  循环内定义 <code>b</code>  和 <code>e</code> ，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>由于引擎返回相同的随机数序列，因此眉不循环都会创建新的引擎，眉不循环都会生成相同的值。</p>\n<h3 id=\"exercise-1732\"><a class=\"anchor\" href=\"#exercise-1732\">#</a> Exercise 17.32</h3>\n<blockquote>\n<p>如果我们在循环内定义 <code>resp</code> ，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>会报错， <code>while</code>  条件中用到了 <code>resp</code> 。</p>\n<h3 id=\"exercise-1733\"><a class=\"anchor\" href=\"#exercise-1733\">#</a> Exercise 17.33</h3>\n<blockquote>\n<p>修改 11.3.6 节中的单词转换程序，允许对一个给定单词有多种转换方式，每次随机选择一种进行实际转换。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ifstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;random></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>default_random_engine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>uniform_int_distribution<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>find_if<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tifstream <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>ps<span class=\"token operator\">></span> dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstring str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// read wirds from dictionary</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> str1 <span class=\"token operator\">>></span> str2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\ti<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// sort words in vector</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ps <span class=\"token operator\">&amp;</span>_ps1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ps <span class=\"token operator\">&amp;</span>_ps2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _ps1<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> _ps2<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\ti<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tdefault_random_engine <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// read words from text</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> str1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t  <span class=\"token comment\">// find word in dictionary</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tvector<span class=\"token operator\">&lt;</span>ps<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t  <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>str1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ps <span class=\"token operator\">&amp;</span>_ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _ps<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> str1<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// if word doesn't exist in dictionary</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t  <span class=\"token comment\">// write it itself</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t  <span class=\"token comment\">// get random meaning of word </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tuniform_int_distribution<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span> <span class=\"token function\">u</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>str1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ps <span class=\"token operator\">&amp;</span>_ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _ps<span class=\"token punctuation\">.</span>first <span class=\"token operator\">></span> str1<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> it <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// write random meaning</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">+</span> <span class=\"token function\">u</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"the-io-library-revisited\"><a class=\"anchor\" href=\"#the-io-library-revisited\">#</a> The IO Library Revisited</h2>\n<hr />\n<h3 id=\"io库再探\"><a class=\"anchor\" href=\"#io库再探\">#</a> IO 库再探</h3>\n<h4 id=\"格式化输入与输出\"><a class=\"anchor\" href=\"#格式化输入与输出\">#</a> 格式化输入与输出</h4>\n<ul>\n<li>使用操纵符改变格式状态。</li>\n<li>控制布尔值的格式：  <code>cout &lt;&lt; boolalpha &lt;&lt; true &lt;&lt; endl;</code></li>\n<li>指定整型的进制： <code>cout &lt;&lt; dec &lt;&lt; 20 &lt;&lt; endl;</code></li>\n</ul>\n<p>定义在 <code>iostream</code>  中的操纵符：</p>\n<table>\n<thead>\n<tr>\n<th>操纵符</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolalpha</code></td>\n<td>将 <code>true</code>  和 <code>false</code>  输出为字符串</td>\n</tr>\n<tr>\n<td><code>* noboolalpha</code></td>\n<td>将 <code>true</code>  和 <code>false</code>  输出为 1,0</td>\n</tr>\n<tr>\n<td><code>showbase</code></td>\n<td>对整型值输出表示进制的前缀</td>\n</tr>\n<tr>\n<td><code>* noshowbase</code></td>\n<td>不生成表示进制的前缀</td>\n</tr>\n<tr>\n<td><code>showpoint</code></td>\n<td>对浮点值总是显示小数点</td>\n</tr>\n<tr>\n<td><code>* noshowpoint</code></td>\n<td>只有当浮点值包含小数部分时才显示小数点</td>\n</tr>\n<tr>\n<td><code>showpos</code></td>\n<td>对非负数显示 <code>+</code></td>\n</tr>\n<tr>\n<td><code>* noshowpos</code></td>\n<td>对非负数不显示 <code>+</code></td>\n</tr>\n<tr>\n<td><code>uppercase</code></td>\n<td>在十六进制中打印 <code>0X</code> ，在科学计数法中打印 <code>E</code></td>\n</tr>\n<tr>\n<td><code>* nouppercase</code></td>\n<td>在十六进制中打印 <code>0x</code> ，在科学计数法中打印 <code>e</code></td>\n</tr>\n<tr>\n<td><code>* dec</code></td>\n<td>整型值显示为十进制</td>\n</tr>\n<tr>\n<td><code>hex</code></td>\n<td>整型值显示为十六进制</td>\n</tr>\n<tr>\n<td><code>oct</code></td>\n<td>整型值显示为八进制</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td>在值的右侧添加填充字符</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td>在值的左侧添加填充字符</td>\n</tr>\n<tr>\n<td><code>internal</code></td>\n<td>在符号和值之间添加填充字符</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td>浮点值显示为定点十进制</td>\n</tr>\n<tr>\n<td><code>scientific</code></td>\n<td>浮点值显示为科学计数法</td>\n</tr>\n<tr>\n<td><code>hexfloat</code></td>\n<td>浮点值显示为十六进制（C++11）</td>\n</tr>\n<tr>\n<td><code>defaultfloat</code></td>\n<td>充值浮点数格式为十进制（C++11）</td>\n</tr>\n<tr>\n<td><code>unitbuf</code></td>\n<td>每次输出操作后都刷新缓冲区</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>* nounitbuf</code></td>\n</tr>\n<tr>\n<td><code>* skipws</code></td>\n<td>输入运算符跳过空白符</td>\n</tr>\n<tr>\n<td><code>noskipws</code></td>\n<td>输入运算符不跳过空白符</td>\n</tr>\n<tr>\n<td><code>flush</code></td>\n<td>刷新 <code>ostream</code>  缓冲区</td>\n</tr>\n<tr>\n<td><code>ends</code></td>\n<td>插入空字符，然后刷新 <code>ostream</code>  缓冲区</td>\n</tr>\n<tr>\n<td><code>endl</code></td>\n<td>插入换行，然后刷新 <code>ostream</code>  缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p>其中 <code>*</code>  表示默认的流状态。</p>\n<h4 id=\"未格式化的输入输出操作\"><a class=\"anchor\" href=\"#未格式化的输入输出操作\">#</a> 未格式化的输入 / 输出操作</h4>\n<p>单字节低层 IO 操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>is.get(ch)</code></td>\n<td>从 <code>istream is</code>  读取下一个字节存入字符 <code>cn</code>  中。返回 <code>is</code> 。</td>\n</tr>\n<tr>\n<td><code>os.put(ch)</code></td>\n<td>将字符 <code>ch</code>  输出到 <code>ostream os</code> 。返回 <code>os</code> 。</td>\n</tr>\n<tr>\n<td><code>is.get()</code></td>\n<td>将 <code>is</code>  的下一个字节作为 <code>int</code>  返回</td>\n</tr>\n<tr>\n<td><code>is.putback(ch)</code></td>\n<td>将字符 <code>ch</code>  放回 <code>is</code> 。返回 <code>is</code> 。</td>\n</tr>\n<tr>\n<td><code>is.unget()</code></td>\n<td>将 <code>is</code>  向后移动一个字节。返回 <code>is</code> 。</td>\n</tr>\n<tr>\n<td><code>is.peek()</code></td>\n<td>将下一个字节作为 <code>int</code>  返回，但不从流中删除它。</td>\n</tr>\n</tbody>\n</table>\n<p>多字节低层 IO 操作：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>is.get(sink, size, delim)</code></td>\n<td>从 <code>is</code>  中读取最多 <code>size</code>  个字节，并保存在字符数组中，字符数组的起始地址由 <code>sink</code>  给出。读取过程直到遇到字符 <code>delim</code>  或读取了 <code>size</code>  个字节或遇到文件尾时停止。如果遇到了 <code>delim</code> ，则将其留在输入流中，不读取出来存入 <code>sink</code> 。</td>\n</tr>\n<tr>\n<td><code>is.getline(sink, size, delim)</code></td>\n<td>与接收三个参数的 <code>get</code>  版本类似，但会读取并丢弃 <code>delim</code> 。</td>\n</tr>\n<tr>\n<td><code>is.read(sink, size)</code></td>\n<td>读取最多 <code>size</code>  个字节，存入字符数组 <code>sink</code>  中。返回 <code>is</code> 。</td>\n</tr>\n<tr>\n<td><code>is.gcount()</code></td>\n<td>返回上一个未格式化读取从 <code>is</code>  读取的字节数</td>\n</tr>\n<tr>\n<td><code>os.write(source, size)</code></td>\n<td>将字符数组 <code>source</code>  中的 <code>size</code>  个字节写入 <code>os</code> 。返回 <code>os</code> 。</td>\n</tr>\n<tr>\n<td><code>is.ignore(size, delim)</code></td>\n<td>读取并忽略最多 <code>size</code>  个字符，包括 <code>delim</code> 。与其他未格式化函数不同， <code>ignore</code>  有默认参数： <code>size</code>  默认值是 1， <code>delim</code>  的默认值为文件尾。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>注意：一般情况下，主张使用标准库提供的高层抽象，低层函数容易出错。</li>\n</ul>\n<h4 id=\"流随机访问\"><a class=\"anchor\" href=\"#流随机访问\">#</a> 流随机访问</h4>\n<ul>\n<li>只适用于 <code>fstream</code>  和 <code>sstream</code> 。</li>\n<li>通过将标记 <code>seek</code>  到一个给定位置来重定位它。</li>\n<li><code>tell</code>  告诉我们标记的当前位置。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tellg()</code> ， <code>tellp</code></td>\n<td>返回一个输入流中（ <code>tellg</code> ）或输出流中（ <code>tellp</code> ）标记的当前位置。</td>\n</tr>\n<tr>\n<td><code>seekg(pos)</code> ， <code>seekp(pos)</code></td>\n<td>在一个输入流或输出流中将标记重定位到给定的绝对地址。 <code>pos</code>  通常是一个当前 <code>teelg</code>  或 <code>tellp</code>  返回的值。</td>\n</tr>\n<tr>\n<td><code>seekp(off, from)</code> ， <code>seekg(off, from)</code></td>\n<td>在一个输入流或输出流中将标记定位到 <code>from</code>  之前或之后 <code>off</code>  个字符， <code>from</code>  可以是下列值之一： <code>beg</code> ，偏移量相对于流开始位置； <code>cur</code> ，偏移量相对于流当前位置； <code>end</code> ，偏移量相对于流结尾位置。</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-1734\"><a class=\"anchor\" href=\"#exercise-1734\">#</a> Exercise 17.34</h3>\n<blockquote>\n<p>编写一个程序，展示如何使用表 17.17 和表 17.18 中的每个操作符。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1735\"><a class=\"anchor\" href=\"#exercise-1735\">#</a> Exercise 17.35</h3>\n<blockquote>\n<p>修改第 670 页中的程序，打印 2 的平方根，但这次打印十六进制数字的大写形式。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"default format: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"scientific: \"</span> <span class=\"token operator\">&lt;&lt;</span> scientific <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fixed decimal: \"</span> <span class=\"token operator\">&lt;&lt;</span> fixed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hexidecimal: \"</span> <span class=\"token operator\">&lt;&lt;</span> uppercase <span class=\"token operator\">&lt;&lt;</span> hexfloat <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use defaults: \"</span> <span class=\"token operator\">&lt;&lt;</span> defaultfloat <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//17.36</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//Modify the program from the previous exercise to print the various floating-point values so that they line up in a column.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span>left<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"default format:\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> right<span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token operator\">&lt;&lt;</span> left <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"scientific:\"</span> <span class=\"token operator\">&lt;&lt;</span> scientific <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> right <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">&lt;&lt;</span> left <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fixed decimal:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> fixed <span class=\"token operator\">&lt;&lt;</span> right <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token operator\">&lt;&lt;</span> left <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hexidecimal:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> uppercase <span class=\"token operator\">&lt;&lt;</span> hexfloat <span class=\"token operator\">&lt;&lt;</span> right <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token operator\">&lt;&lt;</span> left <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use defaults:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> defaultfloat <span class=\"token operator\">&lt;&lt;</span> right <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1736\"><a class=\"anchor\" href=\"#exercise-1736\">#</a> Exercise 17.36</h3>\n<blockquote>\n<p>修改上一题中的程序，打印不同的浮点数，使它们排成一列。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.36。</p>\n<h3 id=\"exercise-1737\"><a class=\"anchor\" href=\"#exercise-1737\">#</a> Exercise 17.37</h3>\n<blockquote>\n<p>用未格式化版本的 <code>getline</code>  逐行读取一个文件。测试你的程序，给定一个文件，既包含空行又包含长度超过你传递给 <code>geiline</code>  的字符数组大小的行。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//17.37</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Use the unformatted version of getline to read a file a line at a time.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//Test your program by giving it a file that contains empty lines as well as lines that are</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//longer than the character array that you pass to getline.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//int main () &#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//  ifstream myfile(\"F:\\\\Git\\\\Cpp-Primer\\\\ch17\\\\17_37_38\\\\test.txt\");</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//  if (myfile) cout &lt;&lt; 1 &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//  char sink [250];</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//  while(myfile.getline(sink,250))</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//  &#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; sink &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//  &#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//  return 0;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//17.38</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//Extend your program from the previous exercise to print each word you read onto its own line.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//#include &lt;iostream></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//#include &lt;fstream></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//#include &lt;iomanip></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//using namespace std;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//int main () &#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//  ifstream myfile (\"F:\\\\Git\\\\Cpp-Primer\\\\ch17\\\\17_37_38\\\\test.txt\");</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//  char sink [250];</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//  while(myfile.getline(sink,250,' '))</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//  &#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; sink &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//  &#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//  return 0;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Standard Output!\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Standard Error!\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>clog <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Standard Log??\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1738\"><a class=\"anchor\" href=\"#exercise-1738\">#</a> Exercise 17.38</h3>\n<blockquote>\n<p>扩展上一题中你的程序，将读入的每个单词打印到它所在的行。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 17.37。</p>\n<h3 id=\"exercise-1739\"><a class=\"anchor\" href=\"#exercise-1739\">#</a> Exercise 17.39</h3>\n<blockquote>\n<p>对本节给出的  <code>seek</code>  程序，编写你自己的版本。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/08/cpp/cpp-primer/Chapter%2016%20Templates%20and%20Generic%20Programming/",
            "url": "http://sakupinera.github.io/2023/01/08/cpp/cpp-primer/Chapter%2016%20Templates%20and%20Generic%20Programming/",
            "title": "C++ Primer - Chapter 16 Templates and Generic Programming",
            "date_published": "2023-01-07T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-16-templates-and-generic-programming\"><a class=\"anchor\" href=\"#chapter-16-templates-and-generic-programming\">#</a> Chapter 16 Templates and Generic Programming</h1>\n<ul>\n<li>\n<p>面向对象编程和泛型编程都能处理在编写程序时不知道类型的情况。</p>\n<ul>\n<li>\n<p>OOP 能处理类型在程序运行之前都未知的情况；</p>\n</li>\n<li>\n<p>泛型编程中，在编译时就可以获知类型。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"defining-a-template\"><a class=\"anchor\" href=\"#defining-a-template\">#</a> Defining a Template</h2>\n<hr />\n<h3 id=\"定义模板\"><a class=\"anchor\" href=\"#定义模板\">#</a> 定义模板</h3>\n<ul>\n<li><strong>模板</strong>：模板是泛型编程的基础。一个模板就是一个创建类或函数的蓝图或者说公式。</li>\n</ul>\n<h4 id=\"函数模板\"><a class=\"anchor\" href=\"#函数模板\">#</a> 函数模板</h4>\n<ul>\n<li><code>template &lt;typename T&gt; int compare(const T &amp;v1, const T &amp;v2)&#123;&#125;</code></li>\n<li>模板定义以关键字  <code>template</code>  开始，后接<strong>模板形参表</strong>，模板形参表是用<strong>尖括号</strong> <code>&lt;&gt;</code>  括住的一个或多个<strong>模板形参</strong>的列表，用逗号分隔，<strong>不能为空</strong>。</li>\n<li>使用模板时，我们显式或隐式地指定模板实参，将其绑定到模板参数上。</li>\n<li>模板类型参数：类型参数前必须使用关键字 <code>class</code>  或者 <code>typename</code> ，这两个关键字含义相同，可以互换使用。旧的程序只能使用 <code>class</code> 。</li>\n<li>非类型模板参数：表示一个值而非一个类型。实参必须是常量表达式。 <code>template &lt;class T, size_t N&gt; void array_init(T (&amp;parm)[N])&#123;&#125;</code></li>\n<li>内联函数模板：  <code>template &lt;typename T&gt; inline T min(const T&amp;, const T&amp;);</code></li>\n<li>模板程序应该尽量减少对实参类型的要求。</li>\n<li>函数模板和类模板成员函数的定义通常放在头文件中。</li>\n</ul>\n<h4 id=\"类模板\"><a class=\"anchor\" href=\"#类模板\">#</a> 类模板</h4>\n<ul>\n<li>类模板用于生成类的蓝图。</li>\n<li>不同于函数模板，编译器不能推断模板参数类型。</li>\n<li><strong>定义类模板</strong>：\n<ul>\n<li><code>template &lt;class Type&gt; class Queue &#123;&#125;;</code></li>\n</ul>\n</li>\n<li>实例化类模板：提供显式模板实参列表，来实例化出特定的类。</li>\n<li>一个类模板中所有的实例都形成一个独立的类。</li>\n<li><strong>模板形参作用域</strong>：模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。</li>\n<li>类模板的成员函数：\n<ul>\n<li><code>template &lt;typename T&gt; ret-type Blob::member-name(parm-list)</code></li>\n</ul>\n</li>\n<li>默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。</li>\n<li>新标准允许模板将自己的类型参数成为友元。 <code>template &lt;typename T&gt; class Bar&#123;friend T;&#125;;</code> 。</li>\n<li>模板类型别名：因为模板不是一个类型，因此无法定义一个 <code>typedef</code>  引用一个模板，但是新标准允许我们为类模板定义一个类型别名： <code>template&lt;typename T&gt; using twin = pair&lt;T, T&gt;;</code></li>\n</ul>\n<h4 id=\"模板参数\"><a class=\"anchor\" href=\"#模板参数\">#</a> 模板参数</h4>\n<ul>\n<li>模板参数与作用域：一个模板参数名的可用范围是在声明之后，至模板声明或定义结束前。</li>\n<li>一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置。</li>\n<li>当我们希望通知编译器一个名字表示类型时，必须使用关键字 <code>typename</code> ，而不能使用 <code>class</code> 。</li>\n<li>默认模板实参： <code>template &lt;class T = int&gt; class Numbers&#123;&#125;</code></li>\n</ul>\n<h4 id=\"成员模板\"><a class=\"anchor\" href=\"#成员模板\">#</a> 成员模板</h4>\n<ul>\n<li>成员模板（member template）：本身是模板的函数成员。\n<ul>\n<li>普通（非模板）类的成员模板。</li>\n<li>类模板的成员模板。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"控制实例化\"><a class=\"anchor\" href=\"#控制实例化\">#</a> 控制实例化</h4>\n<ul>\n<li>动机：在多个文件中实例化相同模板的额外开销可能非常严重。</li>\n<li>显式实例化：\n<ul>\n<li><code>extern template declaration;  // 实例化声明</code></li>\n<li><code>template declaration;  // 实例化定义</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"效率与灵活性\"><a class=\"anchor\" href=\"#效率与灵活性\">#</a> 效率与灵活性</h4>\n<hr />\n<h3 id=\"exercise-161\"><a class=\"anchor\" href=\"#exercise-161\">#</a> Exercise 16.1</h3>\n<blockquote>\n<p>给出实例化的定义。</p>\n</blockquote>\n<p>解：</p>\n<p>当编译器实例化一个模版时，它使用实际的模版参数代替对应的模版参数来创建出模版的一个新 “实例”。</p>\n<h3 id=\"exercise-162\"><a class=\"anchor\" href=\"#exercise-162\">#</a> Exercise 16.2</h3>\n<blockquote>\n<p>编写并测试你自己版本的  <code>compare</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rhs <span class=\"token operator\">&lt;</span> lhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-163\"><a class=\"anchor\" href=\"#exercise-163\">#</a> Exercise 16.3</h3>\n<blockquote>\n<p>对两个  <code>Sales_data</code>  对象调用你的  <code>compare</code>  函数，观察编译器在实例化过程中如何处理错误。</p>\n</blockquote>\n<p>解：</p>\n<p><code>error: no match for 'operator&lt;' </code></p>\n<h3 id=\"exercise-164\"><a class=\"anchor\" href=\"#exercise-164\">#</a> Exercise 16.4</h3>\n<blockquote>\n<p>编写行为类似标准库  <code>find</code>  算法的模版。函数需要两个模版类型参数，一个表示函数的迭代器参数，另一个表示值的类型。使用你的函数在一个  <code>vector&lt;int&gt;</code>  和一个 <code>list&lt;string&gt;</code>  中查找给定值。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Value</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Iterator <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Iterator first<span class=\"token punctuation\">,</span> Iterator last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Value<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> first <span class=\"token operator\">!=</span> last <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>first <span class=\"token operator\">!=</span> value<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-165\"><a class=\"anchor\" href=\"#exercise-165\">#</a> Exercise 16.5</h3>\n<blockquote>\n<p>为 6.2.4 节中的 <code>print</code>  函数编写模版版本，它接受一个数组的引用，能处理任意大小、任意元素类型的数组。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> elem <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> elem <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-166\"><a class=\"anchor\" href=\"#exercise-166\">#</a> Exercise 16.6</h3>\n<blockquote>\n<p>你认为接受一个数组实参的标准库函数  <code>begin</code>  和  <code>end</code>  是如何工作的？定义你自己版本的  <code>begin</code>  和  <code>end</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> N<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>T<span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">T</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> N<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>T<span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">T</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> arr <span class=\"token operator\">+</span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-167\"><a class=\"anchor\" href=\"#exercise-167\">#</a> Exercise 16.7</h3>\n<blockquote>\n<p>编写一个  <code>constexpr</code>  模版，返回给定数组的大小。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">N</span><span class=\"token operator\">></span> <span class=\"token keyword\">constexpr</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">T</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-168\"><a class=\"anchor\" href=\"#exercise-168\">#</a> Exercise 16.8</h3>\n<blockquote>\n<p>在第 97 页的 “关键概念” 中，我们注意到，C++ 程序员喜欢使用  <code>!=</code>  而不喜欢  <code>&lt;</code>  。解释这个习惯的原因。</p>\n</blockquote>\n<p>解：</p>\n<p>因为大多数类只定义了  <code>!=</code>  操作而没有定义  <code>&lt;</code>  操作，使用  <code>!=</code>  可以降低对要处理的类型的要求。</p>\n<h3 id=\"exercise-169\"><a class=\"anchor\" href=\"#exercise-169\">#</a> Exercise 16.9</h3>\n<blockquote>\n<p>什么是函数模版，什么是类模版？</p>\n</blockquote>\n<p>解：</p>\n<p>一个函数模版就是一个公式，可用来生成针对特定类型的函数版本。类模版是用来生成类的蓝图的，与函数模版的不同之处是，编译器不能为类模版推断模版参数类型。如果我们已经多次看到，为了使用类模版，我们必须在模版名后的尖括号中提供额外信息。</p>\n<h3 id=\"exercise-1610\"><a class=\"anchor\" href=\"#exercise-1610\">#</a> Exercise 16.10</h3>\n<blockquote>\n<p>当一个类模版被实例化时，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>一个类模版的每个实例都形成一个独立的类。</p>\n<h3 id=\"exercise-1611\"><a class=\"anchor\" href=\"#exercise-1611\">#</a> Exercise 16.11</h3>\n<blockquote>\n<p>下面  <code>List</code>  的定义是错误的。应如何修改它？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">elemType</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListItem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">elemType</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">List</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">List</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tList<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ListItem <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> elemType value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tListItem <span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>模版需要模版参数，应该修改为如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">elemType</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListItem</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">elemType</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token generic-function\"><span class=\"token function\">List</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token generic-function\"><span class=\"token function\">List</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \tList<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token operator\">~</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \t<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ListItem<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> elemType value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \tListItem<span class=\"token operator\">&lt;</span>elemType<span class=\"token operator\">></span> <span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1612\"><a class=\"anchor\" href=\"#exercise-1612\">#</a> Exercise 16.12</h3>\n<blockquote>\n<p>编写你自己版本的  <code>Blob</code>  和  <code>BlobPtr</code>  模版，包含书中未定义的多个 <code>const</code>  成员。</p>\n</blockquote>\n<p>解：</p>\n<p>Blob：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blob</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> T value_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">std</span><span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// constructors</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// number of elements in the Blob</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tsize_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">bool</span>      <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// element access</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// throw msg if data[i] isn't valid</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// constructors</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>T<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty Blob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty Blob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>T<span class=\"token operator\">&amp;</span> Blob<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// if i is too big, check function will throw, preventing access to a nonexistent element</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscript out of range\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> Blob<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// if i is too big, check function will throw, preventing access to a nonexistent element</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscript out of range\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pop_back on empty Blob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tdata<span class=\"token operator\">-></span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BlobPtr：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Blob.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlobPtr</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">BlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">curr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">BlobPtr</span><span class=\"token punctuation\">(</span>Blob<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t sz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">wptr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">curr</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dereference past end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// prefix</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// postfix</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tBlobPtr <span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tBlobPtr <span class=\"token keyword\">operator</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// returns  a shared_ptr to the vector if the check succeeds</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> wptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// prefix ++</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// if curr already points past the end of the container, can't increment it</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token operator\">++</span>curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// prefix --</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token operator\">--</span>curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrement past begin of BlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// postfix ++</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token operator\">++</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// postfix --</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptrs to different Blobs!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>i <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> BlobPtr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptrs to different Blobs!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1613\"><a class=\"anchor\" href=\"#exercise-1613\">#</a> Exercise 16.13</h3>\n<blockquote>\n<p>解释你为  <code>BlobPtr</code>  的相等和关系运算符选择哪种类型的友好关系？</p>\n</blockquote>\n<p>解：</p>\n<p>这里需要与类型一一对应，所以就选择一对一友好关系。</p>\n<h3 id=\"exercise-1614\"><a class=\"anchor\" href=\"#exercise-1614\">#</a> Exercise 16.14</h3>\n<blockquote>\n<p>编写  <code>Screen</code>  类模版，用非类型参数定义  <code>Screen</code>  的高和宽。</p>\n</blockquote>\n<p>解：</p>\n<p>Screen</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> H<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> W<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Screen</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>size_type pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// needed because Screen has another constructor</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// cursor initialized to 0 by its in-class initializer</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Screen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">contents</span><span class=\"token punctuation\">(</span>H <span class=\"token operator\">*</span> W<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>              <span class=\"token comment\">// get the character at the cursor</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> contents<span class=\"token punctuation\">[</span>cursor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>       <span class=\"token comment\">// implicitly inline</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tScreen <span class=\"token operator\">&amp;</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>pos r<span class=\"token punctuation\">,</span> pos c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// can be made inline later</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Screen<span class=\"token operator\">&lt;</span>H<span class=\"token punctuation\">,</span> W<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>c<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tos <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> Screen <span class=\"token operator\">&amp;</span>  c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tis <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>H<span class=\"token operator\">*</span>W<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tc<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tpos cursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tpos height <span class=\"token operator\">=</span> H<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> W<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string contents<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> H<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> W<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">inline</span> Screen<span class=\"token operator\">&lt;</span>H<span class=\"token punctuation\">,</span> W<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Screen</span><span class=\"token operator\">&lt;</span>H<span class=\"token punctuation\">,</span> W<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>pos r<span class=\"token punctuation\">,</span> pos c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tpos row <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcursor <span class=\"token operator\">=</span> row <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1615\"><a class=\"anchor\" href=\"#exercise-1615\">#</a> Exercise 16.15</h3>\n<blockquote>\n<p>为你的  <code>Screen</code>  模版实现输入和输出运算符。 <code>Screen</code>  类需要哪些友元（如果需要的话）来令输入和输出运算符正确工作？解释每个友元声明（如果有的话）为什么是必要的。</p>\n</blockquote>\n<p>解：</p>\n<p>类的  <code>operator&lt;&lt;</code>  和  <code>operator&gt;&gt;</code>  应该是类的友元。</p>\n<h3 id=\"exercise-1616\"><a class=\"anchor\" href=\"#exercise-1616\">#</a> Exercise 16.16</h3>\n<blockquote>\n<p>将  <code>StrVec</code>  类重写为模版，命名为  <code>Vec</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>Vec:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*  @brief a vector like class</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vec</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">first_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// memmbers</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free <span class=\"token operator\">-</span> element<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> cap <span class=\"token operator\">-</span> element<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// data members</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tT<span class=\"token operator\">*</span> element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> first_free<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tT<span class=\"token operator\">*</span> cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>allocator<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// utillities</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">wy_alloc_n_move</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t* @brief newData is a pair of pointers pointing to newly allocated and copied</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t*        from range : [b, e)</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">></span> newData <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\telement <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// constructor that takes initializer_list&lt;T></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// allocate memory as large as l.size()</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// copy elements from l to the address allocated</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tT<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>t <span class=\"token operator\">:</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// build data structure</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\telement <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> element <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">// operator =</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Vec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> Vec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// allocate and copy first to protect against self_assignment</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">></span> newData <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// destroy and deallocate</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\">// update data structure</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\telement <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">// destructor</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>Vec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>* @brief   allocate new memeory if nessary and push back the new T</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>* @param t new T</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>* @brief   preallocate enough memory for specified number of elements</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>* @param n number of elements required</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token comment\">// if n too small, just return without doing anything</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token comment\">// allocate new memory and move data from old address to the new one</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token function\">wy_alloc_n_move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>*  @brief  Resizes to the specified number of elements.</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>*  @param  n  Number of elements the %vector should contain.</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>*  This function will resize it to the specified</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>*  number of elements.  If the number is smaller than the</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>*  current size it is truncated, otherwise</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>*  default constructed elements are appended.</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>*  @brief  Resizes it to the specified number of elements.</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>*  @param  __new_size  Number of elements it should contain.</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>*  @param  __x  Data with which new elements should be populated.</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>*  This function will resize it to the specified</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>*  number of elements.  If the number is smaller than the</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>*  current size the it is truncated, otherwise</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>*  the it is extended and new elements are populated with</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>*  given data.</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token comment\">// destroy the range [element+n, first_free) using destructor</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> element <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> first_free<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\t<span class=\"token comment\">// update first_free to point to the new address</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\tfirst_free <span class=\"token operator\">=</span> element <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>* @brief   allocate new space for the given range and copy them into it</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>* @param b</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>* @param e</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>* @return  a pair of pointers pointing to [first element , one past the last) in the new space</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t<span class=\"token comment\">// calculate the size needed and allocate space accordingly</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\tT<span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t<span class=\"token comment\">//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token comment\">// which copies the range[first, last) to the space to which</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token comment\">// the starting address data is pointing.</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token comment\">// This function returns a pointer to one past the last element</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>* @brief   destroy the elements and deallocate the space previously allocated.</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t<span class=\"token comment\">// if not nullptr</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t\t<span class=\"token comment\">// destroy it in reverse order.</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> first_free<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> element<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>* @brief   allocate memory for spicified number of elements</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>* @param n</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>* @note    it's user's responsibility to ensure that @param n is greater than</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>*          the current capacity.</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">wy_alloc_n_move</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token comment\">// allocate as required.</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t newCapacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\tT<span class=\"token operator\">*</span> newData <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token comment\">// move the data from old place to the new one</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\tT<span class=\"token operator\">*</span> dest <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\tT<span class=\"token operator\">*</span> old <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>dest<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>old<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token comment\">// update data structure</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\telement <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\tcap <span class=\"token operator\">=</span> element <span class=\"token operator\">+</span> newCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>* @brief   Double the capacity and using std::move move the original data to the newly</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>*          allocated memory</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t<span class=\"token comment\">// calculate the new capacity required</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>\t<span class=\"token comment\">// allocate and move old data to the new space</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>\t<span class=\"token function\">wy_alloc_n_move</span><span class=\"token punctuation\">(</span>newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1617\"><a class=\"anchor\" href=\"#exercise-1617\">#</a> Exercise 16.17</h3>\n<blockquote>\n<p>声明为  <code>typename</code>  的类型参数和声明为  <code>class</code>  的类型参数有什么不同（如果有的话）？什么时候必须使用 <code>typename</code> ？</p>\n</blockquote>\n<p>解：</p>\n<p>没有什么不同。当我们希望通知编译器一个名字表示类型时，必须使用关键字  <code>typename</code> ，而不能使用  <code>class</code> 。</p>\n<h3 id=\"exercise-1618\"><a class=\"anchor\" href=\"#exercise-1618\">#</a> Exercise 16.18</h3>\n<blockquote>\n<p>解释下面每个函数模版声明并指出它们是否非法。更正你发现的每个错误。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">V</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> Ctype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Ctype</span><span class=\"token operator\">></span> Ctype <span class=\"token function\">f5</span><span class=\"token punctuation\">(</span>Ctype a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 非法。应该为  <code>template &lt;typename T, typename U, typename V&gt; void f1(T, U, V);</code> 。</li>\n<li>(b) 非法。应该为  <code>template &lt;typename T&gt; T f2(int &amp;t);</code></li>\n<li>(c) 非法。应该为  <code>template &lt;typename T&gt; inline T foo(T, unsigned int*);</code></li>\n<li>(d) 非法。应该为  <code>template &lt;typename T&gt; T f4(T, T);</code></li>\n<li>(e) 非法。 <code>Ctype</code>  被隐藏了。</li>\n</ul>\n<h3 id=\"exercise-1619\"><a class=\"anchor\" href=\"#exercise-1619\">#</a> Exercise 16.19</h3>\n<blockquote>\n<p>编写函数，接受一个容器的引用，打印容器中的元素。使用容器的  <code>size_type</code>  和  <code>size</code>  成员来控制打印元素的循环。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Container<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1620\"><a class=\"anchor\" href=\"#exercise-1620\">#</a> Exercise 16.20</h3>\n<blockquote>\n<p>重写上一题的函数，使用 <code>begin</code>  和  <code>end</code>  返回的迭代器来控制循环。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Container<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1621\"><a class=\"anchor\" href=\"#exercise-1621\">#</a> Exercise 16.21</h3>\n<blockquote>\n<p>编写你自己的  <code>DebugDelete</code>  版本。</p>\n</blockquote>\n<p>解：</p>\n<p>DebugDelete</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DebugDelete</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DebugDelete</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>cerr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">os</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"deleting unique_ptr\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1622\"><a class=\"anchor\" href=\"#exercise-1622\">#</a> Exercise 16.22</h3>\n<blockquote>\n<p>修改 12.3 节中你的  <code>TextQuery</code>  程序，令  <code>shared_ptr</code>  成员使用  <code>DebugDelete</code>  作为它们的删除器。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1623\"><a class=\"anchor\" href=\"#exercise-1623\">#</a> Exercise 16.23</h3>\n<blockquote>\n<p>预测在你的查询主程序中何时会执行调用运算符。如果你的预测和实际不符，确认你理解了原因。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1624\"><a class=\"anchor\" href=\"#exercise-1624\">#</a> Exercise 16.24</h3>\n<blockquote>\n<p>为你的  <code>Blob</code>  模版添加一个构造函数，它接受两个迭代器。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>    <span class=\"token comment\">//for class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">It</span><span class=\"token operator\">></span>   <span class=\"token comment\">//for this member</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Blob</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Blob</span><span class=\"token punctuation\">(</span>It b<span class=\"token punctuation\">,</span> It e<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1625\"><a class=\"anchor\" href=\"#exercise-1625\">#</a> Exercise 16.25</h3>\n<blockquote>\n<p>解释下面这些声明的含义。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span><span class=\"token operator\">&lt;</span>Sales_data<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>前者是模版声明，后者是实例化定义。</p>\n<h3 id=\"exercise-1626\"><a class=\"anchor\" href=\"#exercise-1626\">#</a> Exercise 16.26</h3>\n<blockquote>\n<p>假设  <code>NoDefault</code>  是一个没有默认构造函数的类，我们可以显式实例化  <code>vector&lt;NoDefualt&gt;</code>  吗？如果不可以，解释为什么。</p>\n</blockquote>\n<p>解：</p>\n<p>不可以。如</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>NoDefault<span class=\"token operator\">></span> <span class=\"token function\">vec</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>会使用  <code>NoDefault</code>  的默认构造函数，而  <code>NoDefault</code>  没有默认构造函数，因此是不可以的。</p>\n<h3 id=\"exercise-1627\"><a class=\"anchor\" href=\"#exercise-1627\">#</a> Exercise 16.27</h3>\n<blockquote>\n<p>对下面每条带标签的语句，解释发生了什么样的实例化（如果有的话）。如果一个模版被实例化，解释为什么；如果未实例化，解释为什么没有。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">//(a)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Exercise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rds<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//(b)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> si<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//(c)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>sc<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//(d)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//(e)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> iObj <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//(f)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>(a)、(b)、(c)、(f) 都发生了实例化，(d)、(e) 没有实例化。</p>\n<h3 id=\"exercise-1628\"><a class=\"anchor\" href=\"#exercise-1628\">#</a> Exercise 16.28</h3>\n<blockquote>\n<p>编写你自己版本的  <code>shared_ptr</code>  和  <code>unique_ptr</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>shared_ptr</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"delete.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> cp5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedPointer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">auto</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>SharedPointer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> SharedPointer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>ref_count<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>ref_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedPointer</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">//  Default Ctor</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">SharedPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token operator\">:</span> ptr<span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ref_count<span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">size_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> deleter<span class=\"token punctuation\">&#123;</span> cp5<span class=\"token double-colon punctuation\">::</span>Delete<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">//  Ctor that takes raw pointer</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">SharedPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> raw_ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token operator\">:</span> ptr<span class=\"token punctuation\">&#123;</span> raw_ptr <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ref_count<span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">size_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> deleter<span class=\"token punctuation\">&#123;</span> cp5<span class=\"token double-colon punctuation\">::</span>Delete<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//  Copy Ctor</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">SharedPointer</span><span class=\"token punctuation\">(</span>SharedPointer <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token operator\">:</span> ptr<span class=\"token punctuation\">&#123;</span> other<span class=\"token punctuation\">.</span>ptr <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ref_count<span class=\"token punctuation\">&#123;</span> other<span class=\"token punctuation\">.</span>ref_count <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> deleter<span class=\"token punctuation\">&#123;</span> other<span class=\"token punctuation\">.</span>deleter <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span><span class=\"token operator\">*</span>ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">//  Move Ctor</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">SharedPointer</span><span class=\"token punctuation\">(</span>SharedPointer <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token operator\">:</span> ptr<span class=\"token punctuation\">&#123;</span> other<span class=\"token punctuation\">.</span>ptr <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ref_count<span class=\"token punctuation\">&#123;</span> other<span class=\"token punctuation\">.</span>ref_count <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> deleter<span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tother<span class=\"token punctuation\">.</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\tother<span class=\"token punctuation\">.</span>ref_count <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">//  Copy assignment</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tSharedPointer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>SharedPointer <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">//increment first to ensure safty for self-assignment</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span><span class=\"token operator\">*</span>rhs<span class=\"token punctuation\">.</span>ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token function\">decrement_and_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tptr <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">,</span> ref_count <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>ref_count<span class=\"token punctuation\">,</span> deleter <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token comment\">//  Move assignment</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tSharedPointer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>SharedPointer <span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tcp5<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\trhs<span class=\"token punctuation\">.</span><span class=\"token function\">decrement_and_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token comment\">//  Conversion operator</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> ptr <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token comment\">//  Dereference</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token comment\">//  Arrow</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token comment\">//  Use count</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token comment\">//  Get underlying pointer</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token comment\">//  Check if the unique user</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>refCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">//  Swap</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>SharedPointer<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token comment\">// Free the object pointed to, if unique</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t<span class=\"token function\">decrement_and_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token comment\">// Reset with the new raw pointer</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> pointer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">!=</span> pointer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t<span class=\"token function\">decrement_n_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\tptr <span class=\"token operator\">=</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t\tref_count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">size_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token comment\">//  Reset with raw pointer and deleter</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\tdeleter <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t<span class=\"token comment\">//  Dtor</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token operator\">~</span><span class=\"token function\">SharedPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t<span class=\"token function\">decrement_and_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\tT<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> deleter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> <span class=\"token function\">decrement_and_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token operator\">--</span><span class=\"token operator\">*</span>ref_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> ref_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t<span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\tref_count <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\tptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//namespace</span></pre></td></tr></table></figure><p>unique_ptr:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"debugDelete.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// forward declarations for friendship</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_pointer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*  @brief  std::unique_ptr like class template.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">=</span> DebugDelete<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_pointer</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token generic-function\"><span class=\"token function\">swap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// preventing copy and assignment</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">unique_pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_pointer<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tunique_pointer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_pointer<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// default constructor and one taking T*</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">unique_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">unique_pointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> up<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">unique_pointer</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&amp;&amp;</span> up<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token operator\">:</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> up<span class=\"token punctuation\">.</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// move assignment</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tunique_pointer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// std::nullptr_t assignment</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tunique_pointer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>nullptr_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// operator overloaded :  *  ->  bool</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> ptr <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// return the underlying pointer</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// swap member using swap friend</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// free and make it point to nullptr or to p's pointee.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// return ptr and make ptr point to nullptr.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">unique_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tT<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tD  deleter <span class=\"token operator\">=</span> <span class=\"token function\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// swap</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>deleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// move assignment</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">inline</span> unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>unique_pointer<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">// prevent self-assignment</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>ptr <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\tptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">// std::nullptr_t assignment</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">inline</span> unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>unique_pointer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>nullptr_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// relinquish contrul by returnning ptr and making ptr point to nullptr.</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">inline</span> T<span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token class-name\">unique_pointer</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tT<span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1629\"><a class=\"anchor\" href=\"#exercise-1629\">#</a> Exercise 16.29</h3>\n<blockquote>\n<p>修改你的  <code>Blob</code>  类，用你自己的  <code>shared_ptr</code>  代替标准库中的版本。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1630\"><a class=\"anchor\" href=\"#exercise-1630\">#</a> Exercise 16.30</h3>\n<blockquote>\n<p>重新运行你的一些程序，验证你的  <code>shared_ptr</code>  类和修改后的  <code>Blob</code>  类。（注意：实现  <code>weak_ptr</code>  类型超出了本书范围，因此你不能将 <code>BlobPtr</code>  类与你修改后的 <code>Blob</code>  一起使用。）</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1631\"><a class=\"anchor\" href=\"#exercise-1631\">#</a> Exercise 16.31</h3>\n<blockquote>\n<p>如果我们将  <code>DebugDelete</code>  与  <code>unique_ptr</code>  一起使用，解释编译器将删除器处理为内联形式的可能方式。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h2 id=\"template-argument-deduction\"><a class=\"anchor\" href=\"#template-argument-deduction\">#</a> Template Argument Deduction</h2>\n<hr />\n<h3 id=\"模板实参推断\"><a class=\"anchor\" href=\"#模板实参推断\">#</a> 模板实参推断</h3>\n<ul>\n<li>对函数模板，编译器利用调用中的函数实参来确定其模板参数，这个过程叫<strong>模板实参推断</strong>。</li>\n</ul>\n<h4 id=\"类型转换与模板类型参数\"><a class=\"anchor\" href=\"#类型转换与模板类型参数\">#</a> 类型转换与模板类型参数</h4>\n<ul>\n<li>能够自动转换类型的只有：\n<ul>\n<li>和其他函数一样，顶层 <code>const</code>  会被忽略。</li>\n<li>数组实参或函数实参转换为指针。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数模板显式实参\"><a class=\"anchor\" href=\"#函数模板显式实参\">#</a> 函数模板显式实参</h4>\n<ul>\n<li>某些情况下，编译器无法推断出模板实参的类型。</li>\n<li>定义： <code>template &lt;typename T1, typename T2, typename T3&gt; T1 sum(T2, T3);</code></li>\n<li>使用函数显式实参调用： <code>auto val3 = sum&lt;long long&gt;(i, lng); // T1是显式指定，T2和T3都是从函数实参类型推断而来</code></li>\n<li><strong>注意</strong>：正常类型转换可以应用于显式指定的实参。</li>\n</ul>\n<h4 id=\"尾置返回类型与类型转换\"><a class=\"anchor\" href=\"#尾置返回类型与类型转换\">#</a> 尾置返回类型与类型转换</h4>\n<ul>\n<li>使用场景：并不清楚返回结果的准确类型，但知道所需类型是和参数相关的。</li>\n<li><code>template &lt;typename It&gt; auto fcn(It beg, It end) -&gt; decltype(*beg)</code></li>\n<li>尾置返回允许我们在参数列表之后声明返回类型。</li>\n</ul>\n<p>标准库的<strong>类型转换</strong>模板：</p>\n<ul>\n<li>定义在头文件 <code>type_traits</code>  中。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对 <code>Mod&lt;T&gt;</code> ，其中 <code>Mod</code>  是：</th>\n<th>若 <code>T</code>  是：</th>\n<th>则 <code>Mod&lt;T&gt;::type</code>  是：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>remove_reference</code></td>\n<td><code>X&amp;</code>  或 <code>X&amp;&amp;</code></td>\n<td><code>X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td><code>add_const</code></td>\n<td><code>X&amp;</code>  或 <code>const X</code>  或函数</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>const T</code></td>\n</tr>\n<tr>\n<td><code>add_lvalue_reference</code></td>\n<td><code>X&amp;</code></td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>X&amp;&amp;</code></td>\n<td><code>X&amp;</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T&amp;</code></td>\n</tr>\n<tr>\n<td><code>add_rvalue_reference</code></td>\n<td><code>X&amp;</code>  或 <code>X&amp;&amp;</code></td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T&amp;&amp;</code></td>\n</tr>\n<tr>\n<td><code>remove_pointer</code></td>\n<td><code>X*</code></td>\n<td><code>X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td><code>add_pointer</code></td>\n<td><code>X&amp;</code>  或 <code>X&amp;&amp;</code></td>\n<td><code>X*</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T*</code></td>\n</tr>\n<tr>\n<td><code>make_signed</code></td>\n<td><code>unsigned X</code></td>\n<td><code>X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td><code>make_unsigned</code></td>\n<td>带符号类型</td>\n<td><code>unsigned X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td><code>remove_extent</code></td>\n<td><code>X[n]</code></td>\n<td><code>X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n<tr>\n<td><code>remove_all_extents</code></td>\n<td><code>X[n1][n2]...</code></td>\n<td><code>X</code></td>\n</tr>\n<tr>\n<td></td>\n<td>否则</td>\n<td><code>T</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"函数指针和实参推断\"><a class=\"anchor\" href=\"#函数指针和实参推断\">#</a> 函数指针和实参推断</h4>\n<ul>\n<li>当使用一个函数模板初始化一个函数指针或为一个函数指针赋值时，编译器使用指针的类型来推断模板实参。</li>\n</ul>\n<h4 id=\"模板实参推断和引用\"><a class=\"anchor\" href=\"#模板实参推断和引用\">#</a> 模板实参推断和引用</h4>\n<ul>\n<li>从左值引用函数推断类型：若形如 <code>T&amp;</code> ，则只能传递给它一个左值。但如果是 <code>const T&amp;</code> ，则可以接受一个右值。</li>\n<li>从右值引用函数推断类型：若形如 <code>T&amp;&amp;</code> ，则只能传递给它一个右值。</li>\n<li>引用折叠和右值引用参数：\n<ul>\n<li>规则 1：当我们将一个左值传递给函数的右值引用参数，且右值引用指向模板类型参数时（如 <code>T&amp;&amp;</code> ），编译器会推断模板类型参数为实参的左值引用类型。</li>\n<li>规则 2：如果我们间接创造一个引用的引用，则这些引用形成了<strong>折叠</strong>。折叠引用只能应用在间接创造的引用的引用，如类型别名或模板参数。对于一个给定类型 <code>X</code> ：\n<ul>\n<li><code>X&amp; &amp;</code> 、 <code>X&amp; &amp;&amp;</code>  和 <code>X&amp;&amp; &amp;</code>  都折叠成类型 <code>X&amp;</code> 。</li>\n<li>类型 <code>X&amp;&amp; &amp;&amp;</code>  折叠成 <code>X&amp;&amp;</code> 。</li>\n</ul>\n</li>\n<li>上面两个例外规则导致两个重要结果：\n<ul>\n<li>1. 如果一个函数参数是一个指向模板类型参数的右值引用（如 <code>T&amp;&amp;</code> ），则它可以被绑定到一个左值上；</li>\n<li>2. 如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将被实例化为一个左值引用参数（ <code>T&amp;</code> ）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"理解stdmove\"><a class=\"anchor\" href=\"#理解stdmove\">#</a> 理解 std::move</h4>\n<ul>\n<li>标准库 <code>move</code>  函数是使用右值引用的模板的一个很好的例子。</li>\n<li>从一个左值 <code>static_cast</code>  到一个右值引用是允许的。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"转发\"><a class=\"anchor\" href=\"#转发\">#</a> 转发</h4>\n<ul>\n<li>使用一个名为 <code>forward</code>  的新标准库设施来传递参数，它能够保持原始实参的类型。</li>\n<li>定义在头文件 <code>utility</code>  中。</li>\n<li>必须通过显式模板实参来调用。</li>\n<li><code>forward</code>  返回显式实参类型的右值引用。即， <code>forward&lt;T&gt;</code>  的返回类型是 <code>T&amp;&amp;</code> 。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1632\"><a class=\"anchor\" href=\"#exercise-1632\">#</a> Exercise 16.32</h3>\n<blockquote>\n<p>在模版实参推断过程中发生了什么？</p>\n</blockquote>\n<p>解：</p>\n<p>在模版实参推断过程中，编译器使用函数调用中的实参类型来寻找模版实参，用这些模版实参生成的函数版本与给定的函数调用最为匹配。</p>\n<h3 id=\"exercise-1633\"><a class=\"anchor\" href=\"#exercise-1633\">#</a> Exercise 16.33</h3>\n<blockquote>\n<p>指出在模版实参推断过程中允许对函数实参进行的两种类型转换。</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li><code>const</code>  转换：可以将一个非  <code>const</code>  对象的引用（或指针）传递给一个  <code>const</code>  的引用（或指针）形参。</li>\n<li>数组或函数指针转换：如果函数形参不是引用类型，则可以对数组或函数类型的实参应用正常的指针转换。一个数组实参可以转换为一个指向其首元素的指针。类似的，一个函数实参可以转换为一个该函数类型的指针。</li>\n</ul>\n<h3 id=\"exercise-1634\"><a class=\"anchor\" href=\"#exercise-1634\">#</a> Exercise 16.34</h3>\n<blockquote>\n<p>对下面的代码解释每个调用是否合法。如果合法， <code>T</code>  的类型是什么？如果不合法，为什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 不合法。 <code>compare(const char [3], const char [6])</code> , 两个实参类型不一致。</li>\n<li>(b) 合法。 <code>compare(const char [4], const char [4])</code> .</li>\n</ul>\n<h3 id=\"exercise-1635\"><a class=\"anchor\" href=\"#exercise-1635\">#</a> Exercise 16.35</h3>\n<blockquote>\n<p>下面调用中哪些是错误的（如果有的话）？如果调用合法， <code>T</code>  的类型是什么？如果调用不合法，问题何在？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tempalte <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T <span class=\"token function\">fcn</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">fcn</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token function\">fcn</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 合法，类型为 <code>char</code></li>\n<li>(b) 合法，类型为 <code>double</code></li>\n<li>(c) 合法，类型为 <code>char</code></li>\n<li>(d) 不合法，这里无法确定 T 的类型是 <code>float</code>  还是 <code>double</code></li>\n</ul>\n<h3 id=\"exercise-1636\"><a class=\"anchor\" href=\"#exercise-1636\">#</a> Exercise 16.36</h3>\n<blockquote>\n<p>进行下面的调用会发生什么：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>cp1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cp2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">,</span> cp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">,</span> cp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 这个使用就不合法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1637\"><a class=\"anchor\" href=\"#exercise-1637\">#</a> Exercise 16.37</h3>\n<blockquote>\n<p>标准库  <code>max</code>  函数有两个参数，它返回实参中的较大者。此函数有一个模版类型参数。你能在调用  <code>max</code>  时传递给它一个  <code>int</code>  和一个  <code>double</code>  吗？如果可以，如何做？如果不可以，为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>可以。提供显式的模版实参：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">max</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1638\"><a class=\"anchor\" href=\"#exercise-1638\">#</a> Exercise 16.38</h3>\n<blockquote>\n<p>当我们调用  <code>make_shared</code>  时，必须提供一个显示模版实参。解释为什么需要显式模版实参以及它是如果使用的。</p>\n</blockquote>\n<p>解：</p>\n<p>如果不显示提供模版实参，那么  <code>make_shared</code>  无法推断要分配多大内存空间。</p>\n<h3 id=\"exercise-1639\"><a class=\"anchor\" href=\"#exercise-1639\">#</a> Exercise 16.39</h3>\n<blockquote>\n<p>对 16.1.1 节 中的原始版本的  <code>compare</code>  函数，使用一个显式模版实参，使得可以向函数传递两个字符串字面量。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">compare</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"exercise-1640\"><a class=\"anchor\" href=\"#exercise-1640\">#</a> Exercise 16.40</h3>\n<blockquote>\n<p>下面的函数是否合法？如果不合法，为什么？如果合法，对可以传递的实参类型有什么限制（如果有的话）？返回类型是什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">It</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">fcn3</span><span class=\"token punctuation\">(</span>It beg<span class=\"token punctuation\">,</span> It end<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beg <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 处理序列</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>beg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>合法。该类型需要支持  <code>+</code>  操作。</p>\n<h3 id=\"exercise-1641\"><a class=\"anchor\" href=\"#exercise-1641\">#</a> Exercise 16.41</h3>\n<blockquote>\n<p>编写一个新的  <code>sum</code>  版本，它返回类型保证足够大，足以容纳加法结果。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>T lhs<span class=\"token punctuation\">,</span> T rhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span> lhs <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> lhs <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1642\"><a class=\"anchor\" href=\"#exercise-1642\">#</a> Exercise 16.42</h3>\n<blockquote>\n<p>对下面每个调用，确定  <code>T</code>  和  <code>val</code>  的类型：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ci <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span></pre></td></tr></table></figure><h3 id=\"exercise-1643\"><a class=\"anchor\" href=\"#exercise-1643\">#</a> Exercise 16.43</h3>\n<blockquote>\n<p>使用上一题定义的函数，如果我们调用 <code>g(i = ci)</code> , <code>g</code>  的模版参数将是什么？</p>\n</blockquote>\n<p>解：</p>\n<p><code>i = ci</code>  返回的是左值，因此  <code>g</code>  的模版参数是  <code>int&amp;</code></p>\n<h3 id=\"exercise-1644\"><a class=\"anchor\" href=\"#exercise-1644\">#</a> Exercise 16.44</h3>\n<blockquote>\n<p>使用与第一题中相同的三个调用，如果  <code>g</code>  的函数参数声明为  <code>T</code> （而不是 <code>T&amp;&amp;</code> ），确定 T 的类型。如果 <code>g</code>  的函数参数是  <code>const T&amp;</code>  呢？</p>\n</blockquote>\n<p>解：</p>\n<p>当声明为 <code>T</code>  的时候， <code>T</code>  的类型为 <code>int&amp;</code> 。<br />\n当声明为 <code>const T&amp;</code>  的时候，T 的类型为 <code>int&amp;</code> 。</p>\n<h3 id=\"exercise-1645\"><a class=\"anchor\" href=\"#exercise-1645\">#</a> Exercise 16.45</h3>\n<blockquote>\n<p>如果下面的模版，如果我们对一个像 42 这样的字面常量调用 <code>g</code> ，解释会发生什么？如果我们对一个 <code>int</code>  类型的变量调用 <code>g</code>  呢？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>当使用字面常量， <code>T</code>  将为 <code>int</code> 。<br />\n当使用 <code>int</code>  变量， <code>T</code>  将为 <code>int&amp;</code> 。编译的时候将会报错，因为没有办法对这种类型进行内存分配，无法创建 <code>vector&lt;int&amp;&gt;</code> 。</p>\n<h3 id=\"exercise-1646\"><a class=\"anchor\" href=\"#exercise-1646\">#</a> Exercise 16.46</h3>\n<blockquote>\n<p>解释下面的循环，它来自 13.5 节中的  <code>StrVec::reallocate</code> :</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>dest<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>elem<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>在每个循环中，对  <code>elem</code>  的解引用操作  <code>*</code>  当中，会返回一个左值， <code>std::move</code>  函数将该左值转换为右值，提供给  <code>construct</code>  函数。</p>\n<h3 id=\"exercise-1647\"><a class=\"anchor\" href=\"#exercise-1647\">#</a> Exercise 16.47</h3>\n<blockquote>\n<p>编写你自己版本的翻转函数，通过调用接受左值和右值引用参数的函数来测试它。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> T1<span class=\"token operator\">&amp;&amp;</span> t1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">&amp;&amp;</span> t2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T2<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T1<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"overloading-and-templates\"><a class=\"anchor\" href=\"#overloading-and-templates\">#</a> Overloading and Templates</h2>\n<hr />\n<h3 id=\"重载与模板\"><a class=\"anchor\" href=\"#重载与模板\">#</a> 重载与模板</h3>\n<ul>\n<li>多个可行模板：当有多个重载模板对一个调用提供同样好的匹配时，会选择最特例化的版本。</li>\n<li>非模板和模板重载：对于一个调用，如果一个非函数模板与一个函数模板提供同样好的匹配，则选择非模板版本。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1648\"><a class=\"anchor\" href=\"#exercise-1648\">#</a> Exercise 16.48</h3>\n<blockquote>\n<p>编写你自己版本的  <code>debug_rep</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ret <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ret <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pointer: \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ret <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ret <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" null pointer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1649\"><a class=\"anchor\" href=\"#exercise-1649\">#</a> Exercise 16.49</h3>\n<blockquote>\n<p>解释下面每个调用会发生什么：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ci <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ci<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">//g(T )</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">//g(T*)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//g(T)   </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//g(T*)    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">//f(T)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">//f(T)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">//f(T)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//f(const T*)</span></pre></td></tr></table></figure><h3 id=\"exercise-1650\"><a class=\"anchor\" href=\"#exercise-1650\">#</a> Exercise 16.50</h3>\n<blockquote>\n<p>定义上一个练习中的函数，令它们打印一条身份信息。运行该练习中的代码。如果函数调用的行为与你预期不符，确定你理解了原因。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h2 id=\"variadic-templates\"><a class=\"anchor\" href=\"#variadic-templates\">#</a> Variadic Templates</h2>\n<hr />\n<h3 id=\"可变参数模板\"><a class=\"anchor\" href=\"#可变参数模板\">#</a> 可变参数模板</h3>\n<p><strong>可变参数模板</strong>就是一个接受可变数目参数的模板函数或模板类。</p>\n<ul>\n<li>可变数目的参数被称为参数包。\n<ul>\n<li>模板参数包：标识另个或多个模板参数。</li>\n<li>函数参数包：标识另个或者多个函数参数。</li>\n</ul>\n</li>\n<li>用一个省略号来指出一个模板参数或函数参数，表示一个包。</li>\n<li><code>template &lt;typename T, typename... Args&gt;</code> ， <code>Args</code>  第一个模板参数包。</li>\n<li><code>void foo(const T &amp;t, const Args&amp; ... rest);</code> ， <code>rest</code>  是一个函数参数包。</li>\n<li><code>sizeof...</code>  运算符，返回参数的数目。</li>\n</ul>\n<h4 id=\"编写可变参数函数模板\"><a class=\"anchor\" href=\"#编写可变参数函数模板\">#</a> 编写可变参数函数模板</h4>\n<ul>\n<li>可变参数函数通常是递归的：第一步调用处理包中的第一个实参，然后用剩余实参调用自身。</li>\n</ul>\n<h4 id=\"包扩展\"><a class=\"anchor\" href=\"#包扩展\">#</a> 包扩展</h4>\n<ul>\n<li>对于一个参数包，除了获取它的大小，唯一能做的事情就是<strong>扩展</strong>（expand）。</li>\n<li>扩展一个包时，还要提供用于每个扩展元素的<strong>模式</strong>（pattern）。</li>\n</ul>\n<h4 id=\"转发参数包\"><a class=\"anchor\" href=\"#转发参数包\">#</a> 转发参数包</h4>\n<ul>\n<li>新标准下可以组合使用可变参数模板和 <code>forward</code>  机制，实现将实参不变地传递给其他函数。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1651\"><a class=\"anchor\" href=\"#exercise-1651\">#</a> Exercise 16.51</h3>\n<blockquote>\n<p>调用本节中的每个  <code>foo</code> ，确定  <code>sizeof...(Args)</code>  和  <code>sizeof...(rest)</code>  分别返回什么。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Args<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof...(Args): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof...(rest): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_param_packet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"how now brown cow\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">test_param_packet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>sizeof...(Args): 3\nsizeof...(rest): 3\nsizeof...(Args): 2\nsizeof...(rest): 2\nsizeof...(Args): 1\nsizeof...(rest): 1\nsizeof...(Args): 0\nsizeof...(rest): 0\n</code></pre>\n<h3 id=\"exercise-1652\"><a class=\"anchor\" href=\"#exercise-1652\">#</a> Exercise 16.52</h3>\n<blockquote>\n<p>编写一个程序验证上一题的答案。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 16.51。</p>\n<h3 id=\"exercise-1653\"><a class=\"anchor\" href=\"#exercise-1653\">#</a> Exercise 16.53</h3>\n<blockquote>\n<p>编写你自己版本的  <code>print</code>  函数，并打印一个、两个及五个实参来测试它，要打印的每个实参都应有不同的类型。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Printable</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> Printable <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> printable<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> os <span class=\"token operator\">&lt;&lt;</span> printable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// recursion</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> Printable <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> printable<span class=\"token punctuation\">,</span> Args <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>os <span class=\"token operator\">&lt;&lt;</span> printable <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1654\"><a class=\"anchor\" href=\"#exercise-1654\">#</a> Exercise 16.54</h3>\n<blockquote>\n<p>如果我们对一个没  <code>&lt;&lt;</code>  运算符的类型调用  <code>print</code> ，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>无法通过编译。</p>\n<h3 id=\"exercise-1655\"><a class=\"anchor\" href=\"#exercise-1655\">#</a> Exercise 16.55</h3>\n<blockquote>\n<p>如果我们的可变参数版本  <code>print</code>  的定义之后声明非可变参数版本，解释可变参数的版本会如何执行。</p>\n</blockquote>\n<p>解：</p>\n<p><code>error: no matching function for call to 'print(std::ostream&amp;)'</code></p>\n<h3 id=\"exercise-1656\"><a class=\"anchor\" href=\"#exercise-1656\">#</a> Exercise 16.56</h3>\n<blockquote>\n<p>编写并测试可变参数版本的  <code>errorMsg</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">errorMsg</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">,</span> <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1657\"><a class=\"anchor\" href=\"#exercise-1657\">#</a> Exercise 16.57</h3>\n<blockquote>\n<p>比较你的可变参数版本的  <code>errorMsg</code>  和 6.2.6 节中的  <code>error_msg</code>  函数。两种方法的优点和缺点各是什么？</p>\n</blockquote>\n<p>解：</p>\n<p>可变参数版本有更好的灵活性。</p>\n<h3 id=\"exercise-1658\"><a class=\"anchor\" href=\"#exercise-1658\">#</a> Exercise 16.58</h3>\n<blockquote>\n<p>为你的  <code>StrVec</code>  类及你为 16.1.2 节练习中编写的  <code>Vec</code>  类添加  <code>emplace_back</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>        <span class=\"token comment\">//for the class  template</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>  <span class=\"token comment\">//for the member template</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    alloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Args<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1659\"><a class=\"anchor\" href=\"#exercise-1659\">#</a> Exercise 16.59</h3>\n<blockquote>\n<p>假定  <code>s</code>  是一个  <code>string</code> ，解释调用  <code>svec.emplace_back(s)</code>  会发生什么。</p>\n</blockquote>\n<p>解：</p>\n<p>会在  <code>construst</code>  函数中转发扩展包。</p>\n<h3 id=\"exercise-1660\"><a class=\"anchor\" href=\"#exercise-1660\">#</a> Exercise 16.60</h3>\n<blockquote>\n<p>解释  <code>make_shared</code>  是如何工作的。</p>\n</blockquote>\n<p>解：</p>\n<p><code>make_shared</code>  是一个可变模版函数，它将参数包转发然后构造一个对象，再然后一个指向该对象的智能指针。</p>\n<h3 id=\"exercise-1661\"><a class=\"anchor\" href=\"#exercise-1661\">#</a> Exercise 16.61</h3>\n<blockquote>\n<p>定义你自己版本的  <code>make_shared</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span>Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Args<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"template-specializations\"><a class=\"anchor\" href=\"#template-specializations\">#</a> Template Specializations</h2>\n<hr />\n<h3 id=\"模板特例化specializations\"><a class=\"anchor\" href=\"#模板特例化specializations\">#</a> 模板特例化（Specializations）</h3>\n<ul>\n<li>定义函数模板特例化：关键字 <code>template</code>  后面跟一个空尖括号对（ <code>&lt;&gt;</code> ）。</li>\n<li>特例化的本质是实例化一个模板，而不是重载它。特例化不影响函数匹配。</li>\n<li>模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明应该放在前面，然后是特例化版本。</li>\n<li>我们可以部分特例化类模板，但不能部分特例化函数模板。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1662\"><a class=\"anchor\" href=\"#exercise-1662\">#</a> Exercise 16.62</h3>\n<blockquote>\n<p>定义你自己版本的  <code>hash&lt;Sales_data&gt;</code> , 并定义一个  <code>Sales_data</code>  对象的  <code>unorder_multise</code> 。将多条交易记录保存到容器中，并打印其内容。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1663\"><a class=\"anchor\" href=\"#exercise-1663\">#</a> Exercise 16.63</h3>\n<blockquote>\n<p>定义一个函数模版，统计一个给定值在一个 <code>vecor</code>  中出现的次数。测试你的函数，分别传递给它一个 <code>double</code>  的 <code>vector</code> ，一个 <code>int</code>  的 <code>vector</code>  以及一个 <code>string</code>  的 <code>vector</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// template</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>size_t  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> T value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">auto</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> elem  <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// template specialization</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">count</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> elem <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// for ex16.63</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>vd<span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// for ex16.64</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> vcc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"moophy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>vcc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1664\"><a class=\"anchor\" href=\"#exercise-1664\">#</a> Exercise 16.64</h3>\n<blockquote>\n<p>为上一题的模版编写特例化版本来处理 <code>vector&lt;const char*&gt;</code> 。编写程序使用这个特例化版本。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 16.64。</p>\n<h3 id=\"exercise-1665\"><a class=\"anchor\" href=\"#exercise-1665\">#</a> Exercise 16.65</h3>\n<blockquote>\n<p>在 16.3 节中我们定义了两个重载的  <code>debug_rep</code>  版本，一个接受  <code>const char*</code>  参数，另一个接受  <code>char *</code>  参数。将这两个函数重写为特例化版本。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// template</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// template specialization T=const char*  ,  char*  respectively.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">char</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    ret <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// template specialization</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// T = const char*</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// template specialization</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// T =       char*</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">debug_rep</span><span class=\"token punctuation\">(</span>      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1666\"><a class=\"anchor\" href=\"#exercise-1666\">#</a> Exercise 16.66</h3>\n<blockquote>\n<p>重载 <code>debug_rep</code>  函数与特例化它相比，有何优点和缺点？</p>\n</blockquote>\n<p>解：</p>\n<p>重载函数会改变函数匹配。</p>\n<h3 id=\"exercise-1667\"><a class=\"anchor\" href=\"#exercise-1667\">#</a> Exercise 16.67</h3>\n<blockquote>\n<p>定义特例化版本会影响  <code>debug_rep</code>  的函数匹配吗？如果不影响，为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>不影响，特例化是模板的一个实例，并没有重载函数。</p>\n<h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/07/cpp/cpp-primer/Chapter%2015%20Object-Oriented%20Programming/",
            "url": "http://sakupinera.github.io/2023/01/07/cpp/cpp-primer/Chapter%2015%20Object-Oriented%20Programming/",
            "title": "C++ Primer - Chapter 15 Object-Oriented Programming",
            "date_published": "2023-01-06T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-15-object-oriented-programming\"><a class=\"anchor\" href=\"#chapter-15-object-oriented-programming\">#</a> Chapter 15 Object-Oriented Programming</h1>\n<h2 id=\"oop-an-overview\"><a class=\"anchor\" href=\"#oop-an-overview\">#</a> OOP: An Overview</h2>\n<hr />\n<h3 id=\"oop概述\"><a class=\"anchor\" href=\"#oop概述\">#</a> OOP：概述</h3>\n<ul>\n<li>面向对象程序设计（object-oriented programming）的核心思想是数据抽象、继承和动态绑定。</li>\n<li><strong>继承</strong>（inheritance）：\n<ul>\n<li>通过继承联系在一起的类构成一种层次关系。</li>\n<li>通常在层次关系的根部有一个<strong>基类</strong>（base class）。</li>\n<li>其他类直接或者简介从基类继承而来，这些继承得到的类成为<strong>派生类</strong>（derived class）。</li>\n<li>基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。</li>\n<li>对于某些函数，基类希望它的派生类个自定义适合自己的版本，此时基类就将这些函数声明成<strong>虚函数</strong>（virtual function）。</li>\n<li>派生类必须通过使用<strong>类派生列表</strong>（class derivation list）明确指出它是从哪个基类继承而来。形式：一个冒号，后面紧跟以逗号分隔的基类列表，每个基类前都可以有访问说明符。 <code>class Bulk_quote : public Quote&#123;&#125;;</code></li>\n<li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上 <code>virtual</code>  关键字，也可以不加。C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个 <code>override</code>  关键字。</li>\n</ul>\n</li>\n<li><strong>动态绑定</strong>（dynamic binding，又称运行时绑定）：\n<ul>\n<li>使用同一段代码可以分别处理基类和派生类的对象。</li>\n<li>函数的运行版本由实参决定，即在运行时选择函数的版本。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"defining-base-and-derived-classes\"><a class=\"anchor\" href=\"#defining-base-and-derived-classes\">#</a> Defining Base and Derived Classes</h2>\n<hr />\n<h3 id=\"定义基类和派生类\"><a class=\"anchor\" href=\"#定义基类和派生类\">#</a> 定义基类和派生类</h3>\n<h4 id=\"定义基类\"><a class=\"anchor\" href=\"#定义基类\">#</a> 定义基类</h4>\n<ul>\n<li>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。</li>\n<li>基类通过在其成员函数的声明语句前加上关键字 <code>virtual</code>  使得该函数执行<strong>动态绑定</strong>。</li>\n<li>如果成员函数没有被声明为虚函数，则解析过程发生在编译时而非运行时。</li>\n<li>访问控制：\n<ul>\n<li><code>protected</code>  ： 基类和和其派生类还有友元可以访问。</li>\n<li><code>private</code>  ： 只有基类本身和友元可以访问。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"定义派生类\"><a class=\"anchor\" href=\"#定义派生类\">#</a> 定义派生类</h4>\n<ul>\n<li>派生类必须通过类派生列表（class derivation list）明确指出它是从哪个基类继承而来。形式：冒号，后面紧跟以逗号分隔的基类列表，每个基类前面可以有一下三种访问说明符的一个： <code>public</code> 、 <code>protected</code> 、 <code>private</code> 。</li>\n<li>C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个 <code>override</code>  关键字。</li>\n<li>派生类构造函数：派生类必须使用基类的构造函数去初始化它的基类部分。</li>\n<li>静态成员：如果基类定义了一个基类成员，则在整个继承体系中只存在该成员的唯一定义。</li>\n<li>派生类的声明：声明中不包含它的派生列表。</li>\n<li>C++11 新标准提供了一种防止继承的方法，在类名后面跟一个关键字 <code>final</code> 。</li>\n</ul>\n<h4 id=\"类型转换与继承\"><a class=\"anchor\" href=\"#类型转换与继承\">#</a> 类型转换与继承</h4>\n<ul>\n<li>理解基类和派生类之间的类型抓换是理解 C++ 语言面向对象编程的关键所在。</li>\n<li>可以将基类的指针或引用绑定到派生类对象上。</li>\n<li>不存在从基类向派生类的隐式类型转换。</li>\n<li>派生类向基类的自动类型转换只对指针或引用类型有效，对象之间不存在类型转换。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-151\"><a class=\"anchor\" href=\"#exercise-151\">#</a> Exercise 15.1</h3>\n<blockquote>\n<p>什么是虚成员？</p>\n</blockquote>\n<p>解：</p>\n<p>对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成虚函数。</p>\n<h3 id=\"exercise-152\"><a class=\"anchor\" href=\"#exercise-152\">#</a> Exercise 15.2</h3>\n<blockquote>\n<p><code>protected</code>  访问说明符与  <code>private</code>  有何区别？</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li><code>protected</code>  ： 基类和和其派生类还有友元可以访问。</li>\n<li><code>private</code>  ： 只有基类本身和友元可以访问。</li>\n</ul>\n<h3 id=\"exercise-153\"><a class=\"anchor\" href=\"#exercise-153\">#</a> Exercise 15.3</h3>\n<blockquote>\n<p>定义你自己的  <code>Quote</code>  类和  <code>print_total</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Quote</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Quote</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">double</span>  price <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_15_3.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> ret <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ISBN:\"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"# sold: \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" total due: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-154\"><a class=\"anchor\" href=\"#exercise-154\">#</a> Exercise 15.4</h3>\n<blockquote>\n<p>下面哪条声明语句是不正确的？请解释原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Derived</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 不正确。类不能派生自身。</li>\n<li>(b) 不正确。这是定义而非声明。</li>\n<li>(c) 不正确。派生列表不能出现在这。</li>\n</ul>\n<h3 id=\"exercise-155\"><a class=\"anchor\" href=\"#exercise-155\">#</a> Exercise 15.5</h3>\n<blockquote>\n<p>定义你自己的  <code>Bulk_quote</code>  类。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_15_3.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulk_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Quote</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> disc<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min_qty</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span>disc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t min_qty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">double</span>      discount <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-156\"><a class=\"anchor\" href=\"#exercise-156\">#</a> Exercise 15.6</h3>\n<blockquote>\n<p>将  <code>Quote</code>  和  <code>Bulk_quote</code>  的对象传给 15.2.1 节练习中的  <code>print_total</code>  函数，检查该函数是否正确。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_15_3.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_15_5.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// ex15.6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tQuote <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"textbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tBulk_quote <span class=\"token function\">bq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"textbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">,</span> bq<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> ret <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ISBN:\"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"# sold: \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" total due: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-157\"><a class=\"anchor\" href=\"#exercise-157\">#</a> Exercise 15.7</h3>\n<blockquote>\n<p>定义一个类使其实现一种数量受限的折扣策略，具体策略是：当购买书籍的数量不超过一个给定的限量时享受折扣，如果购买量一旦超过了限量，则超出的部分将以原价销售。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_15_5.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Limit_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Quote</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Limit_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Limit_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> disc<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">max_qty</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span>disc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t max_qty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">double</span>      discount <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token class-name\">Limit_quote</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> max_qty<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> max_qty <span class=\"token operator\">*</span> price <span class=\"token operator\">*</span> discount <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> max_qty<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> discount <span class=\"token operator\">*</span>price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-158\"><a class=\"anchor\" href=\"#exercise-158\">#</a> Exercise 15.8</h3>\n<blockquote>\n<p>给出静态类型和动态类型的定义。</p>\n</blockquote>\n<p>解：</p>\n<p>表达式的静态类型在编译时总是已知的，它是变量声明时的类型或表达式生成的类型。动态类型则是变量或表达式表示的内存中的对象的类型。动态类型直到运行时才可知。</p>\n<h3 id=\"exercise-159\"><a class=\"anchor\" href=\"#exercise-159\">#</a> Exercise 15.9</h3>\n<blockquote>\n<p>在什么情况下表达式的静态类型可能与动态类型不同？请给出三个静态类型与动态类型不同的例子。</p>\n</blockquote>\n<p>解：</p>\n<p>基类的指针或引用的静态类型可能与其动态类型不一致。</p>\n<h3 id=\"exercise-1510\"><a class=\"anchor\" href=\"#exercise-1510\">#</a> Exercise 15.10</h3>\n<blockquote>\n<p>回忆我们在 8.1 节进行的讨论，解释第 284 页中将  <code>ifstream</code>  传递给  <code>Sales_data</code>  的 <code>read</code>  函数的程序是如何工作的。</p>\n</blockquote>\n<p>解：</p>\n<p><code>std::ifstream</code>  是  <code>std::istream</code>  的派生基类，因此  <code>read</code>  函数能够正常工作。</p>\n<h2 id=\"virtual-functions\"><a class=\"anchor\" href=\"#virtual-functions\">#</a> Virtual Functions</h2>\n<hr />\n<h3 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h3>\n<ul>\n<li>使用虚函数可以执行动态绑定。</li>\n<li>OOP 的核心思想是多态性（polymorphism）。</li>\n<li>当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。</li>\n<li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上 <code>virtual</code>  关键字，也可以不加。</li>\n<li>C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个 <code>override</code>  关键字。</li>\n<li>如果我们想覆盖某个虚函数，但不小心把形参列表弄错了，这个时候就不会覆盖基类中的虚函数。加上 <code>override</code>  可以明确程序员的意图，让编译器帮忙确认参数列表是否出错。</li>\n<li>如果虚函数使用默认实参，则基类和派生类中定义的默认实参最好一致。</li>\n<li>通常，只有成员函数（或友元）中的代码才需要使用<strong>作用域运算符</strong>（ <code>::</code> ）来回避虚函数的机制。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1511\"><a class=\"anchor\" href=\"#exercise-1511\">#</a> Exercise 15.11</h3>\n<blockquote>\n<p>为你的  <code>Quote</code>  类体系添加一个名为  <code>debug</code>  的虚函数，令其分别显示每个类的数据成员。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Quote</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"data members of this class:\\n\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"bookNo= \"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bookNo <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"price= \"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>price<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1512\"><a class=\"anchor\" href=\"#exercise-1512\">#</a> Exercise 15.12</h3>\n<blockquote>\n<p>有必要将一个成员函数同时声明成  <code>override</code>  和  <code>final</code>  吗？为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>有必要。 <code>override</code>  的含义是重写基类中相同名称的虚函数， <code>final</code>  是阻止它的派生类重写当前虚函数。</p>\n<h3 id=\"exercise-1513\"><a class=\"anchor\" href=\"#exercise-1513\">#</a> Exercise 15.13</h3>\n<blockquote>\n<p>给定下面的类，解释每个  <code>print</code>  函数的机理：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstring <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> basename<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> os <span class=\"token operator\">&lt;&lt;</span> basename<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstring basename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> os <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上述代码中存在问题吗？如果有，你该如何修改它？</p>\n<p>解：</p>\n<p>有问题。应该改为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> os <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" derived\\n \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1514\"><a class=\"anchor\" href=\"#exercise-1514\">#</a> Exercise 15.14</h3>\n<blockquote>\n<p>给定上一题中的类以及下面这些对象，说明在运行时调用哪个函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base bobj<span class=\"token punctuation\">;</span> \t\tbase <span class=\"token operator\">*</span>bp1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>bobj<span class=\"token punctuation\">;</span> \tbase <span class=\"token operator\">&amp;</span>br1 <span class=\"token operator\">=</span> bobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>derived dobj<span class=\"token punctuation\">;</span> \tbase <span class=\"token operator\">*</span>bp2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dobj<span class=\"token punctuation\">;</span> \tbase <span class=\"token operator\">&amp;</span>br2 <span class=\"token operator\">=</span> dobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> bobj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>dobj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>bp1<span class=\"token operator\">-></span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>bp2<span class=\"token operator\">-></span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>br1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>br2<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 编译时。</li>\n<li>(b) 编译时。</li>\n<li>(c) 编译时。</li>\n<li>(d) 编译时。</li>\n<li>(e) 运行时。 <code>base::print()</code></li>\n<li>(f) 运行时。 <code>derived::print()</code></li>\n</ul>\n<h2 id=\"abstract-base-classes\"><a class=\"anchor\" href=\"#abstract-base-classes\">#</a> Abstract Base Classes</h2>\n<hr />\n<h3 id=\"抽象基类\"><a class=\"anchor\" href=\"#抽象基类\">#</a> 抽象基类</h3>\n<ul>\n<li><strong>纯虚函数</strong>（pure virtual）：清晰地告诉用户当前的函数是没有实际意义的。纯虚函数无需定义，只用在函数体的位置前书写 <code>=0</code>  就可以将一个虚函数说明为纯虚函数。</li>\n<li>含有纯虚函数的类是<strong>抽象基类</strong>（abstract base class）。不能创建抽象基类的对象。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1515\"><a class=\"anchor\" href=\"#exercise-1515\">#</a> Exercise 15.15</h3>\n<blockquote>\n<p>定义你自己的  <code>Disc_quote</code>  和  <code>Bulk_quote</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Disc_quote</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Disc_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Quote</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">quantity</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>size_t quantity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span>      discount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Bulk_quote</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulk_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Disc_quote</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> disc<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> disc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span>  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1516\"><a class=\"anchor\" href=\"#exercise-1516\">#</a> Exercise 15.16</h3>\n<blockquote>\n<p>改写你在 15.2.2 节练习中编写的数量受限的折扣策略，令其继承  <code>Disc_quote</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Limit_quote</code> ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Limit_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Disc_quote</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Limit_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Limit_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> disc<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> disc<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> price <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> quantity <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> discount <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1517\"><a class=\"anchor\" href=\"#exercise-1517\">#</a> Exercise 15.17</h3>\n<blockquote>\n<p>尝试定义一个  <code>Disc_quote</code>  的对象，看看编译器给出的错误信息是什么？</p>\n</blockquote>\n<p>解：</p>\n<p><code>error: cannot declare variable 'd' to be of abstract type 'Disc_quote': Disc_quote d;</code></p>\n<h2 id=\"access-control-and-inheritance\"><a class=\"anchor\" href=\"#access-control-and-inheritance\">#</a> Access Control and Inheritance</h2>\n<hr />\n<h3 id=\"访问控制与继承\"><a class=\"anchor\" href=\"#访问控制与继承\">#</a> 访问控制与继承</h3>\n<ul>\n<li>受保护的成员：\n<ul>\n<li><code>protected</code>  说明符可以看做是 <code>public</code>  和 <code>private</code>  中的产物。</li>\n<li>类似于私有成员，受保护的成员对类的用户来说是不可访问的。</li>\n<li>类似于公有成员，受保护的成员对于派生类的成员和友元来说是可访问的。</li>\n<li>派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。</li>\n</ul>\n</li>\n<li>派生访问说明符：\n<ul>\n<li>对于派生类的成员（及友元）能否访问其直接积累的成员没什么影响。</li>\n<li>派生访问说明符的目的是：控制派生类用户对于基类成员的访问权限。比如 <code>struct Priv_Drev: private Base&#123;&#125;</code>  意味着在派生类 <code>Priv_Drev</code>  中，从 <code>Base</code>  继承而来的部分都是 <code>private</code>  的。</li>\n</ul>\n</li>\n<li>友元关系不能继承。</li>\n<li>改变个别成员的可访问性：使用 <code>using</code> 。</li>\n<li>默认情况下，使用 <code>class</code>  关键字定义的派生类是私有继承的；使用 <code>struct</code>  关键字定义的派生类是公有继承的。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1518\"><a class=\"anchor\" href=\"#exercise-1518\">#</a> Exercise 15.18</h3>\n<blockquote>\n<p>假设给定了第 543 页和第 544 页的类，同时已知每个对象的类型如注释所示，判断下面的哪些赋值语句是合法的。解释那些不合法的语句为什么不被允许：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//d1 的类型是 Pub_Derv</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d2<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//d2 的类型是 Priv_Derv</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d3<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//d3 的类型是 Prot_Derv</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd1<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//dd1 的类型是 Derived_from_Public\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd2<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//dd2 的类型是 Derived_from_Private</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd3<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//dd3 的类型是 Derived_from_Protected</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d1<span class=\"token punctuation\">;</span> 合法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d2<span class=\"token punctuation\">;</span> 不合法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d3<span class=\"token punctuation\">;</span> 不合法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd1<span class=\"token punctuation\">;</span> 合法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd2<span class=\"token punctuation\">;</span> 不合法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd3<span class=\"token punctuation\">;</span> 不合法</pre></td></tr></table></figure><p>只有在派生类是使用 <code>public</code>  的方式继承基类时，用户代码才可以使用派生类到基类（ <code>derived-to-base</code> ）的转换。</p>\n<h3 id=\"exercise-1519\"><a class=\"anchor\" href=\"#exercise-1519\">#</a> Exercise 15.19</h3>\n<blockquote>\n<p>假设 543 页和 544 页的每个类都有如下形式的成员函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于每个类，分别判断上面的函数是否合法。</p>\n<p>解：</p>\n<p>合法：</p>\n<ul>\n<li>Pub_Derv</li>\n<li>Priv_Derv</li>\n<li>Prot_Derv</li>\n<li>Derived_from_Public</li>\n<li>Derived_from_Protected<br />\n 不合法：</li>\n<li>Derived_from_Private</li>\n</ul>\n<p>这段代码是在成员函数中使用 <code>Base</code> 。 <code>Priv_Drev</code>  中的 <code>Base</code>  部分虽然是 <code>private</code>  的，但其成员函数依然可以访问； <code>Derived_from_Private</code>  继承自 <code>Priv_Drev</code> ，不能访问 <code>Priv_Drev</code>  中的 <code>private</code>  成员，因此不合法。</p>\n<h3 id=\"exercise-1520\"><a class=\"anchor\" href=\"#exercise-1520\">#</a> Exercise 15.20</h3>\n<blockquote>\n<p>编写代码检验你对前面两题的回答是否正确。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"exercise15_5.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bulk_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"limit_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">pub_mem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// public member</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> prot_mem<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// protected member</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">char</span> priv_mem<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// private member</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Pub_Derv</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span>    <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Priv_Derv</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">private</span>   <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Prot_Derv</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived_from_Public</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Pub_Derv</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived_from_Private</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Priv_Derv</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//void memfcn(Base &amp;b) &#123; b = *this; &#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived_from_Protected</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Prot_Derv</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">memfcn</span><span class=\"token punctuation\">(</span>Base <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPub_Derv d1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tBase <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPriv_Derv d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">//p = &amp;d2;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tProt_Derv d3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">//p = &amp;d3;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tDerived_from_Public dd1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dd1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tDerived_from_Private dd2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//p =&amp; dd2;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tDerived_from_Protected dd3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">//p = &amp;dd3;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1521\"><a class=\"anchor\" href=\"#exercise-1521\">#</a> Exercise 15.21</h3>\n<blockquote>\n<p>从下面这些一般性抽象概念中任选一个（或者选一个你自己的），将其对应的一组类型组织成一个继承体系：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> 图形文件格式（如gif、tiff、jpeg、bmp）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> 图形基元（如方格、圆、球、圆锥）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> C<span class=\"token operator\">++</span>语言中的类型（如类、函数、成员函数）</pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"quote.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bulk_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"limit_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// just for 2D shape</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span>    Coordinate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    Coordinate  a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    Coordinate  b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Coordinate  c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    Coordinate  d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>           <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>           <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>           <span class=\"token keyword\">const</span> Coordinate<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1522\"><a class=\"anchor\" href=\"#exercise-1522\">#</a> Exercise 15.22</h3>\n<blockquote>\n<p>对于你在上一题中选择的类，为其添加函数的虚函数及公有成员和受保护的成员。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 15.21。</p>\n<h2 id=\"class-scope-under-inheritance\"><a class=\"anchor\" href=\"#class-scope-under-inheritance\">#</a> Class Scope under Inheritance</h2>\n<hr />\n<h3 id=\"继承中的类作用域\"><a class=\"anchor\" href=\"#继承中的类作用域\">#</a> 继承中的类作用域</h3>\n<ul>\n<li>每个类定义自己的作用域，在这个作用域内我们定义类的成员。当存在继承关系时，派生类的作用域嵌套在其基类的作用域之内。</li>\n<li>派生类的成员将隐藏同名的基类成员。</li>\n<li>除了覆盖继承而来的虚函数之外，派生类最好不要重用其他定义在基类中的名字。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1523\"><a class=\"anchor\" href=\"#exercise-1523\">#</a> Exercise 15.23</h3>\n<blockquote>\n<p>假设第 550 页的  <code>D1</code>  类需要覆盖它继承而来的  <code>fcn</code>  函数，你应该如何对其进行修改？如果你修改之后  <code>fcn</code>  匹配了  <code>Base</code>  中的定义，则该节的那些调用语句将如何解析？</p>\n</blockquote>\n<p>解：</p>\n<p>移除  <code>int</code>  参数。</p>\n<h2 id=\"constructors-and-copy-control\"><a class=\"anchor\" href=\"#constructors-and-copy-control\">#</a> Constructors and Copy Control</h2>\n<hr />\n<h3 id=\"构造函数与拷贝控制\"><a class=\"anchor\" href=\"#构造函数与拷贝控制\">#</a> 构造函数与拷贝控制</h3>\n<h4 id=\"虚析构函数\"><a class=\"anchor\" href=\"#虚析构函数\">#</a> 虚析构函数</h4>\n<ul>\n<li>基类通常应该定义一个虚析构函数，这样我们就能动态分配继承体系中的对象了。</li>\n<li>如果基类的析构函数不是虚函数，则 <code>delete</code>  一个指向派生类对象的基类指针将产生未定义的行为。</li>\n<li>虚析构函数将阻止合成移动操作。</li>\n</ul>\n<h4 id=\"合成拷贝控制与继承\"><a class=\"anchor\" href=\"#合成拷贝控制与继承\">#</a> 合成拷贝控制与继承</h4>\n<ul>\n<li>基类或派生类的合成拷贝控制成员的行为和其他合成的构造函数、赋值运算符或析构函数类似：他们对类本身的成员依次进行初始化、赋值或销毁的操作。</li>\n</ul>\n<h4 id=\"派生类的拷贝控制成员\"><a class=\"anchor\" href=\"#派生类的拷贝控制成员\">#</a> 派生类的拷贝控制成员</h4>\n<ul>\n<li>当派生类定义了拷贝或移动操作时，该操作负责拷贝或移动包括基类部分成员在内的整个对象。</li>\n<li>派生类析构函数：派生类析构函数先执行，然后执行基类的析构函数。</li>\n</ul>\n<h4 id=\"继承的构造函数\"><a class=\"anchor\" href=\"#继承的构造函数\">#</a> 继承的构造函数</h4>\n<ul>\n<li>C++11 新标准中，派生类可以重用其直接基类定义的构造函数。</li>\n<li>如 <code>using Disc_quote::Disc_quote;</code> ，注明了要继承 <code>Disc_quote</code>  的构造函数。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1524\"><a class=\"anchor\" href=\"#exercise-1524\">#</a> Exercise 15.24</h3>\n<blockquote>\n<p>哪种类需要虚析构函数？虚析构函数必须执行什么样的操作？</p>\n</blockquote>\n<p>解：</p>\n<p>基类通常应该定义一个虚析构函数。</p>\n<h3 id=\"exercise-1525\"><a class=\"anchor\" href=\"#exercise-1525\">#</a> Exercise 15.25</h3>\n<blockquote>\n<p>我们为什么为  <code>Disc_quote</code>  定义一个默认构造函数？如果去掉该构造函数的话会对  <code>Bulk_quote</code>  的行为产生什么影响？</p>\n</blockquote>\n<p>解：</p>\n<p>因为 <code>Disc_quote</code>  的默认构造函数会运行 <code>Quote</code>  的默认构造函数，而 <code>Quote</code>  默认构造函数会完成成员的初始化工作。<br />\n如果去除掉该构造函数的话， <code>Bulk_quote</code>  的默认构造函数而无法完成 <code>Disc_quote</code>  的初始化工作。</p>\n<h3 id=\"exercise-1526\"><a class=\"anchor\" href=\"#exercise-1526\">#</a> Exercise 15.26</h3>\n<blockquote>\n<p>定义  <code>Quote</code>  和  <code>Bulk_quote</code>  的拷贝控制成员，令其与合成的版本行为一致。为这些成员以及其他构造函数添加打印状态的语句，使得我们能够知道正在运行哪个程序。使用这些类编写程序，预测程序将创建和销毁哪些对象。重复实验，不断比较你的预测和实际输出结果是否相同，直到预测完全准确再结束。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Quote</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Quote</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"default constructing Quote\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Quote : constructor taking 2 parameters\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>bookNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Quote: copy constructing\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>Quote<span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span> <span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>bookNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Quote: move constructing\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// copy =</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tQuote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tbookNo <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tprice <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Quote: copy =() \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// move =</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tQuote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Quote<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tbookNo <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>bookNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tprice <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Quote: move =!!!!!!!!! \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string     <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span>  <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destructing Quote\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">double</span>  price <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">inline</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>bookNo</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tlhs<span class=\"token punctuation\">.</span>price <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Bulk_quote</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulk_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Disc_quote</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"default constructing Bulk_quote\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> disc<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> disc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : constructor taking 4 parameters\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Bulk_quote<span class=\"token operator\">&amp;</span> bq<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>bq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : copy constructor\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span>Bulk_quote<span class=\"token operator\">&amp;&amp;</span> bq<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>bq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : move constructor\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// copy =()</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tBulk_quote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Bulk_quote<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tDisc_quote<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : copy =()\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// move =()</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tBulk_quote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Bulk_quote<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tDisc_quote<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : move =()\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">void</span>  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destructing Bulk_quote\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>程序输出结果：</p>\n<pre><code>default constructing Quote\ndefault constructing Disc_quote\ndefault constructing Bulk_quote\nQuote : constructor taking 2 parameters\nDisc_quote : constructor taking 4 parameters.\nBulk_quote : constructor taking 4 parameters\nQuote: copy constructing\nQuote: copy constructing\ndestructing Quote\ndestructing Quote\nDisc_quote : move =()\nBulk_quote : move =()\ndestructing Bulk_quote\ndestructing Dis_quote\ndestructing Quote\ndestructing Bulk_quote\ndestructing Dis_quote\ndestructing Quote\n</code></pre>\n<h3 id=\"exercise-1527\"><a class=\"anchor\" href=\"#exercise-1527\">#</a> Exercise 15.27</h3>\n<blockquote>\n<p>重新定义你的  <code>Bulk_quote</code>  类，令其继承构造函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulk_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Disc_quote</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"default constructing Bulk_quote\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// changed the below to the inherited constructor for ex15.27.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// rules:  1. only inherit from the direct base class.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//         2. default, copy and move constructors can not inherit.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//         3. any data members of its own are default initialized.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//         4. the rest details are in the section section 15.7.4.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tBulk_quote(const std::string&amp; b, double p, std::size_t q, double disc) :</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDisc_quote(b, p, q, disc) &#123; std::cout &lt;&lt; \"Bulk_quote : constructor taking 4 parameters\\n\"; &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">using</span> Disc_quote<span class=\"token double-colon punctuation\">::</span>Disc_quote<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Bulk_quote<span class=\"token operator\">&amp;</span> bq<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>bq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : copy constructor\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span>Bulk_quote<span class=\"token operator\">&amp;&amp;</span> bq<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Disc_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>bq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : move constructor\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// copy =()</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tBulk_quote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Bulk_quote<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tDisc_quote<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : copy =()\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// move =()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tBulk_quote<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Bulk_quote<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tDisc_quote<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote : move =()\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">void</span>  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destructing Bulk_quote\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"containers-and-inheritance\"><a class=\"anchor\" href=\"#containers-and-inheritance\">#</a> Containers and Inheritance</h2>\n<hr />\n<h3 id=\"容器与继承\"><a class=\"anchor\" href=\"#容器与继承\">#</a> 容器与继承</h3>\n<ul>\n<li>当我们使用容器存放继承体系中的对象时，通常必须采用间接存储的方式。</li>\n<li>派生类对象直接赋值给积累对象，其中的派生类部分会被切掉。</li>\n<li>在容器中放置（智能）指针而非对象。</li>\n<li>对于 C++ 面向对象的编程来说，一个悖论是我们无法直接使用对象进行面向对象编程。相反，我们必须使用指针和引用。因为指针会增加程序的复杂性，所以经常定义一些辅助的类来处理这些复杂的情况。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1528\"><a class=\"anchor\" href=\"#exercise-1528\">#</a> Exercise 15.28</h3>\n<blockquote>\n<p>定义一个存放  <code>Quote</code>  对象的  <code>vector</code> ，将  <code>Bulk_quote</code>  对象传入其中。计算  <code>vector</code>  中所有元素总的  <code>net_price</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"quote.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bulk_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"limit_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t* @brief ex15.28   outcome == 9090</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sss\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">10.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\ttotal <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> total <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"======================\\n\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t* @brief ex15.29   outccome == 6363</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">>></span> pv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Bulk_quote<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sss\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">10.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">double</span> total_p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">:</span> pv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\ttotal_p <span class=\"token operator\">+=</span> p<span class=\"token operator\">-></span><span class=\"token function\">net_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> total_p <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1529\"><a class=\"anchor\" href=\"#exercise-1529\">#</a> Exercise 15.29</h3>\n<blockquote>\n<p>再运行一次你的程序，这次传入  <code>Quote</code>  对象的  <code>shared_ptr</code>  。如果这次计算出的总额与之前的不一致，解释为什么；如果一直，也请说明原因。</p>\n</blockquote>\n<p>解：</p>\n<p>因为智能指针导致了多态性的产生，所以这次计算的总额不一致。</p>\n<h3 id=\"exercise-1530\"><a class=\"anchor\" href=\"#exercise-1530\">#</a> Exercise 15.30</h3>\n<blockquote>\n<p>编写你自己的  <code>Basket</code>  类，用它计算上一个练习中交易记录的总价格。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Basket h</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"quote.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 购物篮</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// a basket of objects from Quote hierachy, using smart pointers.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Basket</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// Basket 使用合成的默认构造函数和拷贝控制成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// copy verison</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Quote<span class=\"token operator\">&amp;</span> sale<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\titems<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>sale<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// move version</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>Quote<span class=\"token operator\">&amp;&amp;</span> sale<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\titems<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>sale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 打印每本书的总价和购物篮中所有书的总价</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">total_receipt</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// function to compare needed by the multiset member</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> lhs<span class=\"token operator\">-></span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> rhs<span class=\"token operator\">-></span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// hold multiple quotes, ordered by the compare member</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>multiset<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Quote<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\titems<span class=\"token punctuation\">&#123;</span> compare <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Basket cpp</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"basket.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token class-name\">Basket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">total_receipt</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存实时计算出的总价格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//iter 指向 ISBN 相同的一批元素中的第一个</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//upper_bound 返回一个迭代器，该迭代器指向这批元素的尾后位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\titer <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// @note   this increment moves iter to the first element with key</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//         greater than  *iter.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> <span class=\"token function\">print_total</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// ^^^^^^^^^^^^^ using count to fetch</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// the number of the same book.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total Sale: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>main</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"quote.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bulk_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"limit_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"disc_quote.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"basket.h\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tBasket basket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tbasket<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bible\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tbasket<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span><span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++Primer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tbasket<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLRS\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>ofstream <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.txt\"</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios_base<span class=\"token double-colon punctuation\">::</span>app <span class=\"token operator\">|</span> std<span class=\"token double-colon punctuation\">::</span>ios_base<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tbasket<span class=\"token punctuation\">.</span><span class=\"token function\">total_receipt</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"text-queries-revisited\"><a class=\"anchor\" href=\"#text-queries-revisited\">#</a> Text Queries Revisited</h2>\n<hr />\n<h3 id=\"文本查询程序再探\"><a class=\"anchor\" href=\"#文本查询程序再探\">#</a> 文本查询程序再探</h3>\n<ul>\n<li>使系统支持：单词查询、逻辑非查询、逻辑或查询、逻辑与查询。</li>\n</ul>\n<h4 id=\"面向对象的解决方案\"><a class=\"anchor\" href=\"#面向对象的解决方案\">#</a> 面向对象的解决方案</h4>\n<ul>\n<li>将几种不同的查询建模成相互独立的类，这些类共享一个公共基类：\n<ul>\n<li><code>WordQuery</code></li>\n<li><code>NotQuery</code></li>\n<li><code>OrQuery</code></li>\n<li><code>AndQuery</code></li>\n</ul>\n</li>\n<li>这些类包含两个操作：\n<ul>\n<li><code>eval</code> ：接受一个 <code>TextQuery</code>  对象并返回一个 <code>QueryResult</code> 。</li>\n<li><code>rep</code> ：返回基础查询的 <code>string</code>  表示形式。</li>\n</ul>\n</li>\n<li>继承和组合：\n<ul>\n<li>当我们令一个类公有地继承另一个类时，派生类应当反映与基类的 “是一种（Is A）” 的关系。</li>\n<li>类型之间另一种常见的关系是 “有一个（Has A）” 的关系。</li>\n</ul>\n</li>\n<li>对于面向对象编程的新手来说，想要理解一个程序，最困难的部分往往是理解程序的设计思路。一旦掌握了设计思路，接下来的实现也就水到渠成了。</li>\n</ul>\n<p><strong>Query 程序设计</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Query</code>  程序接口类和操作</td>\n<td></td>\n</tr>\n<tr>\n<td><code>TextQuery</code></td>\n<td>该类读入给定的文件并构建一个查找图。包含一个 <code>query</code>  操作，它接受一个 <code>string</code>  实参，返回一个 <code>QueryResult</code>  对象；该 <code>QueryResult</code>  对象表示 <code>string</code>  出现的行。</td>\n</tr>\n<tr>\n<td><code>QueryResult</code></td>\n<td>该类保存一个 <code>query</code>  操作的结果。</td>\n</tr>\n<tr>\n<td><code>Query</code></td>\n<td>是一个接口类，指向 <code>Query_base</code>  派生类的对象。</td>\n</tr>\n<tr>\n<td><code>Query q(s)</code></td>\n<td>将 <code>Query</code>  对象 <code>q</code>  绑定到一个存放着 <code>string s</code>  的新 <code>WordQuery</code>  对象上。</td>\n</tr>\n<tr>\n<td><code>q1 &amp; q2</code></td>\n<td>返回一个 <code>Query</code>  对象，该 <code>Query</code>  绑定到一个存放 <code>q1</code>  和 <code>q2</code>  的新 <code>AndQuery</code>  对象上。</td>\n</tr>\n<tr>\n<td><code>q1 | q2</code></td>\n<td>返回一个 <code>Query</code>  对象，该 <code>Query</code>  绑定到一个存放 <code>q1</code>  和 <code>q2</code>  的新 <code>OrQuery</code>  对象上。</td>\n</tr>\n<tr>\n<td><code>~q</code></td>\n<td>返回一个 <code>Query</code>  对象，该 <code>Query</code>  绑定到一个存放 <code>q</code>  的新 <code>NotQuery</code>  对象上。</td>\n</tr>\n<tr>\n<td><code>Query</code>  程序实现类</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Query_base</code></td>\n<td>查询类的抽象基类</td>\n</tr>\n<tr>\n<td><code>WordQuery</code></td>\n<td><code>Query_base</code>  的派生类，用于查找一个给定的单词</td>\n</tr>\n<tr>\n<td><code>NotQuery</code></td>\n<td><code>Query_base</code>  的派生类，用于查找一个给定的单词</td>\n</tr>\n<tr>\n<td><code>BinaryQuery</code></td>\n<td><code>Query_base</code>  的派生类，查询结果是 <code>Query</code>  运算对象没有出现的行的集合</td>\n</tr>\n<tr>\n<td><code>OrQuery</code></td>\n<td><code>Query_base</code>  的派生类，返回它的两个运算对象分别出现的行的并集</td>\n</tr>\n<tr>\n<td><code>AndQuery</code></td>\n<td><code>Query_base</code>  的派生类，返回它的两个运算对象分别出现的行的交集</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-1531\"><a class=\"anchor\" href=\"#exercise-1531\">#</a> Exercise 15.31</h3>\n<blockquote>\n<p>已知  <code>s1</code> 、 <code>s2</code> 、 <code>s3</code>  和  <code>s4</code>  都是  <code>string</code> ，判断下面的表达式分别创建了什么样的对象：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> OrQuery<span class=\"token punctuation\">,</span> AndQuery<span class=\"token punctuation\">,</span> NotQuery<span class=\"token punctuation\">,</span> <span class=\"token function\">WordQuery</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> OrQuery<span class=\"token punctuation\">,</span> AndQuery<span class=\"token punctuation\">,</span> NotQuery<span class=\"token punctuation\">,</span> <span class=\"token function\">WordQuery</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> OrQuery<span class=\"token punctuation\">,</span> AndQuery<span class=\"token punctuation\">,</span> WordQuery</pre></td></tr></table></figure><h3 id=\"exercise-1532\"><a class=\"anchor\" href=\"#exercise-1532\">#</a> Exercise 15.32</h3>\n<blockquote>\n<p>当一个  <code>Query</code>  类型的对象被拷贝、移动、赋值或销毁时，将分别发生什么？</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li><strong>拷贝</strong>：当被拷贝时，合成的拷贝构造函数被调用。它将拷贝两个数据成员至新的对象。而在这种情况下，数据成员是一个智能指针，当拷贝时，相应的智能指针指向相同的地址，计数器增加 1.</li>\n<li><strong>移动</strong>：当移动时，合成的移动构造函数被调用。它将移动数据成员至新的对象。这时新对象的智能指针将会指向原对象的地址，而原对象的智能指针为  <code>nullptr</code> ，新对象的智能指针的引用计数为 1。</li>\n<li><strong>赋值</strong>：合成的赋值运算符被调用，结果和拷贝的相同的。</li>\n<li><strong>销毁</strong>：合成的析构函数被调用。对象的智能指针的引用计数递减，当引用计数为 0 时，对象被销毁。</li>\n</ul>\n<h3 id=\"exercise-1533\"><a class=\"anchor\" href=\"#exercise-1533\">#</a> Exercise 15.33</h3>\n<blockquote>\n<p>当一个  <code>Query_base</code>  类型的对象被拷贝、移动赋值或销毁时，将分别发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>由合成的版本来控制。然而  <code>Query_base</code>  是一个抽象类，它的对象实际上是它的派生类对象。</p>\n<h3 id=\"exercise-1534\"><a class=\"anchor\" href=\"#exercise-1534\">#</a> Exercise 15.34</h3>\n<blockquote>\n<p>针对图 15.3 构建的表达式：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> 例举出在处理表达式的过程中执行的所有构造函数。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> 例举出 cout <span class=\"token operator\">&lt;&lt;</span> q 所调用的 rep。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 例举出 q<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 所调用的 eval。</pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li><strong>a</strong>：  <code>Query q = Query(&quot;fiery&quot;) &amp; Query(&quot;bird&quot;) | Query(&quot;wind&quot;);</code></li>\n</ul>\n<ol>\n<li><code>Query::Query(const std::string&amp; s)</code>  where s == &quot;fiery&quot;,&quot;bird&quot; and &quot;wind&quot;</li>\n<li><code>WordQuery::WordQuery(const std::string&amp; s)</code>  where s == &quot;fiery&quot;,&quot;bird&quot; and &quot;wind&quot;</li>\n<li><code>AndQuery::AndQuery(const Query&amp; left, const Query&amp; right);</code></li>\n<li><code>BinaryQuery(const Query&amp;l, const Query&amp; r, std::string s);</code></li>\n<li><code>Query::Query(std::shared_ptr&lt;Query_base&gt; query)</code>  2times</li>\n<li><code>OrQuery::OrQuery(const Query&amp; left, const Query&amp; right);</code></li>\n<li><code>BinaryQuery(const Query&amp;l, const Query&amp; r, std::string s);</code></li>\n<li><code>Query::Query(std::shared_ptr&lt;Query_base&gt; query)</code>  2times</li>\n</ol>\n<ul>\n<li><strong>b</strong>：</li>\n</ul>\n<ol>\n<li><code>query.rep()</code>  inside the operator &lt;&lt;().</li>\n<li><code>q-&gt;rep()</code>  inside the member function rep().</li>\n<li><code>OrQuery::rep()</code>  which is inherited from  <code>BinaryQuery</code> .</li>\n<li><code>Query::rep()</code>  for  <code>lhs</code>  and  <code>rhs</code> :<br />\nfor  <code>rhs</code>  which is a  <code>WordQuery</code>  :  <code>WordQuery::rep()</code>  where  <code>query_word(&quot;wind&quot;)</code>  is returned.For  <code>lhs</code>  which is an  <code>AndQuery</code> .</li>\n<li><code>AndQuery::rep()</code>  which is inherited from  <code>BinaryQuery</code> .</li>\n<li><code>BinaryQuer::rep()</code> : for  <code>rhs: WordQuery::rep()</code>    where query_word(&quot;fiery&quot;) is returned. For  <code>lhs: WordQuery::rep()</code>  where query_word(&quot;bird&quot; ) is returned.</li>\n</ol>\n<ul>\n<li><strong>c</strong>：</li>\n</ul>\n<ol>\n<li><code>q.eval()</code></li>\n<li><code>q-&gt;rep()</code> : where q is a pointer to  <code>OrQuary</code> .</li>\n<li><code>QueryResult eval(const TextQuery&amp; )const override</code> : is called but this one has not been defined yet.</li>\n</ol>\n<h3 id=\"exercise-1535\"><a class=\"anchor\" href=\"#exercise-1535\">#</a> Exercise 15.35</h3>\n<blockquote>\n<p>实现  <code>Query</code>  类和  <code>Query_base</code>  类，其中需要定义 <code>rep</code>  而无须定义  <code>eval</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Query</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QUERY_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUERY_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"query_base.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"queryresult.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"textquery.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"wordquery.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>* @brief interface class to manage the Query_base inheritance hierachy</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Query <span class=\"token keyword\">operator</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Query <span class=\"token keyword\">operator</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Query <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// build a new WordQuery</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">WordQuery</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Query::Query(const std::string&amp; s) where s=\"</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// interface functions: call the corresponding Query_base operatopns</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tQueryResult <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TextQuery<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> q<span class=\"token operator\">-></span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Query::rep() \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> q<span class=\"token operator\">-></span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// constructor only for friends</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Query_base<span class=\"token operator\">></span> query<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">q</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Query::Query(std::shared_ptr&lt;Query_base> query)\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Query_base<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">inline</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Query<span class=\"token operator\">&amp;</span> query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// make a virtual call through its Query_base pointer to rep();</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> os <span class=\"token operator\">&lt;&lt;</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// QUERY_H</span></span></pre></td></tr></table></figure><p><code>Query_base</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QUERY_BASE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUERY_BASE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"textquery.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"queryresult.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* @brief abstract class acts as a base class for all concrete query types</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*        all members are private.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Query_base</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">using</span> line_no <span class=\"token operator\">=</span> TextQuery<span class=\"token double-colon punctuation\">::</span>line_no<span class=\"token punctuation\">;</span> <span class=\"token comment\">//  used in the eval function</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Query_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// returns QueryResult that matches this query</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> QueryResult <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TextQuery<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// a string representation of this query</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// QUERY_BASE_H</span></span></pre></td></tr></table></figure><h3 id=\"exercise-1536\"><a class=\"anchor\" href=\"#exercise-1536\">#</a> Exercise 15.36</h3>\n<blockquote>\n<p>在构造函数和  <code>rep</code>  成员中添加打印语句，运行你的代码以检验你对本节第一个练习中 (a)、(b) 两小题的回答是否正确。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Query q <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fiery\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">WordQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WordQuery</span><span class=\"token punctuation\">(</span>wind<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> where s<span class=\"token operator\">=</span>wind</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">WordQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WordQuery</span><span class=\"token punctuation\">(</span>bird<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> where s<span class=\"token operator\">=</span>bird</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">WordQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WordQuery</span><span class=\"token punctuation\">(</span>fiery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> where s<span class=\"token operator\">=</span>fiery</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">BinaryQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BinaryQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  where s<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">AndQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AndQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Query_base<span class=\"token operator\">></span> query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">BinaryQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BinaryQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  where s<span class=\"token operator\">=</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>OrQuery<span class=\"token double-colon punctuation\">::</span>OrQuery</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Query_base<span class=\"token operator\">></span> query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Press <span class=\"token operator\">&lt;</span>RETURN<span class=\"token operator\">></span> to close <span class=\"token keyword\">this</span> window<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> q <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">BinaryQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">WodQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">BinaryQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">WodQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Query</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">WodQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fiery <span class=\"token operator\">&amp;</span> bird<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> wind<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Press <span class=\"token operator\">&lt;</span>RETURN<span class=\"token operator\">></span> to close <span class=\"token keyword\">this</span> window<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"exercise-1537\"><a class=\"anchor\" href=\"#exercise-1537\">#</a> Exercise 15.37</h3>\n<blockquote>\n<p>如果在派生类中含有  <code>shared_ptr&lt;Query_base&gt;</code>  类型的成员而非  <code>Query</code>  类型的成员，则你的类需要做出怎样的改变？</p>\n</blockquote>\n<p>解：</p>\n<p>参考 15.35。</p>\n<h3 id=\"exercise-1538\"><a class=\"anchor\" href=\"#exercise-1538\">#</a> Exercise 15.38</h3>\n<blockquote>\n<p>下面的声明合法吗？如果不合法，请解释原因；如果合法，请指出该声明的含义。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BinaryQuery a <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fiery\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>AndQuery b <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fiery\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>OrQuery c <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fiery\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ol>\n<li>不合法。因为  <code>BinaryQuery</code>  是抽象类。</li>\n<li>不合法。 <code>&amp;</code>  操作返回的是一个  <code>Query</code>  对象。</li>\n<li>不合法。 <code>&amp;</code>  操作返回的是一个  <code>Query</code>  对象。</li>\n</ol>\n<h3 id=\"exercise-1539\"><a class=\"anchor\" href=\"#exercise-1539\">#</a> Exercise 15.39</h3>\n<blockquote>\n<p>实现  <code>Query</code>  类和　 <code>Query_base</code>  类，求图 15.3 中表达式的值并打印相关信息，验证你的程序是否正确。</p>\n</blockquote>\n<h3 id=\"exercise-1540\"><a class=\"anchor\" href=\"#exercise-1540\">#</a> Exercise 15.40</h3>\n<blockquote>\n<p>在  <code>OrQuery</code>  的  <code>eval</code>  函数中，如果  <code>rhs</code>  成员返回的是空集将发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>不会发生什么。代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">>></span> ret_lines <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果  <code>rhs</code>  成员返回的是空集，在  <code>set</code>  当中不会添加什么。</p>\n<h3 id=\"exercise-1541\"><a class=\"anchor\" href=\"#exercise-1541\">#</a> Exercise 15.41</h3>\n<blockquote>\n<p>重新实现你的类，这次使用指向  <code>Query_base</code>  的内置指针而非  <code>shared_ptr</code> 。请注意，做出上述改动后你的类将不能再使用合成的拷贝控制成员。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1542\"><a class=\"anchor\" href=\"#exercise-1542\">#</a> Exercise 15.42</h3>\n<blockquote>\n<p>从下面的几种改进中选择一种，设计并实现它:</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> 按句子查询并打印单词，而不再是按行打印。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> 引入一个历史系统，用户可以按编号查阅之前的某个查询，并可以在其中添加内容或者将其余其他查询组合。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 允许用户对结果做出限制，比如从给定范围的行中跳出匹配的进行显示。</pre></td></tr></table></figure><p>解：</p>\n<p>略</p>\n<h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/06/cpp/cpp-primer/Chapter%2014%20Overloaded%20Operations%20and%20Conversions/",
            "url": "http://sakupinera.github.io/2023/01/06/cpp/cpp-primer/Chapter%2014%20Overloaded%20Operations%20and%20Conversions/",
            "title": "C++ Primer - Chapter 14 Overloaded Operations and Conversions",
            "date_published": "2023-01-05T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-14-overloaded-operations-and-conversions\"><a class=\"anchor\" href=\"#chapter-14-overloaded-operations-and-conversions\">#</a> Chapter 14 Overloaded Operations and Conversions</h1>\n<h2 id=\"basic-concepts\"><a class=\"anchor\" href=\"#basic-concepts\">#</a> Basic Concepts</h2>\n<hr />\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<ul>\n<li>重载运算符是具有特殊名字的函数：由关键字 <code>operator</code>  和其后要定义的运算符号共同组成。</li>\n<li>当一个重载的运算符是成员函数时， <code>this</code>  绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量<strong>少一个</strong>。</li>\n<li>只能重载大多数的运算符，而不能发明新的运算符号。</li>\n<li>重载运算符的优先级和结合律跟对应的内置运算符保持一致。</li>\n<li>调用方式：\n<ul>\n<li><code>data1 + data2;</code></li>\n<li><code>operator+(data1, data2);</code></li>\n</ul>\n</li>\n<li>是否是成员函数：\n<ul>\n<li>赋值（ <code>=</code> ）、下标（ <code>[]</code> ）、调用（ <code>()</code> ）和成员访问箭头（ <code>-&gt;</code> ）运算符必须是成员。</li>\n<li>复合赋值运算符一般来说是成员。</li>\n<li>改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。</li>\n<li>具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。</li>\n</ul>\n</li>\n</ul>\n<p><strong>运算符</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>可以被重载</th>\n<th>不可以被重载</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code> ,  <code>-</code> ,  <code>*</code> ,  <code>/</code> ,  <code>%</code> ,  <code>^</code></td>\n<td><code>::</code> ,  <code>.*</code> ,  <code>.</code> ,  <code>? :</code> ,</td>\n</tr>\n<tr>\n<td><code>&amp;</code> ,  <code>|</code> ,  <code>~</code> ,  <code>!</code> ,  <code>,</code> ,  <code>=</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>&lt;</code> ,  <code>&gt;</code> ,  <code>&lt;=</code> ,  <code>&gt;=</code> ,  <code>++</code> ,  <code>--</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code> ,  <code>&gt;&gt;</code> ,  <code>==</code> ,  <code>!=</code> ,  <code>&amp;&amp;</code> ,  <code>||</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>+=</code> ,  <code>-=</code> ,  <code>/=</code> ,  <code>%=</code> ,  <code>^=</code> ,  <code>&amp;=</code></td>\n<td></td>\n</tr>\n<tr>\n<td>|=,  <code>*=</code> ,  <code>&lt;&lt;=</code> ,  <code>&gt;&gt;=</code> ,  <code>[]</code> ,  <code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>-&gt;</code> ,  <code>-&gt;*</code> ,  <code>new</code> ,  <code>new[]</code> ,  <code>delete</code> ,  <code>delete[]</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-141\"><a class=\"anchor\" href=\"#exercise-141\">#</a> Exercise 14.1</h3>\n<blockquote>\n<p>在什么情况下重载的运算符与内置运算符有所区别？在什么情况下重载的运算符又与内置运算符一样？</p>\n</blockquote>\n<p>解：</p>\n<p>我们可以直接调用重载运算符函数。重置运算符与内置运算符有一样的优先级与结合性。</p>\n<h3 id=\"exercise-142\"><a class=\"anchor\" href=\"#exercise-142\">#</a> Exercise 14.2</h3>\n<blockquote>\n<p>为  <code>Sales_data</code>  编写重载的输入、输出、加法和复合赋值运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// input</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">friend</span> Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// addition</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Sales_data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// compound-assignment</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> units_sold <span class=\"token operator\">?</span> revenue<span class=\"token operator\">/</span>units_sold <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_02.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    is <span class=\"token operator\">>></span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Sales_data<span class=\"token operator\">&amp;</span> Sales_data<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    units_sold <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    revenue <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    is <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">>></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        item<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        item <span class=\"token operator\">=</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    os <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Sales_data sum <span class=\"token operator\">=</span> lhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    sum <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-143\"><a class=\"anchor\" href=\"#exercise-143\">#</a> Exercise 14.3</h3>\n<blockquote>\n<p><code>string</code>  和  <code>vector</code>  都定义了重载的 <code>==</code>  以比较各自的对象，假设  <code>svec1</code>  和  <code>svec2</code>  是存放  <code>string</code>  的  <code>vector</code> ，确定在下面的表达式中分别使用了哪个版本的 <code>==</code> ？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token string\">\"cobble\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"stone\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> svec1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> svec2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> svec1 <span class=\"token operator\">==</span> <span class=\"token function\">svec2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> svec1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"stone\"</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 都不是。</li>\n<li>(b)  <code>string</code></li>\n<li>(c)  <code>vector</code></li>\n<li>(d)  <code>string</code></li>\n</ul>\n<h3 id=\"exercise-144\"><a class=\"anchor\" href=\"#exercise-144\">#</a> Exercise 14.4</h3>\n<blockquote>\n<p>如何确定下列运算符是否应该是类的成员？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 不需要是成员。</li>\n<li>(b) 是成员。</li>\n<li>(c) 是成员。</li>\n<li>(d) 必须是成员。</li>\n<li>(e) 不需要是成员。</li>\n<li>(f) 不需要是成员。</li>\n<li>(g) 不需要是成员。</li>\n<li>(h) 必须是成员。</li>\n</ul>\n<h3 id=\"exercise-145\"><a class=\"anchor\" href=\"#exercise-145\">#</a> Exercise 14.5</h3>\n<blockquote>\n<p>在 7.5.1 节中的练习 7.40 中，编写了下列类中某一个的框架，请问在这个类中应该定义重载的运算符吗？如果是，请写出来。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">Book</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">Date</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">Employee</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token function\">Vehicle</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token function\">Object</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> Tree</pre></td></tr></table></figure><p>解：</p>\n<p><code>Book</code> ，应该重载。</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> no<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string author<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string pubdate<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">no_</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">name_</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">author_</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pubdate_</span><span class=\"token punctuation\">(</span>pubdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> in <span class=\"token operator\">>></span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> no_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string author_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string pubdate_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_5.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">,</span> Book <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tin <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>author_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>pubdate_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tbook <span class=\"token operator\">=</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>author_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>pubdate_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>no_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_5.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBook <span class=\"token function\">book1</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lippman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2012\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tBook <span class=\"token function\">book2</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lippman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2012\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>book1 <span class=\"token operator\">==</span> book2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> book1 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"input-and-output-operators\"><a class=\"anchor\" href=\"#input-and-output-operators\">#</a> Input and Output Operators</h2>\n<hr />\n<h3 id=\"输入和输出运算符\"><a class=\"anchor\" href=\"#输入和输出运算符\">#</a> 输入和输出运算符</h3>\n<h4 id=\"重载输出运算符\"><a class=\"anchor\" href=\"#重载输出运算符\">#</a> 重载输出运算符 &lt;&lt;</h4>\n<ul>\n<li>第一个形参通常是一个非常量的 <code>ostream</code>  对象的引用。非常量是因为向流中写入会改变其状态；而引用是因为我们无法复制一个 <code>ostream</code>  对象。</li>\n<li>输入输出运算符必须是非成员函数。</li>\n</ul>\n<h4 id=\"重载输入运算符\"><a class=\"anchor\" href=\"#重载输入运算符\">#</a> 重载输入运算符 &gt;&gt;</h4>\n<ul>\n<li>第一个形参通常是运算符将要读取的流的引用，第二个形参是将要读取到的（非常量）对象的引用。</li>\n<li>输入运算符必须处理输入可能失败的情况，而输出运算符不需要。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-146\"><a class=\"anchor\" href=\"#exercise-146\">#</a> Exercise 14.6</h3>\n<blockquote>\n<p>为你的  <code>Sales_data</code>  类定义输出运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.2。</p>\n<h3 id=\"exercise-147\"><a class=\"anchor\" href=\"#exercise-147\">#</a> Exercise 14.7</h3>\n<blockquote>\n<p>你在 13.5 节的练习中曾经编写了一个 <code>String</code>  类，为它定义一个输出运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tsize_t <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> elements <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>allocator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_7.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> str <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newstr <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\telements <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tend <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sl <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token operator\">++</span>sl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>sl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy constructor\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>String<span class=\"token operator\">&amp;</span> String<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newstr <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\telements <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tend <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy-assignment\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_7.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-148\"><a class=\"anchor\" href=\"#exercise-148\">#</a> Exercise 14.8</h3>\n<blockquote>\n<p>你在 7.5.1 节中的练习中曾经选择并编写了一个类，为它定义一个输出运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.5。</p>\n<h3 id=\"exercise-149\"><a class=\"anchor\" href=\"#exercise-149\">#</a> Exercise 14.9</h3>\n<blockquote>\n<p>为你的  <code>Sales_data</code>  类定义输入运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.2。</p>\n<h3 id=\"exercise-1410\"><a class=\"anchor\" href=\"#exercise-1410\">#</a> Exercise 14.10</h3>\n<blockquote>\n<p>对于  <code>Sales_data</code>  的输入运算符来说如果给定了下面的输入将发生什么情况？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">201</span><span class=\"token operator\">-</span><span class=\"token number\">99999</span><span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token number\">10</span> <span class=\"token number\">24.95</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token number\">10</span> <span class=\"token number\">24.95</span> <span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">210</span><span class=\"token operator\">-</span><span class=\"token number\">99999</span><span class=\"token operator\">-</span><span class=\"token number\">9</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 格式正确。</li>\n<li>(b) 不合法的输入。因为程序试图将  <code>0-210-99999-9</code>  转换为  <code>float</code> 。</li>\n</ul>\n<h3 id=\"exercise-1411\"><a class=\"anchor\" href=\"#exercise-1411\">#</a> Exercise 14.11</h3>\n<blockquote>\n<p>下面的  <code>Sales_data</code>  输入运算符存在错误吗？如果有，请指出来。对于这个输入运算符如果仍然给定上个练习的输入将会发生什么情况？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">>></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts<span class=\"token punctuation\">.</span>revence <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">>></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>没有输入检查，什么也不会发生。</p>\n<h3 id=\"exercise-1412\"><a class=\"anchor\" href=\"#exercise-1412\">#</a> Exercise 14.12</h3>\n<blockquote>\n<p>你在 7.5.1 节的练习中曾经选择并编写了一个类，为它定义一个输入运算符并确保该运算符可以处理输入错误。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.5。</p>\n<h2 id=\"arithmetic-and-relational-operators\"><a class=\"anchor\" href=\"#arithmetic-and-relational-operators\">#</a> Arithmetic and Relational Operators</h2>\n<hr />\n<h3 id=\"算数和关系运算符-\"><a class=\"anchor\" href=\"#算数和关系运算符-\">#</a> 算数和关系运算符（+、-、*、/）</h3>\n<ul>\n<li>如果类同时定义了算数运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算数运算符。</li>\n</ul>\n<h4 id=\"相等运算符\"><a class=\"anchor\" href=\"#相等运算符\">#</a> 相等运算符 ==</h4>\n<ul>\n<li>如果定义了 <code>operator==</code> ，则这个类也应该定义 <code>operator!=</code> 。</li>\n<li>相等运算符和不等运算符的一个应该把工作委托给另一个。</li>\n<li>相等运算符应该具有传递性。</li>\n<li>如果某个类在逻辑上有相等性的含义，则该类应该定义 <code>operator==</code> ，这样做可以使用户更容易使用标准库算法来处理这个类。</li>\n</ul>\n<h4 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h4>\n<ul>\n<li>如果存在唯一一种逻辑可靠的 <code>&lt;</code>  定义，则应该考虑为这个类定义 <code>&lt;</code>  运算符。如果同时还包含 <code>==</code> ，则当且晋档 <code>&lt;</code>  的定义和 <code>++</code>  产生的结果一直时才定义 <code>&lt;</code>  运算符。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1413\"><a class=\"anchor\" href=\"#exercise-1413\">#</a> Exercise 14.13</h3>\n<blockquote>\n<p>你认为  <code>Sales_data</code>  类还应该支持哪些其他算术运算符？如果有的话，请给出它们的定义。</p>\n</blockquote>\n<p>解：</p>\n<p>没有其他了。</p>\n<h3 id=\"exercise-1414\"><a class=\"anchor\" href=\"#exercise-1414\">#</a> Exercise 14.14</h3>\n<blockquote>\n<p>你觉得为什么调用  <code>operator+=</code>  来定义 <code>operator+</code>  比其他方法更有效？</p>\n</blockquote>\n<p>解：</p>\n<p>因为用  <code>operator+=</code>  会避免使用一个临时对象，而使得更有效。</p>\n<h3 id=\"exercise-1415\"><a class=\"anchor\" href=\"#exercise-1415\">#</a> Exercise 14.15</h3>\n<blockquote>\n<p>你在 7.5.1 节的练习 7.40 中曾经选择并编写了一个类，你认为它应该含有其他算术运算符吗？如果是，请实现它们；如果不是，解释原因。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Book <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> no<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string author<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string pubdate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> number<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">no_</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">name_</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">author_</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pubdate_</span><span class=\"token punctuation\">(</span>pubdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">number_</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> in <span class=\"token operator\">>></span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tBook<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> no_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string author_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string pubdate_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> number_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Book <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_15.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">,</span> Book <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tin <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>author_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>pubdate_ <span class=\"token operator\">>></span> book<span class=\"token punctuation\">.</span>number_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>author_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>pubdate_ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token punctuation\">.</span>number_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>no_ <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>no_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">no_</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>no_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> rhs <span class=\"token operator\">&lt;</span> lhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Book<span class=\"token operator\">&amp;</span> Book<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rhs <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>number_ <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>number_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Book <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Book <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tBook book <span class=\"token operator\">=</span> lhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tbook <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_15.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBook <span class=\"token function\">cp5_1</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lippmen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2012\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tBook <span class=\"token function\">cp5_2</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lippmen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2012\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> cp5_1 <span class=\"token operator\">+</span> cp5_2 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1416\"><a class=\"anchor\" href=\"#exercise-1416\">#</a> Exercise 14.16</h3>\n<blockquote>\n<p>为你的  <code>StrBlob</code>  类、 <code>StrBlobPtr</code>  类、 <code>StrVec</code>  类和  <code>String</code>  类分别定义相等运算符和不相等运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1417\"><a class=\"anchor\" href=\"#exercise-1417\">#</a> Exercise 14.17</h3>\n<blockquote>\n<p>你在 7.5.1 节中的练习 7.40 中曾经选择并编写了一个类，你认为它应该含有相等运算符吗？如果是，请实现它；如果不是，解释原因。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.15。</p>\n<h3 id=\"exercise-1418\"><a class=\"anchor\" href=\"#exercise-1418\">#</a> Exercise 14.18</h3>\n<blockquote>\n<p>为你的  <code>StrBlob</code>  类、 <code>StrBlobPtr</code>  类、 <code>StrVec</code>  类和  <code>String</code>  类分别定义关系运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1419\"><a class=\"anchor\" href=\"#exercise-1419\">#</a> Exercise 14.19</h3>\n<blockquote>\n<p>你在 7.5.1 节的练习 7.40 中曾经选择并编写了一个类，你认为它应该含有关系运算符吗？如果是，请实现它；如果不是，解释原因。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.15。</p>\n<h2 id=\"assignment-operators\"><a class=\"anchor\" href=\"#assignment-operators\">#</a> Assignment Operators</h2>\n<hr />\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符 =</h3>\n<ul>\n<li>我们可以重载赋值运算符。不论形参的类型是什么，赋值运算符都必须定义为成员函数。</li>\n<li>赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做。这两类运算符都应该返回左侧运算对象的引用。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1420\"><a class=\"anchor\" href=\"#exercise-1420\">#</a> Exercise 14.20</h3>\n<blockquote>\n<p>为你的  <code>Sales_data</code>  类定义加法和复合赋值运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.2。</p>\n<h3 id=\"exercise-1421\"><a class=\"anchor\" href=\"#exercise-1421\">#</a> Exercise 14.21</h3>\n<blockquote>\n<p>编写  <code>Sales_data</code>  类的 <code>+</code>  和 <code>+=</code>  运算符，使得  <code>+</code>  执行实际的加法操作而  <code>+=</code>  调用 <code>+</code> 。相比 14.3 节和 14.4 节对这两个运算符的定义，本题的定义有何缺点？试讨论之。</p>\n</blockquote>\n<p>解：</p>\n<p>缺点：使用了一个  <code>Sales_data</code>  的临时对象，但它并不是必须的。</p>\n<h3 id=\"exercise-1422\"><a class=\"anchor\" href=\"#exercise-1422\">#</a> Exercise 14.22</h3>\n<blockquote>\n<p>定义赋值运算符的一个新版本，使得我们能把一个表示  <code>ISBN</code>  的  <code>string</code>  赋给一个  <code>Sales_data</code>  对象。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales_data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tSales_data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tSales_data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> units_sold <span class=\"token operator\">?</span> revenue <span class=\"token operator\">/</span> units_sold <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_22.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tis <span class=\"token operator\">>></span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Sales_data<span class=\"token operator\">&amp;</span> Sales_data<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tunits_sold <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\trevenue <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tis <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">>></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\titem<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\titem <span class=\"token operator\">=</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tSales_data sum <span class=\"token operator\">=</span> lhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tsum <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Sales_data<span class=\"token operator\">&amp;</span> Sales_data<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>isbn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>isbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_4_22.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strCp5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++ Primer 5th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tSales_data cp5 <span class=\"token operator\">=</span> strCp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> cp5 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1423\"><a class=\"anchor\" href=\"#exercise-1423\">#</a> Exercise 14.23</h3>\n<blockquote>\n<p>为你的 <code>StrVec</code>  类定义一个  <code>initializer_list</code>  赋值运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_MSC_VER</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NOEXCEPT</span> <span class=\"token expression\"><span class=\"token keyword\">noexcept</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NOEXCEPT</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrVec</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">first_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tStrVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>StrVec<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> NOEXCEPT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tStrVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>StrVec<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span>NOEXCEPT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tStrVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tsize_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> cap <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">at</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>elements <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">at</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>elements <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>first_free<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>allocator<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_23.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> first_free<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> cap <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newdata <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\telements <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> il<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>StrVec<span class=\"token operator\">&amp;</span> StrVec<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\telements <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newdata <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">auto</span> dest <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">auto</span> elem <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>dest<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>elem<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\telements <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tfirst_free <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tcap <span class=\"token operator\">=</span> elements <span class=\"token operator\">+</span> new_cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newcapacity <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_cap <span class=\"token operator\">&lt;=</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_free <span class=\"token operator\">!=</span> elements <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>first_free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>StrVec <span class=\"token operator\">&amp;&amp;</span>s<span class=\"token punctuation\">)</span> NOEXCEPT <span class=\"token operator\">:</span> <span class=\"token function\">elements</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">first_free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>first_free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>cap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// leave s in a state in which it is safe to run the destructor.</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\ts<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>first_free <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>StrVec<span class=\"token operator\">&amp;</span> StrVec<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>StrVec <span class=\"token operator\">&amp;&amp;</span>rhs<span class=\"token punctuation\">)</span> NOEXCEPT</pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\telements <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tfirst_free <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>first_free<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tcap <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\trhs<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>first_free <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">lexicographical_compare</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">return</span> rhs <span class=\"token operator\">&lt;</span> lhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>rhs <span class=\"token operator\">&lt;</span> lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>StrVec<span class=\"token operator\">&amp;</span> StrVec<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_23.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tStrVec vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity(reserve to 6): \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity(reserve to 4): \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-EOF-\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-EOF-\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tStrVec vec_list<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pezy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> vec_list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> vec_list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// Test operator==</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">const</span> StrVec const_vec_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pezy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vec_list <span class=\"token operator\">==</span> const_vec_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>str <span class=\"token operator\">:</span> const_vec_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// Test operator&lt;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">const</span> StrVec const_vec_list_small <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ok\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>const_vec_list_small <span class=\"token operator\">&lt;</span> const_vec_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1424\"><a class=\"anchor\" href=\"#exercise-1424\">#</a> Exercise 14.24</h3>\n<blockquote>\n<p>你在 7.5.1 节的练习 7.40 中曾经选择并编写了一个类，你认为它应该含有拷贝赋值和移动赋值运算符吗？如果是，请实现它们。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">DATE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_MSC_VER</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NOEXCEPT</span> <span class=\"token expression\"><span class=\"token keyword\">noexcept</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NOEXCEPT</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">friend</span>  <span class=\"token keyword\">bool</span>            <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">friend</span>  <span class=\"token keyword\">bool</span>            <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span>  <span class=\"token keyword\">bool</span>            <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">friend</span>  std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span>   <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>size_t Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// default constructor</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// constructor taking Size as days</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Size days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// constructor taking three Size</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Size d<span class=\"token punctuation\">,</span> Size m<span class=\"token punctuation\">,</span> Size y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// constructor taking iostream</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token operator\">&amp;&amp;</span> d<span class=\"token punctuation\">)</span> NOEXCEPT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// copy operator=</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// move operator=</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Date<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> NOEXCEPT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// destructor  --  in this case, user-defined destructor is not nessary.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroying\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// members</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tSize <span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//not implemented yet.</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>Size offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>Size offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tSize    day <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tSize    month <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tSize    year <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> Date<span class=\"token double-colon punctuation\">::</span>Size YtoD_400 <span class=\"token operator\">=</span> <span class=\"token number\">146097</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//365*400 + 400/4 -3 == 146097</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> Date<span class=\"token double-colon punctuation\">::</span>Size YtoD_100 <span class=\"token operator\">=</span> <span class=\"token number\">36524</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//365*100 + 100/4 -1 ==  36524</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> Date<span class=\"token double-colon punctuation\">::</span>Size YtoD_4 <span class=\"token operator\">=</span> <span class=\"token number\">1461</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//365*4 + 1          ==   1461</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> Date<span class=\"token double-colon punctuation\">::</span>Size YtoD_1 <span class=\"token operator\">=</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//365</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// normal year</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Date<span class=\"token double-colon punctuation\">::</span>Size<span class=\"token operator\">></span> monthsVec_n <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// leap year</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Date<span class=\"token double-colon punctuation\">::</span>Size<span class=\"token operator\">></span> monthsVec_l <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// non-member operators:  &lt;&lt;  >>  -   ==  !=  &lt;   &lt;=  >   >=</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">operator</span>  <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Date</pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> Date<span class=\"token double-colon punctuation\">::</span>Size  rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Date</pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">operator</span>  <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> Date<span class=\"token double-colon punctuation\">::</span>Size  rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">//  utillities:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span>Date<span class=\"token double-colon punctuation\">::</span>Size y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token comment\">// check if the date object passed in is valid</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">></span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token comment\">//    month == 1 3 5 7 8 10 12</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\td<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">8</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token comment\">//    month == 4 6 9 11</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">9</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//    month == 2</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">></span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">></span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span>Date<span class=\"token double-colon punctuation\">::</span>Size y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">%</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// DATE_H</span></span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_24.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// constructor taking Size as days</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// the argument must be within (0, 2^32)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Size days<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// calculate the year</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tSize y400 <span class=\"token operator\">=</span> days <span class=\"token operator\">/</span> YtoD_400<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tSize y100 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>days <span class=\"token operator\">-</span> y400<span class=\"token operator\">*</span>YtoD_400<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> YtoD_100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tSize y4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>days <span class=\"token operator\">-</span> y400<span class=\"token operator\">*</span>YtoD_400 <span class=\"token operator\">-</span> y100<span class=\"token operator\">*</span>YtoD_100<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> YtoD_4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tSize y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>days <span class=\"token operator\">-</span> y400<span class=\"token operator\">*</span>YtoD_400 <span class=\"token operator\">-</span> y100<span class=\"token operator\">*</span>YtoD_100 <span class=\"token operator\">-</span> y4<span class=\"token operator\">*</span>YtoD_4<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tSize d <span class=\"token operator\">=</span> days <span class=\"token operator\">-</span> y400<span class=\"token operator\">*</span>YtoD_400 <span class=\"token operator\">-</span> y100<span class=\"token operator\">*</span>YtoD_100 <span class=\"token operator\">-</span> y4<span class=\"token operator\">*</span>YtoD_4 <span class=\"token operator\">-</span> y <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">=</span> y400 <span class=\"token operator\">*</span> <span class=\"token number\">400</span> <span class=\"token operator\">+</span> y100 <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> y4 <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// check if leap and choose the months vector accordingly</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Size<span class=\"token operator\">></span>currYear</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token operator\">=</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> monthsVec_l <span class=\"token operator\">:</span> monthsVec_n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// calculate day and month using find_if + lambda</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tSize D_accumu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> M_accumu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// @bug    fixed:  the variabbles above hade been declared inside the find_if as static</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//                 which caused the bug. It works fine now after being move outside.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>currYear<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currYear<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Size m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tD_accumu <span class=\"token operator\">+=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tM_accumu<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">&lt;</span> D_accumu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>month <span class=\"token operator\">=</span> M_accumu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>day <span class=\"token operator\">=</span> d <span class=\"token operator\">+</span> m <span class=\"token operator\">-</span> D_accumu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// construcotr taking iostream</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tis <span class=\"token operator\">>></span> day <span class=\"token operator\">>></span> month <span class=\"token operator\">>></span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid input! Object is default initialized.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid input! Object is default initialized.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// move constructor</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token operator\">&amp;&amp;</span> d<span class=\"token punctuation\">)</span> NOEXCEPT <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy moving\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">// copy operator=</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Date <span class=\"token operator\">&amp;</span>Date<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>day <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>month <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">// move operator=</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Date <span class=\"token operator\">&amp;</span>Date<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Date<span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">)</span> NOEXCEPT</pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>day <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>month <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"moving =\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// conver to days</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Date<span class=\"token double-colon punctuation\">::</span>Size <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tSize result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// check if leap and choose the months vector accordingly</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Size<span class=\"token operator\">></span>currYear</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token operator\">=</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> monthsVec_l <span class=\"token operator\">:</span> monthsVec_n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token comment\">// calculate result + days by months</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> currYear<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> currYear<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\tresult <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// calculate result + days by years</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tresult <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">/</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>      <span class=\"token operator\">*</span> YtoD_400<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\tresult <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span> YtoD_100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\tresult <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">*</span> YtoD_4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tresult <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>        <span class=\"token operator\">*</span> YtoD_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">// member operators:   +=  -=</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>Date <span class=\"token operator\">&amp;</span>Date<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>Date<span class=\"token double-colon punctuation\">::</span>Size offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>Date <span class=\"token operator\">&amp;</span>Date<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>Date<span class=\"token double-colon punctuation\">::</span>Size offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">// non-member operators:  &lt;&lt;  >>  -   ==  !=  &lt;   &lt;=  >   >=</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>day <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>month <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\tDate input <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    d <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>year <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">toDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">lhs</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">&lt;=</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>Date <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> Date<span class=\"token double-colon punctuation\">::</span>Size rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token punctuation\">&#123;</span>                                       <span class=\"token comment\">//  ^^^ rhs must not be larger than 2^32-1</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t<span class=\"token comment\">// copy lhs</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\tDate <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\tresult <span class=\"token operator\">-=</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>Date <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> Date<span class=\"token double-colon punctuation\">::</span>Size rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token punctuation\">&#123;</span>                                       <span class=\"token comment\">//  ^^^ rhs must not be larger than 2^32-1</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token comment\">// copy lhs</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\tDate <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\tresult <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_24.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tDate <span class=\"token function\">lhs</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rhs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>lhs <span class=\"token operator\">-=</span> <span class=\"token number\">12000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1425\"><a class=\"anchor\" href=\"#exercise-1425\">#</a> Exercise 14.25</h3>\n<blockquote>\n<p>上题的这个类还需要定义其他赋值运算符吗？如果是，请实现它们；同时说明运算对象应该是什么类型并解释原因。</p>\n</blockquote>\n<p>解：</p>\n<p>是。如上题。</p>\n<h2 id=\"subscript-operator\"><a class=\"anchor\" href=\"#subscript-operator\">#</a> Subscript Operator</h2>\n<hr />\n<h3 id=\"下标运算符\"><a class=\"anchor\" href=\"#下标运算符\">#</a> 下标运算符 []</h3>\n<ul>\n<li>下标运算符必须是成员函数。</li>\n<li>一般会定义两个版本：\n<ul>\n<li>1. 返回普通引用。</li>\n<li>2. 类的常量成员，并返回常量引用。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1426\"><a class=\"anchor\" href=\"#exercise-1426\">#</a> Exercise 14.26</h3>\n<blockquote>\n<p>为你的  <code>StrBlob</code>  类、 <code>StrBlobPtr</code>  类、 <code>StrVec</code>  类和  <code>String</code>  类定义下标运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h2 id=\"increment-and-decrement-operators\"><a class=\"anchor\" href=\"#increment-and-decrement-operators\">#</a> Increment and Decrement Operators</h2>\n<hr />\n<h3 id=\"递增和递减运算符-\"><a class=\"anchor\" href=\"#递增和递减运算符-\">#</a> 递增和递减运算符（++、--）</h3>\n<ul>\n<li>定义递增和递减运算符的类应该同时定义前置版本和后置版本。</li>\n<li>通常应该被定义成类的成员。</li>\n<li>为了和内置版本保持一致，前置运算符应该返回递增或递减后对象的引用。</li>\n<li>同样为了和内置版本保持一致，后置运算符应该返回递增或递减前对象的值，而不是引用。</li>\n<li>后置版本接受一个额外的，不被使用的 <code>int</code>  类型的形参。因为不会用到，所以无需命名。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1427\"><a class=\"anchor\" href=\"#exercise-1427\">#</a> Exercise 14.27</h3>\n<blockquote>\n<p>为你的  <code>StrBlobPtr</code>  类添加递增和递减运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>只显示添加的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string<span class=\"token operator\">&amp;</span> <span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    StrBlobPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    StrBlobPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    StrBlobPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    StrBlobPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr<span class=\"token operator\">&amp;</span> StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">++</span>curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr<span class=\"token operator\">&amp;</span> StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrement past begin of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    StrBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    StrBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token operator\">--</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr<span class=\"token operator\">&amp;</span> StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    curr <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr<span class=\"token operator\">&amp;</span> StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    curr <span class=\"token operator\">-=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    StrBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ret <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">inline</span> StrBlobPtr StrBlobPtr<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    StrBlobPtr ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    ret <span class=\"token operator\">-=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1428\"><a class=\"anchor\" href=\"#exercise-1428\">#</a> Exercise 14.28</h3>\n<blockquote>\n<p>为你的  <code>StrBlobPtr</code>  类添加加法和减法运算符，使其可以实现指针的算术运算。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.27。</p>\n<h3 id=\"exercise-1429\"><a class=\"anchor\" href=\"#exercise-1429\">#</a> Exercise 14.29</h3>\n<blockquote>\n<p>为什么不定义 <code>const</code>  版本的递增和递减运算符？</p>\n</blockquote>\n<p>解：</p>\n<p>因为递增和递减会改变对象本身，所以定义  <code>const</code>  版本的毫无意义。</p>\n<h2 id=\"member-access-operators\"><a class=\"anchor\" href=\"#member-access-operators\">#</a> Member Access Operators</h2>\n<hr />\n<h3 id=\"成员访问运算符-\"><a class=\"anchor\" href=\"#成员访问运算符-\">#</a> 成员访问运算符（*、-&gt;）</h3>\n<ul>\n<li>箭头运算符必须是类的成员。解引用运算符通常也是类的成员，尽管并非必须如此。</li>\n<li>重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。</li>\n<li>解引用和乘法的区别是一个是一元运算符，一个是二元运算符。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1430\"><a class=\"anchor\" href=\"#exercise-1430\">#</a> Exercise 14.30</h3>\n<blockquote>\n<p>为你的  <code>StrBlobPtr</code>  类和在 12.1.6 节练习 12.22 中定义的  <code>ConstStrBlobPtr</code>  的类分别添加解引用运算符和箭头运算符。注意：因为  <code>ConstStrBlobPtr</code>  的数据成员指向 <code>const vector</code> ，所以 <code>ConstStrBlobPtr</code>  中的运算符必须返回常量引用。</p>\n</blockquote>\n<p>解：</p>\n<p>略。</p>\n<h3 id=\"exercise-1431\"><a class=\"anchor\" href=\"#exercise-1431\">#</a> Exercise 14.31</h3>\n<blockquote>\n<p>我们的  <code>StrBlobPtr</code>  类没有定义拷贝构造函数、赋值运算符以及析构函数，为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>因为使用合成的足够了。</p>\n<h3 id=\"exercise-1432\"><a class=\"anchor\" href=\"#exercise-1432\">#</a> Exercise 14.32</h3>\n<blockquote>\n<p>定义一个类令其含有指向  <code>StrBlobPtr</code>  对象的指针，为这个类定义重载的箭头运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr_pointer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">StrBlobPtr_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">StrBlobPtr_pointer</span><span class=\"token punctuation\">(</span>StrBlobPtr<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    StrBlobPtr<span class=\"token operator\">*</span> pointer <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_32.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_14_30_StrBlob.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>StrBlobPtr<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>StrBlobPtr_pointer<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>StrBlobPtr<span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>StrBlobPtr_pointer<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"function-call-operator\"><a class=\"anchor\" href=\"#function-call-operator\">#</a> Function-Call Operator</h2>\n<hr />\n<h3 id=\"函数调用运算符\"><a class=\"anchor\" href=\"#函数调用运算符\">#</a> 函数调用运算符</h3>\n<ul>\n<li>可以像使用函数一样，调用该类的对象。因为这样对待类同时也能存储状态，所以与普通函数相比更加灵活。</li>\n<li>函数调用运算符必须是成员函数。</li>\n<li>一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所区别。</li>\n<li>如果累定义了调用运算符，则该类的对象称作<strong>函数对象</strong>。</li>\n</ul>\n<h4 id=\"lambda是函数对象\"><a class=\"anchor\" href=\"#lambda是函数对象\">#</a>  <code>lambda</code>  是函数对象</h4>\n<ul>\n<li><code>lambda</code>  捕获变量： <code>lambda</code>  产生的类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数。</li>\n</ul>\n<h4 id=\"标准库定义的函数对象\"><a class=\"anchor\" href=\"#标准库定义的函数对象\">#</a> 标准库定义的函数对象</h4>\n<p><strong>标准库函数对象</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>算术</th>\n<th>关系</th>\n<th>逻辑</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>plus&lt;Type&gt;</code></td>\n<td><code>equal_to&lt;Type&gt;</code></td>\n<td><code>logical_and&lt;Type&gt;</code></td>\n</tr>\n<tr>\n<td><code>minus&lt;Type&gt;</code></td>\n<td><code>not_equal_to&lt;Type&gt;</code></td>\n<td><code>logical_or&lt;Type&gt;</code></td>\n</tr>\n<tr>\n<td><code>multiplies&lt;Type&gt;</code></td>\n<td><code>greater&lt;Type&gt;</code></td>\n<td><code>logical_not&lt;Type&gt;</code></td>\n</tr>\n<tr>\n<td><code>divides&lt;Type&gt;</code></td>\n<td><code>greater_equal&lt;Type&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>modulus&lt;Type&gt;</code></td>\n<td><code>less&lt;Type&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>negate&lt;Type&gt;</code></td>\n<td><code>less_equal&lt;Type&gt;</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以在算法中使用标准库函数对象。</li>\n</ul>\n<h4 id=\"可调用对象与function\"><a class=\"anchor\" href=\"#可调用对象与function\">#</a> 可调用对象与 function</h4>\n<p><strong>标准库 function 类型</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>function&lt;T&gt; f;</code></td>\n<td><code>f</code>  是一个用来存储可调用对象的空 <code>function</code> ，这些可调用对象的调用形式应该与类型 <code>T</code>  相同。</td>\n</tr>\n<tr>\n<td><code>function&lt;T&gt; f(nullptr);</code></td>\n<td>显式地构造一个空 <code>function</code></td>\n</tr>\n<tr>\n<td><code>function&lt;T&gt; f(obj)</code></td>\n<td>在 <code>f</code>  中存储可调用对象 <code>obj</code>  的副本</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>将 <code>f</code>  作为条件：当 <code>f</code>  含有一个可调用对象时为真；否则为假。</td>\n</tr>\n<tr>\n<td>定义为 <code>function&lt;T&gt;</code>  的成员的类型</td>\n<td></td>\n</tr>\n<tr>\n<td><code>result_type</code></td>\n<td>该 <code>function</code>  类型的可调用对象返回的类型</td>\n</tr>\n<tr>\n<td><code>argument_type</code></td>\n<td>当 <code>T</code>  有一个或两个实参时定义的类型。如果 <code>T</code>  只有一个实参，则 <code>argument_type</code></td>\n</tr>\n<tr>\n<td><code>first_argument_type</code></td>\n<td>第一个实参的类型</td>\n</tr>\n<tr>\n<td><code>second_argument_type</code></td>\n<td>第二个实参的类型</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>例如：声明一个 <code>function</code>  类型，它可以表示接受两个 <code>int</code> ，返回一个 <code>int</code>  的可调用对象。 <code>function&lt;int(int, int)&gt;</code></li>\n</ul>\n<hr />\n<h3 id=\"exercise-1433\"><a class=\"anchor\" href=\"#exercise-1433\">#</a> Exercise 14.33</h3>\n<blockquote>\n<p>一个重载的函数调用运算符应该接受几个运算对象？</p>\n</blockquote>\n<p>解：</p>\n<p>一个重载的函数调用运算符接受的运算对象应该和该运算符拥有的操作数一样多。</p>\n<h3 id=\"exercise-1434\"><a class=\"anchor\" href=\"#exercise-1434\">#</a> Exercise 14.34</h3>\n<blockquote>\n<p>定义一个函数对象类，令其执行 <code>if-then-else</code>  的操作：该类的调用运算符接受三个形参，它首先检查第一个形参，如果成功返回第二个形参值；如果不成功返回第三个形参的值。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iB<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> b <span class=\"token operator\">?</span> iA <span class=\"token operator\">:</span> iB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1435\"><a class=\"anchor\" href=\"#exercise-1435\">#</a> Exercise 14.35</h3>\n<blockquote>\n<p>编写一个类似于  <code>PrintString</code>  的类，令其从  <code>istream</code>  中读取一行输入，然后返回一个表示我们所读内容的 <code>string</code> 。如果读取失败，返回空 <code>string</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetInput</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">GetInput</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>i <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> str <span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tGetInput getInput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1436\"><a class=\"anchor\" href=\"#exercise-1436\">#</a> Exercise 14.36</h3>\n<blockquote>\n<p>使用前一个练习定义的类读取标准输入，将每一行保存为  <code>vector</code>  的一个元素。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetInput</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">GetInput</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>i <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> str <span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tGetInput getInput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string tmp<span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>str <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1437\"><a class=\"anchor\" href=\"#exercise-1437\">#</a> Exercise 14.37</h3>\n<blockquote>\n<p>编写一个类令其检查两个值是否相等。使用该对象及标准库算法编写程序，令其替换某个序列中具有给定值的所有实例。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IsEqual</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">IsEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> elem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> elem <span class=\"token operator\">==</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">replace_if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IsEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1438\"><a class=\"anchor\" href=\"#exercise-1438\">#</a> Exercise 14.38</h3>\n<blockquote>\n<p>编写一个类令其检查某个给定的  <code>string</code>  对象的长度是否与一个阈值相等。使用该对象编写程序，统计并报告在输入的文件中长度为 1 的单词有多少个，长度为 2 的单词有多少个、......、长度为 10 的单词有多少个。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">IsInRange</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">IsInRange</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t lower<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t upper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">_lower</span><span class=\"token punctuation\">(</span>lower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_upper</span><span class=\"token punctuation\">(</span>upper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> _lower <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> _upper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">lower_limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> _lower<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">upper_limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> _upper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t _lower<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t _upper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//create predicates with various upper limits.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>size_t lower <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">auto</span> uppers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14u</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>IsInRange<span class=\"token operator\">></span> predicates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> upper <span class=\"token operator\">:</span> uppers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpredicates<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>IsInRange<span class=\"token punctuation\">&#123;</span> lower<span class=\"token punctuation\">,</span> upper <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//create count_table to store counts </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">></span> count_table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> upper <span class=\"token operator\">:</span> uppers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tcount_table<span class=\"token punctuation\">[</span>upper<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//read file and count</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"storyDataFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string word<span class=\"token punctuation\">;</span> fin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* */</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> is_size_in_range <span class=\"token operator\">:</span> predicates<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_size_in_range</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token operator\">++</span>count_table<span class=\"token punctuation\">[</span>is_size_in_range<span class=\"token punctuation\">.</span><span class=\"token function\">upper_limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//print</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> pair <span class=\"token operator\">:</span> count_table<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count in range [1, \"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] : \"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1439\"><a class=\"anchor\" href=\"#exercise-1439\">#</a> Exercise 14.39</h3>\n<blockquote>\n<p>修改上一题的程序令其报告长度在 1 到 9 之间的单词有多少个、长度在 10 以上的单词有多少个。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 14.38。</p>\n<h3 id=\"exercise-1440\"><a class=\"anchor\" href=\"#exercise-1440\">#</a> Exercise 14.40</h3>\n<blockquote>\n<p>重新编写 10.3.2 节的 <code>biggies</code>  函数，使用函数对象替换其中的  <code>lambda</code>  表达式。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ShorterString</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> s1<span class=\"token punctuation\">,</span> string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BiggerEqual</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tsize_t sz_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">BiggerEqual</span><span class=\"token punctuation\">(</span>size_t sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">sz_</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> sz_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Print</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>string <span class=\"token function\">make_plural</span><span class=\"token punctuation\">(</span>size_t ctr<span class=\"token punctuation\">,</span> string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> word<span class=\"token punctuation\">,</span> string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> ending<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ctr <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> word <span class=\"token operator\">+</span> ending <span class=\"token operator\">:</span> word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">elimDups</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">auto</span> end_unique <span class=\"token operator\">=</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>end_unique<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">biggies</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>words<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">elimDups</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">stable_sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ShorterString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">auto</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BiggerEqual</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">auto</span> count <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> wc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">make_plural</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\"word\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" of length \"</span> <span class=\"token operator\">&lt;&lt;</span> sz <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" or longer\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> vec<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"fox\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jumps\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"over\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"quick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"turtle\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">biggies</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1441\"><a class=\"anchor\" href=\"#exercise-1441\">#</a> Exercise 14.41</h3>\n<blockquote>\n<p>你认为 C++ 11 标准为什么要增加  <code>lambda</code> ？对于你自己来说，什么情况下会使用  <code>lambda</code> ，什么情况下会使用类？</p>\n</blockquote>\n<p>解：</p>\n<p>使用  <code>lambda</code>  是非常方便的，当需要使用一个函数，而这个函数不常使用并且简单时，使用 <code>lambda</code>  是比较方便的选择。</p>\n<h3 id=\"exercise-1442\"><a class=\"anchor\" href=\"#exercise-1442\">#</a> Exercise 14.42</h3>\n<blockquote>\n<p>使用标准库函数对象及适配器定义一条表达式，令其</p>\n</blockquote>\n<pre><code>(a) 统计大于1024的值有多少个。 \n(b) 找到第一个不等于pooh的字符串。\n(c) 将所有的值乘以2。\n</code></pre>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">count_if</span><span class=\"token punctuation\">(</span>ivec<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ivec<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>svec<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> svec<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">not_equal_to</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pooh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>ivec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ivec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ivec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">multiplies</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1443\"><a class=\"anchor\" href=\"#exercise-1443\">#</a> Exercise 14.43</h3>\n<blockquote>\n<p>使用标准库函数对象判断一个给定的 <code>int</code>  值是否能被  <code>int</code>  容器中的所有元素整除。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>modulus<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">auto</span> predicator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">auto</span> is_divisible <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">any_of</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> predicator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>is_divisible <span class=\"token operator\">?</span> <span class=\"token string\">\"Yes!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1444\"><a class=\"anchor\" href=\"#exercise-1444\">#</a> Exercise 14.44</h3>\n<blockquote>\n<p>编写一个简单的桌面计算器使其能处理二元运算。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">auto</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> i <span class=\"token operator\">%</span> j<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Div</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> i <span class=\"token operator\">/</span> j<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">auto</span> binops <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">// function pointer </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">minus</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// library functor </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">// user-defined functor </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// unnamed lambda </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">,</span> mod <span class=\"token punctuation\">&#125;</span>                                <span class=\"token comment\">// named lambda object </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Pls enter as: num operator num :\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> lhs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">;</span> std<span class=\"token double-colon punctuation\">::</span>string op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> lhs <span class=\"token operator\">>></span> op <span class=\"token operator\">>></span> rhs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> binops<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"overloading-conversions-and-operators\"><a class=\"anchor\" href=\"#overloading-conversions-and-operators\">#</a> Overloading, Conversions, and Operators</h2>\n<hr />\n<h3 id=\"重载-类型转换-运算符\"><a class=\"anchor\" href=\"#重载-类型转换-运算符\">#</a> 重载、类型转换、运算符</h3>\n<h4 id=\"类型转换运算符\"><a class=\"anchor\" href=\"#类型转换运算符\">#</a> 类型转换运算符</h4>\n<ul>\n<li>类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。类型转换函数的一般形式如下： <code>operator type() const;</code></li>\n<li>一个类型转换函数必须是类的成员函数；它不能声明返回类型，形参列表也必须为空。类型转换函数通常应该是 <code>const</code> 。</li>\n<li>避免过度使用类型转换函数。</li>\n<li>C++11 引入了显式的类型转换运算符。</li>\n<li>向 <code>bool</code>  的类型转换通常用在条件部分，因此 <code>operator bool</code>  一般定义成 <code>explicit</code>  的。</li>\n</ul>\n<h4 id=\"避免有二义性的类型转换\"><a class=\"anchor\" href=\"#避免有二义性的类型转换\">#</a> 避免有二义性的类型转换</h4>\n<ul>\n<li>通常，不要为类第几个亿相同的类型转换，也不要在类中定义两个及以上转换源或转换目标是算术类型的转换。</li>\n<li>在调用重载函数时，如果需要额外的标准类型转换，则该转换的级别只有当所有可行函数都请求同一个用户定义的类型转换时才有用。如果所需的用户定义的类型转换不止一个，则该调用具有二义性。</li>\n</ul>\n<h4 id=\"函数匹配与重载运算符\"><a class=\"anchor\" href=\"#函数匹配与重载运算符\">#</a> 函数匹配与重载运算符</h4>\n<ul>\n<li>如果 <code>a</code>  是一种类型，则表达式 <code>a sym b</code>  可能是：\n<ul>\n<li><code>a.operatorsym(b);</code></li>\n<li><code>operatorsym(a,b);</code></li>\n</ul>\n</li>\n<li>如果我们队同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1445\"><a class=\"anchor\" href=\"#exercise-1445\">#</a> Exercise 14.45</h3>\n<blockquote>\n<p>编写类型转换运算符将一个  <code>Sales_data</code>  对象分别转换成  <code>string</code>  和  <code>double</code> ，你认为这些运算符的返回值应该是什么？</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales_data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tSales_data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tSales_data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Sales_data <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> units_sold <span class=\"token operator\">?</span> revenue <span class=\"token operator\">/</span> units_sold <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1446\"><a class=\"anchor\" href=\"#exercise-1446\">#</a> Exercise 14.46</h3>\n<blockquote>\n<p>你认为应该为  <code>Sales_data</code>  类定义上面两种类型转换运算符吗？应该把它们声明成  <code>explicit</code>  的吗？为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>上面的两种类型转换有歧义，应该声明成  <code>explicit</code>  的。</p>\n<h3 id=\"exercise-1447\"><a class=\"anchor\" href=\"#exercise-1447\">#</a> Exercise 14.47</h3>\n<blockquote>\n<p>说明下面这两个类型转换运算符的区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Integral</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>第一个无意义，会被编译器忽略。第二个合法。</p>\n<h3 id=\"exercise-1448\"><a class=\"anchor\" href=\"#exercise-1448\">#</a> Exercise 14.48</h3>\n<blockquote>\n<p>你在 7.5.1 节的练习 7.40 中曾经选择并编写了一个类，你认为它应该含有向  <code>bool</code>  的类型转换运算符吗？如果是，解释原因并说明该运算符是否应该是  <code>explicit</code>  的；如果不是，也请解释原因。</p>\n</blockquote>\n<p>解：</p>\n<p><code>Date</code>  类应该含有向  <code>bool</code>  的类型转换运算符，并且应该声明为  <code>explicit</code>  的。</p>\n<h3 id=\"exercise-1449\"><a class=\"anchor\" href=\"#exercise-1449\">#</a> Exercise 14.49</h3>\n<blockquote>\n<p>为上一题提到的类定义一个转换目标是  <code>bool</code>  的类型转换运算符，先不用在意这么做是否应该。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>year<span class=\"token operator\">&lt;</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1450\"><a class=\"anchor\" href=\"#exercise-1450\">#</a> Exercise 14.50</h3>\n<blockquote>\n<p>在初始化  <code>ex1</code>  和  <code>ex2</code>  的过程中，可能用到哪些类类型的转换序列呢？说明初始化是否正确并解释原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">LongDouble</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">LongDouble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LongDouble ldObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> ex1 <span class=\"token operator\">=</span> ldObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">float</span> ex2 <span class=\"token operator\">=</span> ldObj<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p><code>ex1</code>  转换不合法，没有定义从  <code>LongDouble</code>  到  <code>int</code>  的转换，从 <code>double</code>  转换还是 <code>float</code>  转换存在二义性。 <code>ex2</code>  合法。</p>\n<h3 id=\"exercise-1451\"><a class=\"anchor\" href=\"#exercise-1451\">#</a> Exercise 14.51</h3>\n<blockquote>\n<p>在调用  <code>calc</code>  的过程中，可能用到哪些类型转换序列呢？说明最佳可行函数是如何被选出来的。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>LongDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>dval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用了哪个 calc？</span></pre></td></tr></table></figure><p>解：</p>\n<p>最佳可行函数是  <code>void calc(int)</code> 。</p>\n<p>转换的优先级如下：</p>\n<ol>\n<li>精确匹配</li>\n<li><code>const</code>  转换。</li>\n<li>类型提升</li>\n<li>算术转换</li>\n<li>类类型转换</li>\n</ol>\n<h3 id=\"exercise-1452\"><a class=\"anchor\" href=\"#exercise-1452\">#</a> Exercise 14.52</h3>\n<blockquote>\n<p>在下面的加法表达式中分别选用了哪个 <code>operator+</code> ？列出候选函数、可行函数及为每个可行函数的实参执行的类型转换：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Longdouble</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 用于演示的成员 operator+; 在通常情况下是个非成员</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLongDouble <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SmallInt<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他成员与 14.9.2 节一致</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LongDouble <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>LongDouble<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SmallInt si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>LongDouble ld<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ld <span class=\"token operator\">=</span> si <span class=\"token operator\">+</span> ld<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ld <span class=\"token operator\">=</span> ld <span class=\"token operator\">+</span> si<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p><code>ld = si + ld;</code>  不合法。 <code>ld = ld + si</code>  两个都可以调用，但是第一个调用更精确一些。</p>\n<h3 id=\"exercise-1453\"><a class=\"anchor\" href=\"#exercise-1453\">#</a> Exercise 14.53</h3>\n<blockquote>\n<p>假设我们已经定义了如第 522 页所示的 <code>SmallInt</code> ，判断下面的加法表达式是否合法。如果合法，使用了哪个加法运算符？如果不合法，应该怎样修改代码才能使其合法？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SmallInt si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> si <span class=\"token operator\">+</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>不合法，存在二义性。</p>\n<p>应该该为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SmallInt s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> <span class=\"token function\">SmallInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/05/cpp/cpp-primer/Chapter%2013%20Copy%20Control/",
            "url": "http://sakupinera.github.io/2023/01/05/cpp/cpp-primer/Chapter%2013%20Copy%20Control/",
            "title": "C++ Primer - Chapter 13 Copy Control",
            "date_published": "2023-01-04T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-13-copy-control\"><a class=\"anchor\" href=\"#chapter-13-copy-control\">#</a> Chapter 13 Copy Control</h1>\n<p><strong>拷贝控制操作</strong>（copy control）:</p>\n<ul>\n<li>拷贝构造函数（copy constructor）</li>\n<li>拷贝赋值运算符（copy-assignment operator）</li>\n<li>移动构造函数（move constructor）</li>\n<li>移动赋值函数（move-assignement operator）</li>\n<li>析构函数（destructor）</li>\n</ul>\n<h2 id=\"copy-assign-and-destroy\"><a class=\"anchor\" href=\"#copy-assign-and-destroy\">#</a> Copy, Assign, and Destroy</h2>\n<hr />\n<h3 id=\"拷贝-赋值和销毁\"><a class=\"anchor\" href=\"#拷贝-赋值和销毁\">#</a> 拷贝、赋值和销毁</h3>\n<h4 id=\"拷贝构造函数\"><a class=\"anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h4>\n<ul>\n<li>如果一个构造函数的第一个参数是<strong>自身类类型的引用</strong>，且任何额外参数都有默认值，则此构造函数是<strong>拷贝构造函数</strong>。</li>\n<li><code>class Foo&#123; public: Foo(const Foo&amp;); &#125;</code></li>\n<li><strong>合成的拷贝构造函数</strong>（synthesized copy constructor）：会将参数的成员逐个拷贝到正在创建的对象中。</li>\n<li><strong>拷贝初始化</strong>：\n<ul>\n<li>将右侧运算对象拷贝到正在创建的对象中，如果需要，还需进行类型转换。</li>\n<li>通常使用拷贝构造函数完成。</li>\n<li><code>string book = &quot;9-99&quot;;</code></li>\n<li>出现场景：\n<ul>\n<li>用 <code>=</code>  定义变量时。</li>\n<li>将一个对象作为实参传递给一个非引用类型的形参。</li>\n<li>从一个返回类型为非引用类型的函数返回一个对象。</li>\n<li>用花括号列表初始化一个数组中的元素或者一个聚合类中的成员。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"拷贝赋值运算符\"><a class=\"anchor\" href=\"#拷贝赋值运算符\">#</a> 拷贝赋值运算符</h4>\n<ul>\n<li><strong>重载赋值运算符</strong>：\n<ul>\n<li>重写一个名为 <code>operator=</code>  的函数.</li>\n<li>通常返回一个指向其左侧运算对象的引用。</li>\n<li><code>Foo&amp; operator=(const Foo&amp;);</code></li>\n</ul>\n</li>\n<li><strong>合成拷贝赋值运算符</strong>：\n<ul>\n<li>将右侧运算对象的每个非 <code>static</code>  成员赋予左侧运算对象的对应成员。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h4>\n<ul>\n<li>释放对象所使用的资源，并销毁对象的非 <code>static</code>  数据成员。</li>\n<li>名字由波浪号接类名构成。没有返回值，也不接受参数。</li>\n<li><code>~Foo();</code></li>\n<li>调用时机：\n<ul>\n<li>变量在离开其作用域时。</li>\n<li>当一个对象被销毁时，其成员被销毁。</li>\n<li>容器被销毁时，其元素被销毁。</li>\n<li>动态分配的对象，当对指向它的指针应用 <code>delete</code>  运算符时。</li>\n<li>对于临时对象，当创建它的完整表达式结束时。</li>\n</ul>\n</li>\n<li><strong>合成析构函数</strong>：\n<ul>\n<li>空函数体执行完后，<strong>成员会被自动销毁。</strong></li>\n<li>注意：析构函数体本身并不直接销毁成员。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"三五法则\"><a class=\"anchor\" href=\"#三五法则\">#</a> 三 / 五法则</h4>\n<ul>\n<li>需要析构函数的类也需要拷贝和赋值操作。</li>\n<li>需要拷贝操作的类也需要赋值操作，反之亦然。</li>\n</ul>\n<h4 id=\"使用default\"><a class=\"anchor\" href=\"#使用default\">#</a> 使用 = default</h4>\n<ul>\n<li>可以通过将拷贝控制成员定义为 <code>=default</code>  来显式地要求编译器生成合成的版本。</li>\n<li>合成的函数将隐式地声明为内联的。</li>\n</ul>\n<h4 id=\"阻止拷贝\"><a class=\"anchor\" href=\"#阻止拷贝\">#</a> 阻止拷贝</h4>\n<ul>\n<li>大多数类应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地。</li>\n<li>定义删除的函数： <code>=delete</code> 。</li>\n<li>虽然声明了它们，但是不能以任何方式使用它们。</li>\n<li>析构函数不能是删除的成员。</li>\n<li>如果一个类有数据成员不能默认构造、拷贝、复制或者销毁，则对应的成员函数将被定义为删除的。</li>\n<li>老版本使用 <code>private</code>  声明来阻止拷贝。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-131\"><a class=\"anchor\" href=\"#exercise-131\">#</a> Exercise 13.1</h3>\n<blockquote>\n<p>拷贝构造函数是什么？什么时候使用它？</p>\n</blockquote>\n<p>解：</p>\n<p>如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数。当使用<strong>拷贝初始化</strong>时，我们会用到拷贝构造函数。</p>\n<h3 id=\"exercise-132\"><a class=\"anchor\" href=\"#exercise-132\">#</a> Exercise 13.2</h3>\n<blockquote>\n<p>解释为什么下面的声明是非法的：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>Sales_data rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>参数类型应该是引用类型。</p>\n<h3 id=\"exercise-133\"><a class=\"anchor\" href=\"#exercise-133\">#</a> Exercise 13.3</h3>\n<blockquote>\n<p>当我们拷贝一个 <code>StrBlob</code>  时，会发生什么？拷贝一个 <code>StrBlobPtr</code>  呢？</p>\n</blockquote>\n<p>解：</p>\n<p>当我们拷贝 <code>StrBlob</code>  时，会使  <code>shared_ptr</code>  的引用计数加 1。当我们拷贝  <code>StrBlobPtr</code>  时，引用计数不会变化。</p>\n<h3 id=\"exercise-134\"><a class=\"anchor\" href=\"#exercise-134\">#</a> Exercise 13.4</h3>\n<blockquote>\n<p>假定  <code>Point</code>  是一个类类型，它有一个 <code>public</code>  的拷贝构造函数，指出下面程序片段中哪些地方使用了拷贝构造函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point global<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Point <span class=\"token function\">foo_bar</span><span class=\"token punctuation\">(</span>Point arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPoint local <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>heap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2: Point local = arg,  3: Point *heap = new Point(global) </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">*</span>heap <span class=\"token operator\">=</span> local<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPoint pa<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> local<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>heap <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4, 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>heap<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>上面有 6 处地方使用了拷贝构造函数。</p>\n<h3 id=\"exercise-135\"><a class=\"anchor\" href=\"#exercise-135\">#</a> Exercise 13.5</h3>\n<blockquote>\n<p>给定下面的类框架，编写一个拷贝构造函数，拷贝所有成员。你的构造函数应该动态分配一个新的 <code>string</code> ，并将对象拷贝到 <code>ps</code>  所指向的位置，而不是拷贝 ps 本身：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr<span class=\"token operator\">&amp;</span> hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-136\"><a class=\"anchor\" href=\"#exercise-136\">#</a> Exercise 13.6</h3>\n<blockquote>\n<p>拷贝赋值运算符是什么？什么时候使用它？合成拷贝赋值运算符完成什么工作？什么时候会生成合成拷贝赋值运算符？</p>\n</blockquote>\n<p>解：</p>\n<p>拷贝赋值运算符是一个名为  <code>operator=</code>  的函数。当赋值运算发生时就会用到它。合成拷贝赋值运算符可以用来禁止该类型对象的赋值。如果一个类未定义自己的拷贝赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。</p>\n<h3 id=\"exercise-137\"><a class=\"anchor\" href=\"#exercise-137\">#</a> Exercise 13.7</h3>\n<blockquote>\n<p>当我们将一个  <code>StrBlob</code>  赋值给另一个  <code>StrBlob</code>  时，会发生什么？赋值  <code>StrBlobPtr</code>  呢？</p>\n</blockquote>\n<p>解：</p>\n<p>会发生浅层复制。</p>\n<h3 id=\"exercise-138\"><a class=\"anchor\" href=\"#exercise-138\">#</a> Exercise 13.8</h3>\n<blockquote>\n<p>为 13.1.1 节练习 13.5 中的  <code>HasPtr</code>  类编写赋值运算符。类似拷贝构造函数，你的赋值运算符应该将对象拷贝到 <code>ps</code>  指向的位置。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>rhs_hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>rhs_hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>temp_ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rhs_hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            ps <span class=\"token operator\">=</span> temp_ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i <span class=\"token operator\">=</span> rhs_hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-139\"><a class=\"anchor\" href=\"#exercise-139\">#</a> Exercise 13.9</h3>\n<blockquote>\n<p>析构函数是什么？合成析构函数完成什么工作？什么时候会生成合成析构函数？</p>\n</blockquote>\n<p>解：</p>\n<p>析构函数是类的一个成员函数，名字由波浪号接类名构成。它没有返回值，也不接受参数。合成析构函数可被用来阻止该类型的对象被销毁。当一个类未定义自己的析构函数时，编译器会为它生成一个合成析构函数。</p>\n<h3 id=\"exercise-1310\"><a class=\"anchor\" href=\"#exercise-1310\">#</a> Exercise 13.10</h3>\n<blockquote>\n<p>当一个  <code>StrBlob</code>  对象销毁时会发生什么？一个  <code>StrBlobPtr</code>  对象销毁时呢？</p>\n</blockquote>\n<p>解：</p>\n<p>当一个  <code>StrBlob</code>  对象被销毁时， <code>shared_ptr</code>  的引用计数会减少。当  <code>StrBlobPtr</code>  对象被销毁时，不影响引用计数。</p>\n<h3 id=\"exercise-1311\"><a class=\"anchor\" href=\"#exercise-1311\">#</a> Exercise 13.11</h3>\n<blockquote>\n<p>为前面练习中的  <code>HasPtr</code>  类添加一个析构函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>new_ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ps <span class=\"token operator\">=</span> new_ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        i <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1312\"><a class=\"anchor\" href=\"#exercise-1312\">#</a> Exercise 13.12</h3>\n<blockquote>\n<p>在下面的代码片段中会发生几次析构函数调用？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">fcn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">*</span>trans<span class=\"token punctuation\">,</span> Sales_data accum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tSales_data <span class=\"token function\">item1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>trans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">item2</span><span class=\"token punctuation\">(</span>accum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> item1<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> item2<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>三次，分别是  <code>accum</code> 、 <code>item1</code>  和 <code>item2</code> 。</p>\n<h3 id=\"exercise-1313\"><a class=\"anchor\" href=\"#exercise-1313\">#</a> Exercise 13.13</h3>\n<blockquote>\n<p>理解拷贝控制成员和构造函数的一个好方法的定义一个简单的类，为该类定义这些成员，每个成员都打印出自己的名字：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"X()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> X<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"X(const X&amp;)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>给  <code>X</code>  添加拷贝赋值运算符和析构函数，并编写一个程序以不同的方式使用  <code>X</code>  的对象：将它们作为非引用参数传递；动态分配它们；将它们存放于容器中；诸如此类。观察程序的输出，直到你确认理解了什么时候会使用拷贝控制成员，以及为什么会使用它们。当你观察程序输出时，记住编译器可以略过对拷贝构造函数的调用。</p>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"X()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> X<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"X(const X&amp;)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    X<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> X<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"X&amp; operator=(const X&amp;)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~X()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> X <span class=\"token operator\">&amp;</span>rx<span class=\"token punctuation\">,</span> X x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>X<span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    X <span class=\"token operator\">*</span>px <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">delete</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1314\"><a class=\"anchor\" href=\"#exercise-1314\">#</a> Exercise 13.14</h3>\n<blockquote>\n<p>假定  <code>numbered</code>  是一个类，它有一个默认构造函数，能为每个对象生成一个唯一的序号，保存在名为  <code>mysn</code>  的数据成员中。假定  <code>numbered</code>  使用合成的拷贝控制成员，并给定如下函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span>numbered s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>mysn <span class=\"token operator\">&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>则下面代码输出什么内容？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>numbered a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>输出 3 个完全一样的数。</p>\n<h3 id=\"exercise-1315\"><a class=\"anchor\" href=\"#exercise-1315\">#</a> Exercise 13.15</h3>\n<blockquote>\n<p>假定 <code>numbered</code>  定义了一个拷贝构造函数，能生成一个新的序列号。这会改变上一题中调用的输出结果吗？如果会改变，为什么？新的输出结果是什么？</p>\n</blockquote>\n<p>解：</p>\n<p>会输出 3 个不同的数。并且这 3 个数并不是 a、b、c 当中的数。</p>\n<h3 id=\"exercise-1316\"><a class=\"anchor\" href=\"#exercise-1316\">#</a> Exercise 13.16</h3>\n<blockquote>\n<p>如果  <code>f</code>  中的参数是  <code>const numbered&amp;</code> ，将会怎样？这会改变输出结果吗？如果会改变，为什么？新的输出结果是什么？</p>\n</blockquote>\n<p>解：</p>\n<p>会输出 a、b、c 的数。</p>\n<h3 id=\"exercise-1317\"><a class=\"anchor\" href=\"#exercise-1317\">#</a> Exercise 13.17</h3>\n<blockquote>\n<p>分别编写前三题中所描述的  <code>numbered</code>  和  <code>f</code> ，验证你是否正确预测了输出结果。</p>\n</blockquote>\n<p>解：</p>\n<p>13.14：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">numbered</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">numbered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmysn <span class=\"token operator\">=</span> unique<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> mysn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> unique<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> numbered<span class=\"token double-colon punctuation\">::</span>unique <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>numbered s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>mysn <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnumbered a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>13.15：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">numbered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">numbered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        mysn <span class=\"token operator\">=</span> unique<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">numbered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> numbered<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmysn <span class=\"token operator\">=</span> unique<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> mysn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> unique<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> numbered<span class=\"token double-colon punctuation\">::</span>unique <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>numbered s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>mysn <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    numbered a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>13.16：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">numbered</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">numbered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmysn <span class=\"token operator\">=</span> unique<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">numbered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> numbered<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tmysn <span class=\"token operator\">=</span> unique<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> mysn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> unique<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> numbered<span class=\"token double-colon punctuation\">::</span>unique <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> numbered<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>mysn <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tnumbered a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1318\"><a class=\"anchor\" href=\"#exercise-1318\">#</a> Exercise 13.18</h3>\n<blockquote>\n<p>定义一个  <code>Employee</code>  类，它包含雇员的姓名和唯一的雇员证号。为这个类定义默认构造函数，以及接受一个表示雇员姓名的  <code>string</code>  的构造函数。每个构造函数应该通过递增一个  <code>static</code>  数据成员来生成一个唯一的证号。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> id_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstring name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> id_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_increment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> Employee<span class=\"token double-colon punctuation\">::</span>s_increment <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Employee</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tid_ <span class=\"token operator\">=</span> s_increment<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">Employee</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tid_ <span class=\"token operator\">=</span> s_increment<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tname_ <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1319\"><a class=\"anchor\" href=\"#exercise-1319\">#</a> Exercise 13.19</h3>\n<blockquote>\n<p>你的  <code>Employee</code>  类需要定义它自己的拷贝控制成员吗？如果需要，为什么？如果不需要，为什么？实现你认为  <code>Employee</code>  需要的拷贝控制成员。</p>\n</blockquote>\n<p>解：</p>\n<p>可以显式地阻止拷贝。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Employee<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Employee<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Employee<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> id_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> id_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_increment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1320\"><a class=\"anchor\" href=\"#exercise-1320\">#</a> Exercise 13.20</h3>\n<blockquote>\n<p>解释当我们拷贝、赋值或销毁  <code>TextQuery</code>  和  <code>QueryResult</code>  类对象时会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>成员会被复制。</p>\n<h3 id=\"exercise-1321\"><a class=\"anchor\" href=\"#exercise-1321\">#</a> Exercise 13.21</h3>\n<blockquote>\n<p>你认为  <code>TextQuery</code>  和  <code>QueryResult</code>  类需要定义它们自己版本的拷贝控制成员吗？如果需要，为什么？实现你认为这两个类需要的拷贝控制操作。</p>\n</blockquote>\n<p>解：</p>\n<p>合成的版本满足所有的需求。因此不需要自定义拷贝控制成员。</p>\n<h2 id=\"copy-control-and-resource-management\"><a class=\"anchor\" href=\"#copy-control-and-resource-management\">#</a> Copy Control and Resource Management</h2>\n<hr />\n<h3 id=\"拷贝控制和资源管理\"><a class=\"anchor\" href=\"#拷贝控制和资源管理\">#</a> 拷贝控制和资源管理</h3>\n<ul>\n<li>类的行为可以像一个值，也可以像一个指针。\n<ul>\n<li>行为像值：对象有自己的状态，副本和原对象是完全独立的。</li>\n<li>行为像指针：共享状态，拷贝一个这种类的对象时，副本和原对象使用相同的底层数据。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1322\"><a class=\"anchor\" href=\"#exercise-1322\">#</a> Exercise 13.22</h3>\n<blockquote>\n<p>假定我们希望  <code>HasPtr</code>  的行为像一个值。即，对于对象所指向的  <code>string</code>  成员，每个对象都有一份自己的拷贝。我们将在下一节介绍拷贝控制成员的定义。但是，你已经学习了定义这些成员所需的所有知识。在继续学习下一节之前，为  <code>HasPtr</code>  编写拷贝构造函数和拷贝赋值运算符。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">auto</span> new_p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ps <span class=\"token operator\">=</span> new_p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        i <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1323\"><a class=\"anchor\" href=\"#exercise-1323\">#</a> Exercise 13.23</h3>\n<blockquote>\n<p>比较上一节练习中你编写的拷贝控制成员和这一节中的代码。确定你理解了你的代码和我们的代码之间的差异。</p>\n</blockquote>\n<p>解：</p>\n<p>查看 13.22 代码。</p>\n<h3 id=\"exercise-1324\"><a class=\"anchor\" href=\"#exercise-1324\">#</a> Exercise 13.24</h3>\n<blockquote>\n<p>如果本节的  <code>HasPtr</code>  版本未定义析构函数，将会发生什么？如果未定义拷贝构造函数，将会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>如果未定义析构函数，将会发生内存泄漏。如果未定义拷贝构造函数，将会拷贝指针的值，指向同一个地址。</p>\n<h3 id=\"exercise-1325\"><a class=\"anchor\" href=\"#exercise-1325\">#</a> Exercise 13.25</h3>\n<blockquote>\n<p>假定希望定义  <code>StrBlob</code>  的类值版本，而且希望继续使用  <code>shared_ptr</code> ，这样我们的  <code>StrBlobPtr</code>  类就仍能使用指向 <code>vector</code>  的  <code>weak_ptr</code>  了。你修改后的类将需要一个拷贝的构造函数和一个拷贝赋值运算符，但不需要析构函数。解释拷贝构造函数和拷贝赋值运算符必须要做什么。解释为什么不需要析构函数。</p>\n</blockquote>\n<p>解：</p>\n<p>拷贝构造函数和拷贝赋值运算符要重新动态分配内存。因为  <code>StrBlob</code>  使用的是智能指针，当引用计数为 0 时会自动释放对象，因此不需要析构函数。</p>\n<h3 id=\"exercise-1326\"><a class=\"anchor\" href=\"#exercise-1326\">#</a> Exercise 13.26</h3>\n<blockquote>\n<p>对上一题中描述的  <code>strBlob</code>  类，编写你自己的版本。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;exception></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstStrBlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlob</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">using</span> size_type <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstStrBlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ConstStrBlobPtr <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ConstStrBlobPtr <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// copy constructor</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrBlob<span class=\"token operator\">&amp;</span> sb<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// copy-assignment operators</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    StrBlob<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrBlob<span class=\"token operator\">&amp;</span> sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    size_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pop_back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        data<span class=\"token operator\">-></span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstStrBlobPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">ConstStrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">curr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">ConstStrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrBlob <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> size_t sz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">wptr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">curr</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// should add const</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>ConstStrBlobPtr<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>curr <span class=\"token operator\">!=</span> curr<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> <span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// return value should add const</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dereference past end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    ConstStrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token operator\">++</span>curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unbound StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> ret<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> wptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    size_t curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_13_26.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ConstStrBlobPtr <span class=\"token class-name\">StrBlob</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// should add const</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ConstStrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ConstStrBlobPtr <span class=\"token class-name\">StrBlob</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// should add const</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ConstStrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>StrBlob<span class=\"token operator\">&amp;</span> StrBlob<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrBlob<span class=\"token operator\">&amp;</span> sb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    data <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1327\"><a class=\"anchor\" href=\"#exercise-1327\">#</a> Exercise 13.27</h3>\n<blockquote>\n<p>定义你自己的使用引用计数版本的  <code>HasPtr</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">size_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">++</span><span class=\"token operator\">*</span>use<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">++</span><span class=\"token operator\">*</span>rhs<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token operator\">*</span>use <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">delete</span> use<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ps <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        i <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        use <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token operator\">*</span>use <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">delete</span> use<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    size_t <span class=\"token operator\">*</span>use<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1328\"><a class=\"anchor\" href=\"#exercise-1328\">#</a> Exercise 13.28</h3>\n<blockquote>\n<p>给定下面的类，为其实现一个默认构造函数和必要的拷贝控制成员。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pravite<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tTreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinStrTree</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pravite<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tTreeNode <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TreeNode <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">++</span><span class=\"token operator\">*</span>count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    TreeNode<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TreeNode <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token operator\">*</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">delete</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">delete</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">delete</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span>         <span class=\"token operator\">*</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    TreeNode    <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    TreeNode    <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinStrTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">BinStrTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">BinStrTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinStrTree <span class=\"token operator\">&amp;</span>bst<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bst<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    BinStrTree<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinStrTree <span class=\"token operator\">&amp;</span>bst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">BinStrTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现和主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_13_28.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>TreeNode<span class=\"token operator\">&amp;</span> TreeNode<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TreeNode <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token operator\">*</span>rhs<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token operator\">*</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">delete</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">delete</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">delete</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    value <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    left <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    right <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    count <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>BinStrTree<span class=\"token operator\">&amp;</span> BinStrTree<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinStrTree <span class=\"token operator\">&amp;</span>bst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>new_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bst<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    root <span class=\"token operator\">=</span> new_root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"swap\"><a class=\"anchor\" href=\"#swap\">#</a> Swap</h2>\n<hr />\n<h3 id=\"交换操作\"><a class=\"anchor\" href=\"#交换操作\">#</a> 交换操作</h3>\n<ul>\n<li>管理资源的类通常还定义一个名为 <code>swap</code>  的函数。</li>\n<li>经常用于重排元素顺序的算法。</li>\n<li>用 <code>swap</code>  而不是 <code>std::swap</code> 。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1329\"><a class=\"anchor\" href=\"#exercise-1329\">#</a> Exercise 13.29</h3>\n<blockquote>\n<p>解释  <code>swap(HasPtr&amp;, HasPtr&amp;)</code>  中对  <code>swap</code>  的调用不会导致递归循环。</p>\n</blockquote>\n<p>解：</p>\n<p>这其实是 3 个不同的函数，参数类型不一样，所以不会导致递归循环。</p>\n<h3 id=\"exercise-1330\"><a class=\"anchor\" href=\"#exercise-1330\">#</a> Exercise 13.30</h3>\n<blockquote>\n<p>为你的类值版本的  <code>HasPtr</code>  编写  <code>swap</code>  函数，并测试它。为你的  <code>swap</code>  函数添加一个打印语句，指出函数什么时候执行。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>HasPtr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> HasPtr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">auto</span> new_p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ps <span class=\"token operator\">=</span> new_p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        i <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">inline</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>HasPtr<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> HasPtr<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1331\"><a class=\"anchor\" href=\"#exercise-1331\">#</a> Exercise 13.31</h3>\n<blockquote>\n<p>为你的  <code>HasPtr</code>  类定义一个  <code>&lt;</code>  运算符，并定义一个  <code>HasPtr</code>  的  <code>vector</code> 。为这个  <code>vector</code>  添加一些元素，并对它执行  <code>sort</code> 。注意何时会调用  <code>swap</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HasPtr</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>HasPtr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> HasPtr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>hp<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hp<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    HasPtr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>HasPtr tmp<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">HasPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">delete</span> ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>HasPtr <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call swap(HasPtr &amp;rhs)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>HasPtr<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> HasPtr<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    lhs<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> HasPtr <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>lhs<span class=\"token punctuation\">.</span>ps <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span>rhs<span class=\"token punctuation\">.</span>ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1332\"><a class=\"anchor\" href=\"#exercise-1332\">#</a> Exercise 13.32</h3>\n<blockquote>\n<p>类指针的  <code>HasPtr</code>  版本会从  <code>swap</code>  函数收益吗？如果会，得到了什么益处？如果不是，为什么？</p>\n</blockquote>\n<p>解：</p>\n<p>不会。类值的版本利用 <code>swap</code>  交换指针不用进行内存分配，因此得到了性能上的提升。类指针的版本本来就不用进行内存分配，所以不会得到性能提升。</p>\n<h2 id=\"a-copy-control-example\"><a class=\"anchor\" href=\"#a-copy-control-example\">#</a> A Copy-Control Example</h2>\n<hr />\n<h3 id=\"exercise-1333\"><a class=\"anchor\" href=\"#exercise-1333\">#</a> Exercise 13.33</h3>\n<blockquote>\n<p>为什么 <code>Message</code>  的成员 <code>save</code>  和 <code>remove</code>  的参数是一个  <code>Folder&amp;</code> ？为什么我们不能将参数定义为  <code>Folder</code>  或是  <code>const Folder</code> ？</p>\n</blockquote>\n<p>解：</p>\n<p>因为  <code>save</code>  和  <code>remove</code>  操作需要更新指定  <code>Folder</code> 。</p>\n<h3 id=\"exercise-1334\"><a class=\"anchor\" href=\"#exercise-1334\">#</a> Exercise 13.34</h3>\n<blockquote>\n<p>编写本节所描述的  <code>Message</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Message <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Message <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">contents</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Message<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Folder<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Folder<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print_debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string contents<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>Folder<span class=\"token operator\">*</span><span class=\"token operator\">></span> folders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addFldr</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> folders<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">remFldr</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> folders<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Message<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Message<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Folder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Folder<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print_debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">*</span><span class=\"token operator\">></span> msgs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addMsg</span><span class=\"token punctuation\">(</span>Message <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> msgs<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">remMsg</span><span class=\"token punctuation\">(</span>Message <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> msgs<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Folder <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现和主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex13_34_36_37.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Message <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> Message <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    lhs<span class=\"token punctuation\">.</span><span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rhs<span class=\"token punctuation\">.</span><span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>folders<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>folders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    lhs<span class=\"token punctuation\">.</span><span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    rhs<span class=\"token punctuation\">.</span><span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// Message Implementation</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">addFldr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    f<span class=\"token punctuation\">.</span><span class=\"token function\">addMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">remFldr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Use existing member function to avoid duplicate code.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    f<span class=\"token punctuation\">.</span><span class=\"token function\">remMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> f <span class=\"token operator\">:</span> m<span class=\"token punctuation\">.</span>folders<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        f<span class=\"token operator\">-></span><span class=\"token function\">addMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">contents</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">folders</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>folders<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> f <span class=\"token operator\">:</span> folders<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        f<span class=\"token operator\">-></span><span class=\"token function\">remMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// The book added one line here: folders.clear(); but I think it is redundant and more importantly, it will cause a bug:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// - In Message::operator=, in the case of self-assignment, it first calls remove_from_Folders() and its folders.clear() </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//   clears the data member of lhs(rhs), and there is no way we can assign it back to lhs.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//   Refer to: http://stackoverflow.com/questions/29308115/protection-again-self-assignment</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// - Why is it redundant? As its analogous function Message::add_to_Folders(), Message::remove_from_Folders() should ONLY</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">//   take care of the bookkeeping in Folders but not touch the Message's own data members - makes it much clearer and easier</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//   to use. As you can see in the 2 places where we call Message::remove_from_Folders(): in Message::operator=, folders.clear()</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">//   introduces a bug as illustrated above; in the destructor ~Message(), the member \"folders\" will be destroyed anyways, why do</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">//   we need to clear it first?</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Message <span class=\"token operator\">&amp;</span>Message<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Message <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">remove_from_Folders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    contents <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    folders <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>folders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">add_to_Folders</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Message</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print_debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> contents <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// Folder Implementation</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Folder <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> Folder <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    lhs<span class=\"token punctuation\">.</span><span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    rhs<span class=\"token punctuation\">.</span><span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    lhs<span class=\"token punctuation\">.</span><span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    rhs<span class=\"token punctuation\">.</span><span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Folder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> f<span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        m<span class=\"token operator\">-></span><span class=\"token function\">addFldr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token class-name\">Folder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">msgs</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Folder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> msgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        m<span class=\"token operator\">-></span><span class=\"token function\">remFldr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token class-name\">Folder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>Folder <span class=\"token operator\">&amp;</span>Folder<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Folder <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">remove_from_Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    msgs <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">add_to_Message</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Folder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print_debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> msgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token operator\">-></span>contents <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1335\"><a class=\"anchor\" href=\"#exercise-1335\">#</a> Exercise 13.35</h3>\n<blockquote>\n<p>如果 <code>Message</code>  使用合成的拷贝控制成员，将会发生什么？</p>\n</blockquote>\n<p>在赋值后一些已存在的  <code>Folders</code>  将会与  <code>Message</code>  不同步。</p>\n<h3 id=\"exercise-1336\"><a class=\"anchor\" href=\"#exercise-1336\">#</a> Exercise 13.36</h3>\n<blockquote>\n<p>设计并实现对应的  <code>Folder</code>  类。此类应该保存一个指向  <code>Folder</code>  中包含   <code>Message</code>  的  <code>set</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 13.34。</p>\n<h3 id=\"exercise-1337\"><a class=\"anchor\" href=\"#exercise-1337\">#</a> Exercise 13.37</h3>\n<blockquote>\n<p>为  <code>Message</code>  类添加成员，实现向  <code>folders</code>  添加和删除一个给定的  <code>Folder*</code> 。这两个成员类似 <code>Folder</code>  类的  <code>addMsg</code>  和  <code>remMsg</code>  操作。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 13.34。</p>\n<h3 id=\"exercise-1338\"><a class=\"anchor\" href=\"#exercise-1338\">#</a> Exercise 13.38</h3>\n<blockquote>\n<p>我们并未使用拷贝交换方式来设计  <code>Message</code>  的赋值运算符。你认为其原因是什么？</p>\n</blockquote>\n<p>对于动态分配内存的例子来说，拷贝交换方式是一种简洁的设计。而这里的  <code>Message</code>  类并不需要动态分配内存，用拷贝交换方式只会增加实现的复杂度。</p>\n<h2 id=\"classes-that-manage-dynamic-memory\"><a class=\"anchor\" href=\"#classes-that-manage-dynamic-memory\">#</a> Classes That Manage Dynamic Memory</h2>\n<hr />\n<h3 id=\"exercise-1339\"><a class=\"anchor\" href=\"#exercise-1339\">#</a> Exercise 13.39</h3>\n<blockquote>\n<p>编写你自己版本的  <code>StrVec</code> ，包括自己版本的  <code>reserve</code> 、 <code>capacity</code>  和 <code>resize</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 类 vector 类内存分配策略的简化实现</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrVec</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">first_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    StrVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拷贝赋值运算符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加元素时拷贝元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> cap <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> first_free<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 工具函数，被拷贝构造函数、赋值运算符和析构函数所使用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 销毁元素并释放内存</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 工具函数，被添加元素的函数使用</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 获得更多内存并拷贝已有元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>elements<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向数组首元素的指针</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>first_free<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向数组第一个空闲元素的指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>cap<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向数组第一个空闲元素的指针</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>allocator<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分配元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现和主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_13_39.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">chk_n_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    alloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 分配足够的内存来保存给定范围的元素，并将这些元素拷贝到新分配的内存中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 分配空间保存给定范围中的元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 初始化并返回一个 pair，该 pair 由 data 和 uninitialized_copy 的返回值构成</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 不能传递给 deallocate 一个空指针，如果 elements 为 0，函数什么也不做</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 逆序销毁元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> first_free<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> elements<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        alloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> cap <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 调用 alloc_n_copy 分配空间以容纳与 rhs 中一样多的元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">auto</span> newdata <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    elements <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    first_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>StrVec<span class=\"token operator\">&amp;</span> StrVec<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrVec <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 调用 alloc_n_copy 分配空间以容纳与 rhs 中一样多的元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    elements <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    first_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">auto</span> newdata <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">auto</span> dest <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">auto</span> elem <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        alloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>dest<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>elem<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    elements <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    first_free <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    cap <span class=\"token operator\">=</span> elements <span class=\"token operator\">+</span> new_cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">auto</span> newcapacity <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t new_cap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_cap <span class=\"token operator\">&lt;=</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">alloc_n_move</span><span class=\"token punctuation\">(</span>new_cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            alloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>first_free<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_free <span class=\"token operator\">!=</span> elements <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>first_free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1340\"><a class=\"anchor\" href=\"#exercise-1340\">#</a> Exercise 13.40</h3>\n<blockquote>\n<p>为你的  <code>StrVec</code>  类添加一个构造函数，它接受一个  <code>initializer_list&lt;string&gt;</code>  参数。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">*</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> newdata <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    elements <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    first_free <span class=\"token operator\">=</span> cap <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">StrVec</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StrVec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">range_initialize</span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> il<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1341\"><a class=\"anchor\" href=\"#exercise-1341\">#</a> Exercise 13.41</h3>\n<blockquote>\n<p>在  <code>push_back</code>  中，我们为什么在  <code>construct</code>  调用中使用后置递增运算？如果使用前置递增运算的话，会发生什么？</p>\n</blockquote>\n<p>解：</p>\n<p>会出现  <code>unconstructed</code> 。</p>\n<h3 id=\"exercise-1342\"><a class=\"anchor\" href=\"#exercise-1342\">#</a> Exercise 13.42</h3>\n<blockquote>\n<p>在你的  <code>TextQuery</code>  和  <code>QueryResult</code>  类中用你的  <code>StrVec</code>  类代替 <code>vector&lt;string&gt;</code> ，以此来测试你的  <code>StrVec</code>  类。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1343\"><a class=\"anchor\" href=\"#exercise-1343\">#</a> Exercise 13.43</h3>\n<blockquote>\n<p>重写  <code>free</code>  成员，用  <code>for_each</code>  和  <code>lambda</code>  来代替  <code>for</code>  循环  <code>destroy</code>  元素。你更倾向于哪种实现，为什么？</p>\n</blockquote>\n<p>解：</p>\n<p><strong>重写</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> first_free<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>更倾向于函数式写法。</p>\n<h3 id=\"exercise-1344\"><a class=\"anchor\" href=\"#exercise-1344\">#</a> Exercise 13.44</h3>\n<blockquote>\n<p>编写标准库  <code>string</code>  类的简化版本，命名为  <code>String</code> 。你的类应该至少有一个默认构造函数和一个接受 C 风格字符串指针参数的构造函数。使用  <code>allocator</code>  为你的  <code>String</code>  类分配所需内存。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    String<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    size_t <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> elements <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>allocator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_13_44_47.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">auto</span> str <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">auto</span> newstr <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    elements <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    end <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sl <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">++</span>sl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>sl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">range_initializer</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy constructor\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        alloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>String<span class=\"token operator\">&amp;</span> String<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">auto</span> newstr <span class=\"token operator\">=</span> <span class=\"token function\">alloc_n_copy</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    elements <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    end <span class=\"token operator\">=</span> newstr<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy-assignment\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex13_44_47.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Test reference to http://coolshell.cn/articles/10478.html</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>String x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>String <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    String <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    String s0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    String <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    String <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    String s3 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    String <span class=\"token function\">s4</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temporary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temporary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    String s5 <span class=\"token operator\">=</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> svec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good job\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">:</span> svec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoZW5zaHVvL3JlY2lwZXMvYmxvYi9mY2Y5NDg2ZjUxNTUxMTdmYjhjMzZiNmIwOTQ0YzU0ODZjNzFjNDIxL3N0cmluZy9TdHJpbmdUcml2aWFsLmg=\">A trivial String class that designed for write-on-paper in an interview</span></p>\n<h2 id=\"moving-objects\"><a class=\"anchor\" href=\"#moving-objects\">#</a> Moving Objects</h2>\n<hr />\n<h3 id=\"对象移动\"><a class=\"anchor\" href=\"#对象移动\">#</a> 对象移动</h3>\n<ul>\n<li>很多拷贝操作后，原对象会被销毁，因此引入移动操作可以大幅度提升性能。</li>\n<li>在新标准中，我们可以用容器保存不可拷贝的类型，只要它们可以被移动即可。</li>\n<li>标准库容器、 <code>string</code>  和 <code>shared_ptr</code>  类既可以支持移动也支持拷贝。 <code>IO</code>  类和 <code>unique_ptr</code>  类可以移动但不能拷贝。</li>\n</ul>\n<h4 id=\"右值引用\"><a class=\"anchor\" href=\"#右值引用\">#</a> 右值引用</h4>\n<ul>\n<li>新标准引入右值引用以支持移动操作。</li>\n<li>通过 <code>&amp;&amp;</code>  获得右值引用。</li>\n<li>只能绑定到一个将要销毁的对象。</li>\n<li>常规引用可以称之为左值引用。</li>\n<li>左值持久，右值短暂。</li>\n</ul>\n<p><strong>move 函数</strong>：</p>\n<ul>\n<li><code>int &amp;&amp;rr2 = std::move(rr1);</code></li>\n<li><code>move</code>  告诉编译器，我们有一个左值，但我希望像右值一样处理它。</li>\n<li>调用 <code>move</code>  意味着：除了对 <code>rr1</code>  赋值或者销毁它外，我们将不再使用它。</li>\n</ul>\n<h4 id=\"移动构造函数和移动赋值运算符\"><a class=\"anchor\" href=\"#移动构造函数和移动赋值运算符\">#</a> 移动构造函数和移动赋值运算符</h4>\n<ul>\n<li><strong>移动构造函数</strong>：\n<ul>\n<li>第一个参数是该类类型的一个引用，关键是，这个引用参数是一个<strong>右值引用</strong>。</li>\n<li><code>StrVec::StrVec(StrVec &amp;&amp;s) noexcept&#123;&#125;</code></li>\n<li>不分配任何新内存，只是接管给定的内存。</li>\n</ul>\n</li>\n<li><strong>移动赋值运算符</strong>：\n<ul>\n<li><code>StrVec&amp; StrVec::operator=(StrVec &amp;&amp; rhs) noexcept&#123;&#125;</code></li>\n</ul>\n</li>\n<li>移动右值，拷贝左值。</li>\n<li>如果没有移动构造函数，右值也被拷贝。</li>\n<li>更新三 / 五法则：如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作。</li>\n<li>移动迭代器：\n<ul>\n<li><code>make_move_iterator</code>  函数讲一个普通迭代器转换为一个移动迭代器。</li>\n</ul>\n</li>\n<li>建议：小心地使用移动操作，以获得性能提升。</li>\n</ul>\n<h4 id=\"右值引用和成员函数\"><a class=\"anchor\" href=\"#右值引用和成员函数\">#</a> 右值引用和成员函数</h4>\n<ul>\n<li>区分移动和拷贝的重载函数通常有一个版本接受一个 <code>const T&amp;</code> ，而另一个版本接受一个 <code>T&amp;&amp;</code> 。</li>\n<li>引用限定符：\n<ul>\n<li>在参数列表后面防止一个 <code>&amp;</code> ，限定只能向可修改的左值赋值而不能向右值赋值。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1345\"><a class=\"anchor\" href=\"#exercise-1345\">#</a> Exercise 13.45</h3>\n<blockquote>\n<p>解释左值引用和右值引用的区别？</p>\n</blockquote>\n<p>解：</p>\n<p>定义：</p>\n<ul>\n<li>常规引用被称为左值引用</li>\n<li>绑定到右值的引用被称为右值引用。</li>\n</ul>\n<h3 id=\"exercise-1346\"><a class=\"anchor\" href=\"#exercise-1346\">#</a> Exercise 13.46</h3>\n<blockquote>\n<p>什么类型的引用可以绑定到下面的初始化器上？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vi</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">?</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">?</span> r2 <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">?</span> r3 <span class=\"token operator\">=</span> r1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">?</span> r4 <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vi</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r2 <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r3 <span class=\"token operator\">=</span> r1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> r4 <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1347\"><a class=\"anchor\" href=\"#exercise-1347\">#</a> Exercise 13.47</h3>\n<blockquote>\n<p>对你在练习 13.44 中定义的  <code>String</code>  类，为它的拷贝构造函数和拷贝赋值运算符添加一条语句，在每次函数执行时打印一条信息。</p>\n</blockquote>\n<p>解：</p>\n<p>参考 13.44。</p>\n<h3 id=\"exercise-1348\"><a class=\"anchor\" href=\"#exercise-1348\">#</a> Exercise 13.48</h3>\n<blockquote>\n<p>定义一个 <code>vector&lt;String&gt;</code>  并在其上多次调用  <code>push_back</code> 。运行你的程序，并观察  <code>String</code>  被拷贝了多少次。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_13_44_47.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Test reference to http://coolshell.cn/articles/10478.html</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>String x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>String <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    String <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    String s0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    String <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    String <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    String s3 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    String <span class=\"token function\">s4</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temporary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temporary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    String s5 <span class=\"token operator\">=</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> svec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    svec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good job\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">:</span> svec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1349\"><a class=\"anchor\" href=\"#exercise-1349\">#</a> Exercise 13.49</h3>\n<blockquote>\n<p>为你的  <code>StrVec</code> 、 <code>String</code>  和  <code>Message</code>  类添加一个移动构造函数和一个移动赋值运算符。</p>\n</blockquote>\n<p>解：</p>\n<p>略</p>\n<h3 id=\"exercise-1350\"><a class=\"anchor\" href=\"#exercise-1350\">#</a> Exercise 13.50</h3>\n<blockquote>\n<p>在你的  <code>String</code>  类的移动操作中添加打印语句，并重新运行 13.6.1 节的练习 13.48 中的程序，它使用了一个 <code>vector&lt;String&gt;</code> ，观察什么时候会避免拷贝。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    String <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// first avoided</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>String s5 <span class=\"token operator\">=</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// second avoided</span></pre></td></tr></table></figure><h3 id=\"exercise-1351\"><a class=\"anchor\" href=\"#exercise-1351\">#</a> Exercise 13.51</h3>\n<blockquote>\n<p>虽然  <code>unique_ptr</code>  不能拷贝，但我们在 12.1.5 节中编写了一个  <code>clone</code>  函数，它以值的方式返回一个  <code>unique_ptr</code> 。解释为什么函数是合法的，以及为什么它能正确工作。</p>\n</blockquote>\n<p>解：</p>\n<p>在这里是移动的操作而不是拷贝操作，因此是合法的。</p>\n<h3 id=\"exercise-1352\"><a class=\"anchor\" href=\"#exercise-1352\">#</a> Exercise 13.52</h3>\n<blockquote>\n<p>详细解释第 478 页中的  <code>HasPtr</code>  对象的赋值发生了什么？特别是，一步一步描述  <code>hp</code> 、 <code>hp2</code>  以及  <code>HasPtr</code>  的赋值运算符中的参数  <code>rhs</code>  的值发生了什么变化。</p>\n</blockquote>\n<p>解：</p>\n<p>左值被拷贝，右值被移动。</p>\n<h3 id=\"exercise-1353\"><a class=\"anchor\" href=\"#exercise-1353\">#</a> Exercise 13.53</h3>\n<blockquote>\n<p>从底层效率的角度看， <code>HasPtr</code>  的赋值运算符并不理想，解释为什么？为  <code>HasPtr</code>  实现一个拷贝赋值运算符和一个移动赋值运算符，并比较你的新的移动赋值运算符中执行的操作和拷贝并交换版本中的执行的操作。</p>\n</blockquote>\n<p>解：</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjEwMTAzNzEvd2h5LWlzLWl0LW5vdC1lZmZpY2llbnQtdG8tdXNlLWEtc2luZ2xlLWFzc2lnbm1lbnQtb3BlcmF0b3ItaGFuZGxpbmctYm90aC1jb3B5LWE=\">https://stackoverflow.com/questions/21010371/why-is-it-not-efficient-to-use-a-single-assignment-operator-handling-both-copy-a</span></p>\n<h3 id=\"exercise-1354\"><a class=\"anchor\" href=\"#exercise-1354\">#</a> Exercise 13.54</h3>\n<blockquote>\n<p>如果我们为  <code>HasPtr</code>  定义了移动赋值运算符，但未改变拷贝并交换运算符，会发生什么？编写代码验证你的答案。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>error<span class=\"token operator\">:</span> ambiguous overload <span class=\"token keyword\">for</span> <span class=\"token char\">'operator='</span> <span class=\"token punctuation\">(</span>operand types are <span class=\"token char\">'HasPtr'</span> <span class=\"token operator\">and</span> 'std<span class=\"token double-colon punctuation\">::</span>remove_reference<span class=\"token operator\">&lt;</span>HasPtr<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type <span class=\"token punctuation\">&#123;</span> aka HasPtr <span class=\"token punctuation\">&#125;</span>'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hp1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">^</span></pre></td></tr></table></figure><h3 id=\"exercise-1355\"><a class=\"anchor\" href=\"#exercise-1355\">#</a> Exercise 13.55</h3>\n<blockquote>\n<p>为你的  <code>StrBlob</code>  添加一个右值引用版本的  <code>push_back</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1356\"><a class=\"anchor\" href=\"#exercise-1356\">#</a> Exercise 13.56</h3>\n<blockquote>\n<p>如果  <code>sorted</code>  定义如下，会发生什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Foo <span class=\"token class-name\">Foo</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tFoo <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>会产生递归并且最终溢出。</p>\n<h3 id=\"exercise-1357\"><a class=\"anchor\" href=\"#exercise-1357\">#</a> Exercise 13.57</h3>\n<blockquote>\n<p>如果  <code>sorted</code>  定义如下，会发生什么：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Foo <span class=\"token class-name\">Foo</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>没问题。会调用移动版本。</p>\n<h3 id=\"exercise-1358\"><a class=\"anchor\" href=\"#exercise-1358\">#</a> Exercise 13.58</h3>\n<blockquote>\n<p>编写新版本的  <code>Foo</code>  类，其  <code>sorted</code>  函数中有打印语句，测试这个类，来验证你对前两题的答案是否正确。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Foo <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Foo <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Foo <span class=\"token class-name\">Foo</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&amp;&amp;\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// debug</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Foo <span class=\"token class-name\">Foo</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//    Foo ret(*this);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    sort(ret.data.begin(), ret.data.end());</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//    return ret;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const &amp;\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// debug</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//    Foo ret(*this);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//    ret.sorted();     // Exercise 13.56</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    return ret;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exercise 13.57</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call \"&amp;&amp;\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Foo f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    f<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call \"const &amp;\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/04/cpp/cpp-primer/Chapter%2012%20Dynamic%20Memory/",
            "url": "http://sakupinera.github.io/2023/01/04/cpp/cpp-primer/Chapter%2012%20Dynamic%20Memory/",
            "title": "C++ Primer - Chapter 12 Dynamic Memory",
            "date_published": "2023-01-03T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-12-dynamic-memory\"><a class=\"anchor\" href=\"#chapter-12-dynamic-memory\">#</a> Chapter 12 Dynamic Memory</h1>\n<ul>\n<li>\n<p>对象的生命周期：</p>\n<ul>\n<li>全局对象在程序启动时分配，结束时销毁。</li>\n<li>局部对象在进入程序块时创建，离开块时销毁。</li>\n<li>局部 <code>static</code>  对象在第一次使用前分配，在程序结束时销毁。</li>\n<li>动态分配对象：只能显式地被释放。</li>\n</ul>\n</li>\n<li>\n<p>对象的内存位置：</p>\n<ul>\n<li><strong>静态内存</strong>用来保存局部 <code>static</code>  对象、类 <code>static</code>  对象、定义在任何函数之外的变量。</li>\n<li><strong>栈内存</strong>用来保存定义在函数内的非 <code>static</code>  对象。</li>\n<li><strong>堆内存</strong>，又称自由空间，用来存储<strong>动态分配</strong>的对象。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dynamic-memory-and-smart-pointers\"><a class=\"anchor\" href=\"#dynamic-memory-and-smart-pointers\">#</a> Dynamic Memory and Smart Pointers</h2>\n<hr />\n<h3 id=\"动态内存与智能指针\"><a class=\"anchor\" href=\"#动态内存与智能指针\">#</a> 动态内存与智能指针</h3>\n<ul>\n<li>动态内存管理：\n<ul>\n<li><code>new</code> ：在动态内存中为对象分配空间并返回一个指向该对象的指针。</li>\n<li><code>delete</code> ：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。</li>\n</ul>\n</li>\n<li>智能指针：\n<ul>\n<li>管理动态对象。</li>\n<li>行为类似常规指针。</li>\n<li>负责自动释放所指向的对象。</li>\n<li>智能指针也是模板。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"shared_ptr类\"><a class=\"anchor\" href=\"#shared_ptr类\">#</a> shared_ptr 类</h4>\n<p><strong>shared_ptr 和 unique_ptr 都支持的操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>shared_ptr&lt;T&gt; sp</code>    <code>unique_ptr&lt;T&gt; up</code></td>\n<td>空智能指针，可以指向类型是 <code>T</code>  的对象</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>将 <code>p</code>  用作一个条件判断，若 <code>p</code>  指向一个对象，则为 <code>true</code></td>\n</tr>\n<tr>\n<td><code>*p</code></td>\n<td>解引用 <code>p</code> ，获得它指向的对象。</td>\n</tr>\n<tr>\n<td><code>p-&gt;mem</code></td>\n<td>等价于 <code>(*p).mem</code></td>\n</tr>\n<tr>\n<td><code>p.get()</code></td>\n<td>返回 <code>p</code>  中保存的指针，要小心使用，若智能指针释放了对象，返回的指针所指向的对象也就消失了。</td>\n</tr>\n<tr>\n<td><code>swap(p, q)</code>   <code>p.swap(q)</code></td>\n<td>交换 <code>p</code>  和 <code>q</code>  中的指针</td>\n</tr>\n</tbody>\n</table>\n<p><strong>shared_ptr 独有的操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>make_shared&lt;T&gt;(args)</code></td>\n<td>返回一个 <code>shared_ptr</code> ，指向一个动态分配的类型为 <code>T</code>  的对象。使用 <code>args</code>  初始化此对象。</td>\n</tr>\n<tr>\n<td><code>shared_ptr&lt;T&gt;p(q)</code></td>\n<td><code>p</code>  是 <code>shared_ptr q</code>  的拷贝；此操作会<strong>递增</strong> <code>q</code>  中的计数器。 <code>q</code>  中的指针必须能转换为 <code>T*</code></td>\n</tr>\n<tr>\n<td><code>p = q</code></td>\n<td><code>p</code>  和 <code>q</code>  都是 <code>shared_ptr</code> ，所保存的指针必须能互相转换。此操作会<strong>递减</strong> <code>p</code>  的引用计数，<strong>递增</strong> <code>q</code>  的引用计数；若 <code>p</code>  的引用计数变为 0，则将其管理的原内存释放。</td>\n</tr>\n<tr>\n<td><code>p.unique()</code></td>\n<td>若 <code>p.use_count()</code>  是 1，返回 <code>true</code> ；否则返回 <code>false</code></td>\n</tr>\n<tr>\n<td><code>p.use_count()</code></td>\n<td>返回与 <code>p</code>  共享对象的智能指针数量；可能很慢，主要用于调试。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>使用动态内存的三种原因</strong>：\n<ul>\n<li>程序不知道自己需要使用多少对象（比如容器类）。</li>\n<li>程序不知道所需要对象的准确类型。</li>\n<li>程序需要在多个对象间共享数据。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"直接管理内存\"><a class=\"anchor\" href=\"#直接管理内存\">#</a> 直接管理内存</h4>\n<ul>\n<li>用 <code>new</code>  动态分配和初始化对象。\n<ul>\n<li><code>new</code>  无法为分配的对象命名（因为自由空间分配的内存是无名的），因此是返回一个指向该对象的指针。</li>\n<li><code>int *pi = new int(123);</code></li>\n<li>一旦内存耗尽，会抛出类型是 <code>bad_alloc</code>  的异常。</li>\n</ul>\n</li>\n<li>用 <code>delete</code>  将动态内存归还给系统。\n<ul>\n<li>接受一个指针，指向要释放的对象。</li>\n<li><code>delete</code>  后的指针称为空悬指针（dangling pointer）。</li>\n</ul>\n</li>\n<li>使用 <code>new</code>  和 <code>delete</code>  管理动态内存存在三个常见问题：\n<ul>\n<li>1. 忘记 <code>delete</code>  内存。</li>\n<li>2. 使用已经释放掉的对象。</li>\n<li>3. 同一块内存释放两次。</li>\n</ul>\n</li>\n<li>坚持只使用智能指针可以避免上述所有问题。</li>\n</ul>\n<h4 id=\"shared_ptr和new结合使用\"><a class=\"anchor\" href=\"#shared_ptr和new结合使用\">#</a> shared_ptr 和 new 结合使用</h4>\n<p><strong>定义和改变 shared_ptr 的其他方法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>shared_ptr&lt;T&gt; p(q)</code></td>\n<td><code>p</code>  管理内置指针 <code>q</code>  所指向的对象； <code>q</code>  必须指向 <code>new</code>  分配的内存，且能够转换为 <code>T*</code>  类型</td>\n</tr>\n<tr>\n<td><code>shared_ptr&lt;T&gt; p(u)</code></td>\n<td><code>p</code>  从 <code>unique_ptr u</code>  那里接管了对象的所有权；将 <code>u</code>  置为空</td>\n</tr>\n<tr>\n<td><code>shared_ptr&lt;T&gt; p(q, d)</code></td>\n<td><code>p</code>  接管了内置指针 <code>q</code>  所指向的对象的所有权。 <code>q</code>  必须能转换为 <code>T*</code>  类型。 <code>p</code>  将使用可调用对象 <code>d</code>  来代替 <code>delete</code> 。</td>\n</tr>\n<tr>\n<td><code>shared_ptr&lt;T&gt; p(p2, d)</code></td>\n<td><code>p</code>  是 <code>shared_ptr p2</code>  的拷贝，唯一的区别是 <code>p</code>  将可调用对象 <code>d</code>  来代替 <code>delete</code> 。</td>\n</tr>\n<tr>\n<td><code>p.reset()</code></td>\n<td>若 <code>p</code>  是唯一指向其对象的 <code>shared_ptr</code> ， <code>reset</code>  会释放此对象。若传递了可选的参数内置指针 <code>q</code> ，会令 <code>p</code>  指向 <code>q</code> ，否则会将 <code>p</code>  置空。若还传递了参数 <code>d</code> ，则会调用 <code>d</code>  而不是 <code>delete</code>  来释放 <code>q</code> 。</td>\n</tr>\n<tr>\n<td><code>p.reset(q)</code></td>\n<td>同上</td>\n</tr>\n<tr>\n<td><code>p.reset(q, d)</code></td>\n<td>同上</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"智能指针和异常\"><a class=\"anchor\" href=\"#智能指针和异常\">#</a> 智能指针和异常</h4>\n<ul>\n<li>如果使用智能指针，即使程序块由于异常过早结束，智能指针类也能确保在内存不需要的时候将其释放。</li>\n<li><strong>智能指针陷阱</strong>：\n<ul>\n<li>不用相同的内置指针初始化（或 <code>reset</code> ）多个智能指针</li>\n<li>不 <code>delete get()</code>  返回的指针。</li>\n<li>如果你使用 <code>get()</code>  返回的指针，记得当最后一个对应的智能指针销毁后，你的指针就无效了。</li>\n<li>如果你使用智能指针管理的资源不是 <code>new</code>  分配的内存，记住传递给它一个删除器。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a> unique_ptr</h4>\n<ul>\n<li>某一个时刻只能有一个 <code>unique_ptr</code>  指向一个给定的对象。</li>\n<li>不支持拷贝或者赋值操作。</li>\n<li>向后兼容： <code>auto_ptr</code> ：老版本，具有 <code>unique_ptr</code>  的部分特性。特别是，不能在容器中保存 <code>auto_ptr</code> ，也不能从函数返回 <code>auto_ptr</code> 。</li>\n</ul>\n<p><strong>unique_ptr 操作</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>unique_ptr&lt;T&gt; u1</code></td>\n<td>空 <code>unique_ptr</code> ，可以指向类型是 <code>T</code>  的对象。 <code>u1</code>  会使用 <code>delete</code>  来是释放它的指针。</td>\n</tr>\n<tr>\n<td><code>unique_ptr&lt;T, D&gt; u2</code></td>\n<td><code>u2</code>  会使用一个类型为 <code>D</code>  的可调用对象来释放它的指针。</td>\n</tr>\n<tr>\n<td><code>unique_ptr&lt;T, D&gt; u(d)</code></td>\n<td>空 <code>unique_ptr</code> ，指向类型为 <code>T</code>  的对象，用类型为 <code>D</code>  的对象 <code>d</code>  代替 <code>delete</code></td>\n</tr>\n<tr>\n<td><code>u = nullptr</code></td>\n<td>释放 <code>u</code>  指向的对象，将 <code>u</code>  置为空。</td>\n</tr>\n<tr>\n<td><code>u.release()</code></td>\n<td><code>u</code>  放弃对指针的控制权，返回指针，并将 <code>u</code>  置空。</td>\n</tr>\n<tr>\n<td><code>u.reset()</code></td>\n<td>释放 <code>u</code>  指向的对象</td>\n</tr>\n<tr>\n<td><code>u.reset(q)</code></td>\n<td>令 <code>u</code>  指向 <code>q</code>  指向的对象</td>\n</tr>\n<tr>\n<td><code>u.reset(nullptr)</code></td>\n<td>将 <code>u</code>  置空</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"weak_ptr\"><a class=\"anchor\" href=\"#weak_ptr\">#</a> weak_ptr</h4>\n<ul>\n<li><code>weak_ptr</code>  是一种不控制所指向对象生存期的智能指针。</li>\n<li>指向一个由 <code>shared_ptr</code>  管理的对象，不改变 <code>shared_ptr</code>  的引用计数。</li>\n<li>一旦最后一个指向对象的 <code>shared_ptr</code>  被销毁，对象就会被释放，不管有没有 <code>weak_ptr</code>  指向该对象。</li>\n</ul>\n<p><strong>weak_ptr 操作</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>weak_ptr&lt;T&gt; w</code></td>\n<td>空 <code>weak_ptr</code>  可以指向类型为 <code>T</code>  的对象</td>\n</tr>\n<tr>\n<td><code>weak_ptr&lt;T&gt; w(sp)</code></td>\n<td>与 <code>shared_ptr</code>  指向相同对象的 <code>weak_ptr</code> 。 <code>T</code>  必须能转换为 <code>sp</code>  指向的类型。</td>\n</tr>\n<tr>\n<td><code>w = p</code></td>\n<td><code>p</code>  可以是 <code>shared_ptr</code>  或一个 <code>weak_ptr</code> 。赋值后 <code>w</code>  和 <code>p</code>  共享对象。</td>\n</tr>\n<tr>\n<td><code>w.reset()</code></td>\n<td>将 <code>w</code>  置为空。</td>\n</tr>\n<tr>\n<td><code>w.use_count()</code></td>\n<td>与 <code>w</code>  共享对象的 <code>shared_ptr</code>  的数量。</td>\n</tr>\n<tr>\n<td><code>w.expired()</code></td>\n<td>若 <code>w.use_count()</code>  为 0，返回 <code>true</code> ，否则返回 <code>false</code></td>\n</tr>\n<tr>\n<td><code>w.lock()</code></td>\n<td>如果 <code>expired</code>  为 <code>true</code> ，则返回一个空 <code>shared_ptr</code> ；否则返回一个指向 <code>w</code>  的对象的 <code>shared_ptr</code> 。</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-121\"><a class=\"anchor\" href=\"#exercise-121\">#</a> Exercise 12.1</h3>\n<blockquote>\n<p>在此代码的结尾， <code>b1</code>  和  <code>b2</code>  各包含多少个元素？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>StrBlob b1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tStrBlob b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tb1 <span class=\"token operator\">=</span> b2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tb2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>它们实际操作的是同一个 <code>vector</code> ，都包含 4 个元素。在代码的结尾， <code>b2</code>  被析构了，不影响  <code>b1</code>  的元素。</p>\n<h3 id=\"exercise-122\"><a class=\"anchor\" href=\"#exercise-122\">#</a> Exercise 12.2</h3>\n<blockquote>\n<p>编写你自己的 <code>StrBlob</code>  类，包含 <code>const</code>  版本的  <code>front</code>  和  <code>back</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;exception></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlob</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">using</span> size_type <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    size_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pop_back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        data<span class=\"token operator\">-></span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex12_02.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> StrBlob csb<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pezy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    StrBlob sb<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mooophy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> csb<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> csb<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sb<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-123\"><a class=\"anchor\" href=\"#exercise-123\">#</a> Exercise 12.3</h3>\n<blockquote>\n<p><code>StrBlob</code>  需要 <code>const</code>  版本的 <code>push_back</code>  和  <code>pop_back</code>  吗？如需要，添加进去。否则，解释为什么不需要。</p>\n</blockquote>\n<p>解：</p>\n<p>不需要。 <code>push_back</code>  和  <code>pop_back</code>  会改变对象的内容。而  <code>const</code>  对象是只读的，因此不需要。</p>\n<h3 id=\"exercise-124\"><a class=\"anchor\" href=\"#exercise-124\">#</a> Exercise 12.4</h3>\n<blockquote>\n<p>在我们的  <code>check</code>  函数中，没有检查  <code>i</code>  是否大于 0。为什么可以忽略这个检查？</p>\n</blockquote>\n<p>解：</p>\n<p>因为  <code>size_type</code>  是一个无符号整型，当传递给  <code>check</code>  的参数小于 0 的时候，参数值会转换成一个正整数。</p>\n<h3 id=\"exercise-125\"><a class=\"anchor\" href=\"#exercise-125\">#</a> Exercise 12.5</h3>\n<blockquote>\n<p>我们未编写接受一个  <code>initializer_list explicit</code>  参数的构造函数。讨论这个设计策略的优点和缺点。</p>\n</blockquote>\n<p>解：</p>\n<p>构造函数不是  <code>explicit</code>  的，意味着可以从  <code>initializer_list</code>  隐式转换为  <code>StrBlob</code> 。在  <code>StrBlob</code>  对象中，只有一个数据成员  <code>data</code> ，而  <code>StrBlob</code>  对象本身的含义，也是一个<strong>管理字符串的序列</strong>。因此，从  <code>initializer_list</code>  到  <code>StrBlob</code>  的转换，在逻辑上是可行的。而这个设计策略的缺点，可能在某些地方我们确实需要  <code>initializer_list</code> ，而编译器仍会将之转换为  <code>StrBlob</code> 。</p>\n<h3 id=\"exercise-126\"><a class=\"anchor\" href=\"#exercise-126\">#</a> Exercise 12.6</h3>\n<blockquote>\n<p>编写函数，返回一个动态分配的  <code>int</code>  的 <code>vector</code> 。将此 <code>vector</code>  传递给另一个函数，这个函数读取标准输入，将读入的值保存在  <code>vector</code>  元素中。再将 <code>vector</code>  传递给另一个函数，打印读入的值。记得在恰当的时刻 <code>delete vector</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">alloc_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">assign_vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tp<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">alloc_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">assign_vector</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">print_vector</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-127\"><a class=\"anchor\" href=\"#exercise-127\">#</a> Exercise 12.7</h3>\n<blockquote>\n<p>重做上一题，这次使用  <code>shared_ptr</code>  而不是内置指针。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">alloc_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">assign_vector</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tp<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_vector</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">alloc_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">assign_vector</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">print_vector</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-128\"><a class=\"anchor\" href=\"#exercise-128\">#</a> Exercise 12.8</h3>\n<blockquote>\n<p>下面的函数是否有错误？如果有，解释错误原因。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：</p>\n<p>有错误。 <code>p</code>  会被强制转换成 <code>bool</code> ，继而没有释放指针  <code>p</code>  指向的对象。</p>\n<h3 id=\"exercise-129\"><a class=\"anchor\" href=\"#exercise-129\">#</a> Exercise 12.9</h3>\n<blockquote>\n<p>解释下面代码执行的结果。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>r <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> q2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r2 <span class=\"token operator\">=</span> q2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p><code>r</code>  和  <code>q</code>  指向 42，而之前  <code>r</code>  指向的 100 的内存空间并没有被释放，因此会发生内存泄漏。 <code>r2</code>  和  <code>q2</code>  都是智能指针，当对象空间不被引用的时候会自动释放。</p>\n<h3 id=\"exercise-1210\"><a class=\"anchor\" href=\"#exercise-1210\">#</a> Exercise 12.10</h3>\n<blockquote>\n<p>下面的代码调用了第 413 页中定义的 <code>process</code>  函数，解释此调用是否正确。如果不正确，应如何修改？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>正确。 <code>shared_ptr&lt;int&gt;(p)</code>  会创建一个临时的智能指针，这个智能指针与  <code>p</code>  引用同一个对象，此时引用计数为 2。当表达式结束时，临时的智能指针被销毁，此时引用计数为 1。</p>\n<h3 id=\"exercise-1211\"><a class=\"anchor\" href=\"#exercise-1211\">#</a> Exercise 12.11</h3>\n<blockquote>\n<p>如果我们像下面这样调用  <code>process</code> ，会发生什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>这样会创建一个新的智能指针，它的引用计数为 1，这个智能指针所指向的空间与  <code>p</code>  相同。在表达式结束后，这个临时智能指针会被销毁，引用计数为 0，所指向的内存空间也会被释放。而导致  <code>p</code>  所指向的空间被释放，使得 p` 成为一个空悬指针。</p>\n<h3 id=\"exercise-1212\"><a class=\"anchor\" href=\"#exercise-1212\">#</a> Exercise 12.12</h3>\n<blockquote>\n<p><code>p</code>  和  <code>sp</code>  的定义如下，对于接下来的对  <code>process</code>  的每个调用，如果合法，解释它做了什么，如果不合法，解释错误原因：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> sp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 合法。将 <code>sp</code>  拷贝给  <code>process</code>  函数的形参，在函数里面引用计数为 2，函数结束后引用计数为 1。</li>\n<li>(b) 不合法。不能从内置指针隐式转换为智能指针。</li>\n<li>(c) 不合法。不能从内置指针隐式转换为智能指针。</li>\n<li>(d) 合法。但是智能指针和内置指针一起使用可能会出现问题，在表达式结束后智能指针会被销毁，它所指向的对象也被释放。而此时内置指针  <code>p</code>  依旧指向该内存空间。之后对内置指针  <code>p</code>  的操作可能会引发错误。</li>\n</ul>\n<h3 id=\"exercise-1213\"><a class=\"anchor\" href=\"#exercise-1213\">#</a> Exercise 12.13</h3>\n<blockquote>\n<p>如果执行下面的代码，会发生什么？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> sp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>智能指针  <code>sp</code>  所指向空间已经被释放，再对  <code>sp</code>  进行操作会出现错误。</p>\n<h3 id=\"exercise-1214\"><a class=\"anchor\" href=\"#exercise-1214\">#</a> Exercise 12.14</h3>\n<blockquote>\n<p>编写你自己版本的用  <code>shared_ptr</code>  管理  <code>connection</code>  的函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">connection</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string ip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ip</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">port</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">destination</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string ip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">destination</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ip</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">port</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>connection <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>destination<span class=\"token operator\">*</span> pDest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>connection<span class=\"token operator\">></span> <span class=\"token function\">pConn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>pDest<span class=\"token operator\">-></span>ip<span class=\"token punctuation\">,</span> pDest<span class=\"token operator\">-></span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"creating connection(\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>pConn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>connection pConn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connection close(\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span>ip <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span>port <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">end_connection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">*</span> pConn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pConn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>destination <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tconnection conn <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>connection<span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>conn<span class=\"token punctuation\">,</span> end_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connecting now(\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tdestination <span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"220.181.111.111\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10086</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1215\"><a class=\"anchor\" href=\"#exercise-1215\">#</a> Exercise 12.15</h3>\n<blockquote>\n<p>重写上一题的程序，用  <code>lambda</code>  代替 <code>end_connection</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">connection</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string ip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ip</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">port</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">destination</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string ip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">destination</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ip</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">port</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>connection <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>destination<span class=\"token operator\">*</span> pDest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>connection<span class=\"token operator\">></span> <span class=\"token function\">pConn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>pDest<span class=\"token operator\">-></span>ip<span class=\"token punctuation\">,</span> pDest<span class=\"token operator\">-></span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"creating connection(\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>pConn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>connection pConn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connection close(\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span>ip <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pConn<span class=\"token punctuation\">.</span>port <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>destination <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tconnection conn <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>connection<span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>conn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>connection<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connecting now(\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tdestination <span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"220.181.111.111\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10086</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1216\"><a class=\"anchor\" href=\"#exercise-1216\">#</a> Exercise 12.16</h3>\n<blockquote>\n<p>如果你试图拷贝或赋值  <code>unique_ptr</code> ，编译器并不总是能给出易于理解的错误信息。编写包含这种错误的程序，观察编译器如何诊断这种错误。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// unique_ptr&lt;string> p2(p1); // copy</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//                      ^</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string>'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// unique_ptr&lt;string> p3 = p1; // assign</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//                      ^</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string>'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1217\"><a class=\"anchor\" href=\"#exercise-1217\">#</a> Exercise 12.17</h3>\n<blockquote>\n<p>下面的  <code>unique_ptr</code>  声明中，哪些是合法的，哪些可能导致后续的程序错误？解释每个错误的问题在哪里。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ix <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ix<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pi2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> IntP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p0</span><span class=\"token punctuation\">(</span>ix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>pi2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> IntP <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<ul>\n<li>(a) 不合法。在定义一个  <code>unique_ptr</code>  时，需要将其绑定到一个 <code>new</code>  返回的指针上。</li>\n<li>(b) 不合法。理由同上。</li>\n<li>(c) 合法。但是也可能会使得  <code>pi2</code>  成为空悬指针。</li>\n<li>(d) 不合法。当  <code>p3</code>  被销毁时，它试图释放一个栈空间的对象。</li>\n<li>(e) 合法。</li>\n<li>(f) 不合法。 <code>p5</code>  和  <code>p2</code>  指向同一个对象，当  <code>p5</code>  和  <code>p2</code>  被销毁时，会使得同一个指针被释放两次。</li>\n</ul>\n<h3 id=\"exercise-1218\"><a class=\"anchor\" href=\"#exercise-1218\">#</a> Exercise 12.18</h3>\n<blockquote>\n<p><code>shared_ptr</code>  为什么没有  <code>release</code>  成员？</p>\n</blockquote>\n<p><code>release</code>  成员的作用是放弃控制权并返回指针，因为在某一时刻只能有一个  <code>unique_ptr</code>  指向某个对象， <code>unique_ptr</code>  不能被赋值，所以要使用  <code>release</code>  成员将一个  <code>unique_ptr</code>  的指针的所有权传递给另一个  <code>unique_ptr</code> 。而  <code>shared_ptr</code>  允许有多个  <code>shared_ptr</code>  指向同一个对象，因此不需要  <code>release</code>  成员。</p>\n<h3 id=\"exercise-1219\"><a class=\"anchor\" href=\"#exercise-1219\">#</a> Exercise 12.19</h3>\n<blockquote>\n<p>定义你自己版本的  <code>StrBlobPtr</code> ，更新  <code>StrBlob</code>  类，加入恰当的  <code>friend</code>  声明以及  <code>begin</code>  和  <code>end</code>  成员。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlob</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">using</span> size_type <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tStrBlobPtr <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tStrBlobPtr <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">StrBlob</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tsize_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pop_back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tdata<span class=\"token operator\">-></span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"back on empty StrBlob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> data<span class=\"token operator\">-></span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StrBlobPtr</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">StrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">curr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">StrBlobPtr</span><span class=\"token punctuation\">(</span>StrBlob <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> size_t sz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">wptr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">curr</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> StrBlobPtr<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>curr <span class=\"token operator\">!=</span> curr<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dereference past end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tStrBlobPtr<span class=\"token operator\">&amp;</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"increment past end of StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token operator\">++</span>curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unbound StrBlobPtr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> ret<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> wptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\tsize_t curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>StrBlobPtr <span class=\"token class-name\">StrBlob</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">StrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>StrBlobPtr <span class=\"token class-name\">StrBlob</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">StrBlobPtr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1220\"><a class=\"anchor\" href=\"#exercise-1220\">#</a> Exercise 12.20</h3>\n<blockquote>\n<p>编写程序，逐行读入一个输入文件，将内容存入一个  <code>StrBlob</code>  中，用一个  <code>StrBlobPtr</code>  打印出  <code>StrBlob</code>  中的每个元素。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"exercise12_19.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"books.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tStrBlob sb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>StrBlobPtr sbp <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> sbp <span class=\"token operator\">!=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> sbp<span class=\"token punctuation\">.</span><span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> sbp<span class=\"token punctuation\">.</span><span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1221\"><a class=\"anchor\" href=\"#exercise-1221\">#</a> Exercise 12.21</h3>\n<blockquote>\n<p>也可以这样编写  <code>StrBlobPtr</code>  的  <code>deref</code>  成员：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dereference past end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你认为哪个版本更好？为什么？</p>\n<p>解：</p>\n<p>原来的版本更好，可读性更高。</p>\n<h3 id=\"exercise-1222\"><a class=\"anchor\" href=\"#exercise-1222\">#</a> Exercise 12.22</h3>\n<blockquote>\n<p>为了能让  <code>StrBlobPtr</code>  使用  <code>const StrBlob</code> ，你觉得应该如何修改？定义一个名为 <code>ConstStrBlobPtr</code>  的类，使其能够指向  <code>const StrBlob</code> 。</p>\n</blockquote>\n<p>解：</p>\n<p>构造函数改为接受  <code>const Strblob &amp;</code>  , 然后给  <code>Strblob</code>  类添加两个  <code>const</code>  成员函数  <code>cbegin</code>  和  <code>cend</code> ，返回  <code>ConstStrBlobPtr</code> 。</p>\n<h2 id=\"dynamic-arrays\"><a class=\"anchor\" href=\"#dynamic-arrays\">#</a> Dynamic Arrays</h2>\n<hr />\n<h3 id=\"动态数组\"><a class=\"anchor\" href=\"#动态数组\">#</a> 动态数组</h3>\n<h4 id=\"new和数组\"><a class=\"anchor\" href=\"#new和数组\">#</a> new 和数组</h4>\n<ul>\n<li>\n<p><code>new</code>  一个动态数组：</p>\n<ul>\n<li>类型名之后加一对方括号，指明分配的对象数目（必须是整型，不必是常量）。</li>\n<li>返回<strong>指向第一个对象的指针</strong>。</li>\n<li><code>int *p = new int[size];</code></li>\n</ul>\n</li>\n<li>\n<p><code>delete</code>  一个动态数组：</p>\n<ul>\n<li><code>delete [] p;</code></li>\n</ul>\n</li>\n<li>\n<p><code>unique_ptr</code>  和数组：</p>\n<ul>\n<li>指向数组的 <code>unique_ptr</code>  不支持成员访问运算符（点和箭头）。</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>unique_ptr&lt;T[]&gt; u</code></td>\n<td><code>u</code>  可以指向一个动态分配的数组，整数元素类型为 <code>T</code></td>\n</tr>\n<tr>\n<td><code>unique_ptr&lt;T[]&gt; u(p)</code></td>\n<td><code>u</code>  指向内置指针 <code>p</code>  所指向的动态分配的数组。 <code>p</code>  必须能转换为类型 <code>T*</code> 。</td>\n</tr>\n<tr>\n<td><code>u[i]</code></td>\n<td>返回 <code>u</code>  拥有的数组中位置 <code>i</code>  处的对象。 <code>u</code>  必须指向一个数组。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"allocator类\"><a class=\"anchor\" href=\"#allocator类\">#</a> allocator 类</h4>\n<ul>\n<li>标准库 <code>allocator</code>  类定义在头文件 <code>memory</code>  中，帮助我们将内存分配和对象构造分离开。</li>\n<li>分配的是原始的、未构造的内存。</li>\n<li><code>allocator</code>  是一个模板。</li>\n<li><code>allocator&lt;string&gt; alloc;</code></li>\n</ul>\n<p><strong>标准库 allocator 类及其算法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>allocator&lt;T&gt; a</code></td>\n<td>定义了一个名为 <code>a</code>  的 <code>allocator</code>  对象，它可以为类型为 <code>T</code>  的对象分配内存</td>\n</tr>\n<tr>\n<td><code>a.allocate(n)</code></td>\n<td>分配一段原始的、未构造的内存，保存 <code>n</code>  个类型为 <code>T</code>  的对象。</td>\n</tr>\n<tr>\n<td><code>a.deallocate(p, n)</code></td>\n<td>释放从 <code>T*</code>  指针 <code>p</code>  中地址开始的内存，这块内存保存了 <code>n</code>  个类型为 <code>T</code>  的对象； <code>p</code>  必须是一个先前由 <code>allocate</code>  返回的指针。且 <code>n</code>  必须是 <code>p</code>  创建时所要求的大小。在调用 <code>deallocate</code>  之前，用户必须对每个在这块内存中创建的对象调用 <code>destroy</code> 。</td>\n</tr>\n<tr>\n<td><code>a.construct(p, args)</code></td>\n<td><code>p</code>  必须是一个类型是 <code>T*</code>  的指针，指向一块原始内存； <code>args</code>  被传递给类型为 <code>T</code>  的构造函数，用来在 <code>p</code>  指向的内存中构造一个对象。</td>\n</tr>\n<tr>\n<td><code>a.destroy(p)</code></td>\n<td><code>p</code>  为 <code>T*</code>  类型的指针，此算法对 <code>p</code>  指向的对象执行析构函数。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>allocator 伴随算法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>uninitialized_copy(b, e, b2)</code></td>\n<td>从迭代器 <code>b</code>  和 <code>e</code>  给定的输入范围中拷贝元素到迭代器 <code>b2</code>  指定的未构造的原始内存中。 <code>b2</code>  指向的内存必须足够大，能够容纳输入序列中元素的拷贝。</td>\n</tr>\n<tr>\n<td><code>uninitialized_copy_n(b, n, b2)</code></td>\n<td>从迭代器 <code>b</code>  指向的元素开始，拷贝 <code>n</code>  个元素到 <code>b2</code>  开始的内存中。</td>\n</tr>\n<tr>\n<td><code>uninitialized_fill(b, e, t)</code></td>\n<td>在迭代器 <code>b</code>  和 <code>e</code>  执行的原始内存范围中创建对象，对象的值均为 <code>t</code>  的拷贝。</td>\n</tr>\n<tr>\n<td><code>uninitialized_fill_n(b, n, t)</code></td>\n<td>从迭代器 <code>b</code>  指向的内存地址开始创建 <code>n</code>  个对象。 <code>b</code>  必须指向足够大的未构造的原始内存，能够容纳给定数量的对象。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>定义在头文件 <code>memory</code>  中。</li>\n<li>在给定目的位置创建元素，而不是由系统分配内存给他们。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1223\"><a class=\"anchor\" href=\"#exercise-1223\">#</a> Exercise 12.23</h3>\n<blockquote>\n<p>编写一个程序，连接两个字符串字面常量，将结果保存在一个动态分配的 <code>char</code>  数组中。重写这个程序，连接两个标准库 <code>string</code>  对象。</p>\n</blockquote>\n<p>解:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">strcat_s</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">strcat_s</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> r <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> r <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1224\"><a class=\"anchor\" href=\"#exercise-1224\">#</a> Exercise 12.24</h3>\n<blockquote>\n<p>编写一个程序，从标准输入读取一个字符串，存入一个动态分配的字符数组中。描述你的程序如何处理变长输入。测试你的程序，输入一个超出你分配的数组长度的字符串。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"How long do you want the string? \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"input the string: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1225\"><a class=\"anchor\" href=\"#exercise-1225\">#</a> Exercise 12.25</h3>\n<blockquote>\n<p>给定下面的 <code>new</code>  表达式，你应该如何释放 <code>pa</code> ？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pa<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1226\"><a class=\"anchor\" href=\"#exercise-1226\">#</a> Exercise 12.26</h3>\n<blockquote>\n<p>用  <code>allocator</code>  重写第 427 页中的程序。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tallocator<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">auto</span> q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s <span class=\"token operator\">&amp;&amp;</span> q <span class=\"token operator\">!=</span> p <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token operator\">--</span>q <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\talloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"using-the-library-a-text-query-program\"><a class=\"anchor\" href=\"#using-the-library-a-text-query-program\">#</a> Using the Library: A Text-Query Program</h2>\n<hr />\n<h3 id=\"exercise-1227\"><a class=\"anchor\" href=\"#exercise-1227\">#</a> Exercise 12.27</h3>\n<blockquote>\n<p><code>TextQuery</code>  和  <code>QueryResult</code>  类只使用了我们已经介绍过的语言和标准库特性。不要提前看后续章节内容，只用已经学到的知识对这两个类编写你自己的版本。</p>\n</blockquote>\n<p>解：</p>\n<p>头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">EX12_27_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EX12_27_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TextQuery</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">using</span> line_no <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">TextQuery</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ifstream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tQueryResult <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span> file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">>></span><span class=\"token operator\">></span> wm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryResult</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> QueryResult<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">QueryResult</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>TextQuery<span class=\"token double-colon punctuation\">::</span>line_no<span class=\"token operator\">>></span> p<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">sought</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string sought<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>TextQuery<span class=\"token double-colon punctuation\">::</span>line_no<span class=\"token operator\">>></span> lines<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span> file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> QueryResult<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_12_27.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">TextQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TextQuery</span><span class=\"token punctuation\">(</span>ifstream<span class=\"token operator\">&amp;</span> ifs<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstring text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tfile<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> file<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tistringstream <span class=\"token function\">line</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tstring word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>lines <span class=\"token operator\">=</span> wm<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lines<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\tlines<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tlines<span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>QueryResult <span class=\"token class-name\">TextQuery</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">static</span> shared_ptr<span class=\"token operator\">&lt;</span>set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">>></span> <span class=\"token function\">nodata</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">auto</span> loc <span class=\"token operator\">=</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">QueryResult</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> nodata<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">QueryResult</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> loc<span class=\"token operator\">-></span>second<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> QueryResult<span class=\"token operator\">&amp;</span> qr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> qr<span class=\"token punctuation\">.</span>sought <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" occurs \"</span> <span class=\"token operator\">&lt;&lt;</span> qr<span class=\"token punctuation\">.</span>lines<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"time\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">.</span>lines<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"s\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>qr<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t(line \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">.</span>file<span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ex_12_27.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">runQueries</span><span class=\"token punctuation\">(</span>ifstream<span class=\"token operator\">&amp;</span> infile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tTextQuery <span class=\"token function\">tq</span><span class=\"token punctuation\">(</span>infile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"enter word to look for, or q to quit: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> tq<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"storyDataFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">runQueries</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1228\"><a class=\"anchor\" href=\"#exercise-1228\">#</a> Exercise 12.28</h3>\n<blockquote>\n<p>编写程序实现文本查询，不要定义类来管理数据。你的程序应该接受一个文件，并与用户交互来查询单词。使用 <code>vector</code> 、 <code>map</code>  和  <code>set</code>  容器来保存来自文件的数据并生成查询结果。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H:/code/C++/Cpp_Primer_Answers/data/storyDataFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> dictionary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> lineNo<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string line<span class=\"token punctuation\">;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>lineNo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>istringstream <span class=\"token function\">line_stream</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string text<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">;</span> line_stream <span class=\"token operator\">>></span> text<span class=\"token punctuation\">;</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">remove_copy_if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ispunct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tdictionary<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>lineNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"enter word to look for, or q to quit: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tstring s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> found <span class=\"token operator\">=</span> dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found <span class=\"token operator\">!=</span> dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" occurs \"</span> <span class=\"token operator\">&lt;&lt;</span> found<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>found<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\" times\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\" time\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> found<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t(line \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") \"</span> <span class=\"token operator\">&lt;&lt;</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" occurs 0 time\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1229\"><a class=\"anchor\" href=\"#exercise-1229\">#</a> Exercise 12.29</h3>\n<blockquote>\n<p>我们曾经用 <code>do while</code>  循环来编写管理用户交互的循环。用 <code>do while</code>  重写本节程序，解释你倾向于哪个版本，为什么？</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"enter word to look for, or q to quit: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">,</span> tq<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我更喜欢  <code>while</code> ，这可能是习惯的问题。</p>\n<h3 id=\"exercise-1230\"><a class=\"anchor\" href=\"#exercise-1230\">#</a> Exercise 12.30</h3>\n<blockquote>\n<p>定义你自己版本的  <code>TextQuery</code>  和  <code>QueryResult</code>  类，并执行 12.3.1 节中的 <code>runQueries</code>  函数。</p>\n</blockquote>\n<p>解：</p>\n<p>同 12.27。</p>\n<h3 id=\"exercise-1231\"><a class=\"anchor\" href=\"#exercise-1231\">#</a> Exercise 12.31</h3>\n<blockquote>\n<p>如果用 <code>vector</code>  代替  <code>set</code>  保存行号，会有什么差别？哪个方法更好？为什么？</p>\n</blockquote>\n<p>如果用  <code>vector</code>  则会有单词重复的情况出现。而这里保存的是行号，不需要重复元素，所以  <code>set</code>  更好。</p>\n<h3 id=\"exercise-1232\"><a class=\"anchor\" href=\"#exercise-1232\">#</a> Exercise 12.32</h3>\n<blockquote>\n<p>重写  <code>TextQuery</code>  和  <code>QueryResult</code>  类，用 <code>StrBlob</code>  代替  <code>vector&lt;string&gt;</code>  保存输入文件。</p>\n</blockquote>\n<p>解：</p>\n<p><code>TextQuery</code>  和  <code>QueryResult</code>  类中的  <code>file</code>  成员，改为 指向  <code>StrBlob</code>  的智能指针。在访问  <code>StrBlob</code>  时，要使用  <code>StrBlobPtr</code> 。</p>\n<h3 id=\"exercise-1233\"><a class=\"anchor\" href=\"#exercise-1233\">#</a> Exercise 12.33</h3>\n<blockquote>\n<p>在第 15 章中我们将扩展查询系统，在  <code>QueryResult</code>  类中将会需要一些额外的成员。添加名为  <code>begin</code>  和  <code>end</code>  的成员，返回一个迭代器，指向一个给定查询返回的行号的  <code>set</code>  中的位置。再添加一个名为  <code>get_file</code>  的成员，返回一个  <code>shared_ptr</code> ，指向  <code>QueryResult</code>  对象中的文件。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryResult</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">using</span> Iter <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>line_no<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIter <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> lines<span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIter <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> lines<span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span> <span class=\"token function\">get_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        },
        {
            "id": "http://sakupinera.github.io/2023/01/03/cpp/cpp-primer/Chapter%2011%20Associative%20Containers/",
            "url": "http://sakupinera.github.io/2023/01/03/cpp/cpp-primer/Chapter%2011%20Associative%20Containers/",
            "title": "C++ Primer - Chapter 11 Associative Containers",
            "date_published": "2023-01-02T16:00:00.000Z",
            "content_html": "<h1 id=\"chapter-11-associative-containers\"><a class=\"anchor\" href=\"#chapter-11-associative-containers\">#</a> Chapter 11 Associative Containers</h1>\n<h2 id=\"using-an-associative-container\"><a class=\"anchor\" href=\"#using-an-associative-container\">#</a> Using an Associative Container</h2>\n<hr />\n<ul>\n<li>关联容器和顺序容器的不同：关联容器中的元素时按照<strong>关键字</strong>来保存和访问的。</li>\n<li>关联容器支持通过关键字来高效地查找和读取元素，基本的关联容器类型是  <code>map</code>  和  <code>set</code> 。</li>\n</ul>\n<p><strong>关联容器类型</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>容器类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>按顺序存储</td>\n<td></td>\n</tr>\n<tr>\n<td><code>map</code></td>\n<td>关键数组：保存 <code>关键字-值</code> 对</td>\n</tr>\n<tr>\n<td><code>set</code></td>\n<td>关键字即值，即只保存关键字的容器</td>\n</tr>\n<tr>\n<td><code>multimap</code></td>\n<td>支持同一个键多次出现的 <code>map</code></td>\n</tr>\n<tr>\n<td><code>multiset</code></td>\n<td>支持同一个键多次出现的 <code>set</code></td>\n</tr>\n<tr>\n<td>无序集合</td>\n<td></td>\n</tr>\n<tr>\n<td><code>unordered_map</code></td>\n<td>用哈希函数组织的 <code>map</code></td>\n</tr>\n<tr>\n<td><code>unordered_set</code></td>\n<td>用哈希函数组织的 <code>set</code></td>\n</tr>\n<tr>\n<td><code>unordered_multimap</code></td>\n<td>哈希组织的 <code>map</code> ，关键字可以重复出现</td>\n</tr>\n<tr>\n<td><code>unordered_multiset</code></td>\n<td>哈希组织的 <code>set</code> ，关键字可以重复出现</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-111\"><a class=\"anchor\" href=\"#exercise-111\">#</a> Exercise 11.1</h3>\n<blockquote>\n<p>描述 <code>map</code>  和 <code>vector</code>  的不同。</p>\n</blockquote>\n<p>解：</p>\n<p><code>map</code>  是关联容器，  <code>vector</code>  是顺序容器。</p>\n<h3 id=\"exercise-112\"><a class=\"anchor\" href=\"#exercise-112\">#</a> Exercise 11.2</h3>\n<blockquote>\n<p>分别给出最适合使用 <code>list</code> 、 <code>vector</code> 、 <code>deque</code> 、 <code>map</code>  以及 <code>set</code>  的例子。</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li><code>list</code> ：双向链表，适合频繁插入删除元素的场景。</li>\n<li><code>vector</code> ：适合频繁访问元素的场景。</li>\n<li><code>deque</code> ：双端队列，适合频繁在头尾插入删除元素的场景。</li>\n<li><code>map</code> ：字典。</li>\n<li><code>set</code> ：适合有序不重复的元素的场景。</li>\n</ul>\n<h3 id=\"exercise-113\"><a class=\"anchor\" href=\"#exercise-113\">#</a> Exercise 11.3</h3>\n<blockquote>\n<p>编写你自己的单词计数程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> word_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        word_count<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> elem <span class=\"token operator\">:</span> word_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> elem<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> elem<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-114\"><a class=\"anchor\" href=\"#exercise-114\">#</a> Exercise 11.4</h3>\n<blockquote>\n<p>扩展你的程序，忽略大小写和标点。例如，&quot;example.&quot;、&quot;example,&quot; 和 &quot;Example&quot; 应该递增相同的计数器。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">word_count_pro</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> ch <span class=\"token operator\">:</span> word<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tch <span class=\"token operator\">=</span> <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tword<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ispunct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tword<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token operator\">++</span>m<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">word_count_pro</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"overview-of-the-associative-containers\"><a class=\"anchor\" href=\"#overview-of-the-associative-containers\">#</a> Overview of the Associative Containers</h2>\n<hr />\n<h3 id=\"关联容器概述\"><a class=\"anchor\" href=\"#关联容器概述\">#</a> 关联容器概述</h3>\n<h4 id=\"定义关联容器\"><a class=\"anchor\" href=\"#定义关联容器\">#</a> 定义关联容器</h4>\n<ul>\n<li>需要指定元素类型。</li>\n<li>列表初始化：\n<ul>\n<li><code>map</code> ： <code>map&lt;string, int&gt; word_count = &#123;&#123;\"a\", 1&#125;, &#123;\"b\", 2&#125;&#125;;</code></li>\n<li><code>set</code> ： <code>set&lt;string&gt; exclude = &#123;&quot;the&quot;, &quot;a&quot;&#125;;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"关键字类型的要求\"><a class=\"anchor\" href=\"#关键字类型的要求\">#</a> 关键字类型的要求</h4>\n<ul>\n<li>对于有序容器，关键字类型必须定义元素比较的方法。默认是 <code>&lt;</code> 。</li>\n<li>如果想传递一个比较的函数，可以这样定义： <code>multiset&lt;Sales_data, decltype(compareIsbn)*&gt; bookstore(compareIsbn);</code></li>\n</ul>\n<h4 id=\"pair\"><a class=\"anchor\" href=\"#pair\">#</a> pair</h4>\n<ul>\n<li>在 <code>utility</code>  头文件中定义。</li>\n<li>一个 <code>pair</code>  保存两个数据成员，两个类型不要求一样。</li>\n</ul>\n<p><strong>pair 的操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pair&lt;T1, T2&gt; p;</code></td>\n<td><code>p</code>  是一个 <code>pair</code> ，两个类型分别是 <code>T1</code>  和 <code>T2</code>  的成员都进行了值初始化。</td>\n</tr>\n<tr>\n<td><code>pair&lt;T1, T2&gt; p(v1, v2);</code></td>\n<td><code>first</code>  和 <code>second</code>  分别用 <code>v1</code>  和 <code>v2</code>  进行初始化。</td>\n</tr>\n<tr>\n<td><code>pair&lt;T1, T2&gt;p = &#123;v1, v2&#125;;</code></td>\n<td>等价于 `p (v1, v2)                                             |</td>\n</tr>\n<tr>\n<td><code>make_pair(v1, v2);</code></td>\n<td><code>pair</code>  的类型从 <code>v1</code>  和 <code>v2</code>  的类型推断出来。</td>\n</tr>\n<tr>\n<td><code>p.first</code></td>\n<td>返回 <code>p</code>  的名为 <code>first</code>  的数据成员。</td>\n</tr>\n<tr>\n<td><code>p.second</code></td>\n<td>返回 <code>p</code>  的名为 <code>second</code>  的数据成员。</td>\n</tr>\n<tr>\n<td><code>p1 relop p2</code></td>\n<td>运算关系符按字典序定义。</td>\n</tr>\n<tr>\n<td><code>p1 == p2</code></td>\n<td>必须两对元素两两相等</td>\n</tr>\n<tr>\n<td><code>p1 != p2</code></td>\n<td>同上</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-115\"><a class=\"anchor\" href=\"#exercise-115\">#</a> Exercise 11.5</h3>\n<blockquote>\n<p>解释 <code>map</code>  和 <code>set</code>  的区别。你如何选择使用哪个？</p>\n</blockquote>\n<p>解：</p>\n<p><code>map</code>  是键值对，而  <code>set</code>  只有键没有值。当我需要存储键值对的时候使用  <code>map</code> ，而只需要键的时候使用  <code>set</code> 。</p>\n<h3 id=\"exercise-116\"><a class=\"anchor\" href=\"#exercise-116\">#</a> Exercise 11.6</h3>\n<blockquote>\n<p>解释 <code>set</code>  和 <code>list</code>  的区别。你如何选择使用哪个？</p>\n</blockquote>\n<p><code>set</code>  是有序不重复集合，底层实现是红黑树，而  <code>list</code>  是无序可重复集合，底层实现是链表。</p>\n<h3 id=\"exercise-117\"><a class=\"anchor\" href=\"#exercise-117\">#</a> Exercise 11.7</h3>\n<blockquote>\n<p>定义一个 <code>map</code> ，关键字是家庭的姓，值是一个 <code>vector</code> ，保存家中孩子（们）的名。编写代码，实现添加新的家庭以及向已有家庭中添加新的孩子。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string ln<span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Last name:\\n\"</span><span class=\"token punctuation\">,</span> cin <span class=\"token operator\">>></span> ln <span class=\"token operator\">&amp;&amp;</span> ln <span class=\"token operator\">!=</span> <span class=\"token string\">\"@q\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string cn<span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"|-Children's names:\\n\"</span><span class=\"token punctuation\">,</span> cin <span class=\"token operator\">>></span> cn <span class=\"token operator\">&amp;&amp;</span> cn <span class=\"token operator\">!=</span> <span class=\"token string\">\"@q\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tm<span class=\"token punctuation\">[</span>ln<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-118\"><a class=\"anchor\" href=\"#exercise-118\">#</a> Exercise 11.8</h3>\n<blockquote>\n<p>编写一个程序，在一个 <code>vector</code>  而不是一个 <code>set</code>  中保存不重复的单词。使用 <code>set</code>  的优点是什么？</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ff\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string word<span class=\"token punctuation\">;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter plz:\\n\"</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> is_excluded <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>exclude<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exclude<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> reply <span class=\"token operator\">=</span> is_excluded <span class=\"token operator\">?</span> <span class=\"token string\">\"excluded\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"not excluded\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> reply <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>set</code>  的优点是集合本身的元素就是不重复。</p>\n<h3 id=\"exercise-119\"><a class=\"anchor\" href=\"#exercise-119\">#</a> Exercise 11.9</h3>\n<blockquote>\n<p>定义一个 <code>map</code> ，将单词与一个行号的 <code>list</code>  关联， <code>list</code>  中保存的是单词所出现的行号。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1110\"><a class=\"anchor\" href=\"#exercise-1110\">#</a> Exercise 11.10</h3>\n<blockquote>\n<p>可以定义一个 <code>vector&lt;int&gt;::iterator</code>  到  <code>int</code>  的 <code>map</code>  吗？ <code>list&lt;int&gt;::iterator</code>  到  <code>int</code>  的 <code>map</code>  呢？对于两种情况，如果不能，解释为什么。</p>\n</blockquote>\n<p>解：</p>\n<p>可以定义  <code>vector&lt;int&gt;::iterator</code>  到  <code>int</code>  的 <code>map</code> ，但是不能定义  <code>list&lt;int&gt;::iterator</code>  到  <code>int</code>  的 <code>map</code> 。因为 <code>map</code>  的键必须实现  <code>&lt;</code>  操作， <code>list</code>  的迭代器不支持比较运算。</p>\n<h3 id=\"exercise-1111\"><a class=\"anchor\" href=\"#exercise-1111\">#</a> Exercise 11.11</h3>\n<blockquote>\n<p>不使用 <code>decltype</code>  重新定义  <code>bookstore</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> Less <span class=\"token operator\">=</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Sales_data <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>multiset<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token punctuation\">,</span> Less<span class=\"token operator\">></span> <span class=\"token function\">bookstore</span><span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1112\"><a class=\"anchor\" href=\"#exercise-1112\">#</a> Exercise 11.12</h3>\n<blockquote>\n<p>编写程序，读入 <code>string</code>  和 <code>int</code>  的序列，将每个 <code>string</code>  和 <code>int</code>  存入一个 <code>pair</code>  中， <code>pair</code>  保存在一个 <code>vector</code>  中。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> str <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1113\"><a class=\"anchor\" href=\"#exercise-1113\">#</a> Exercise 11.13</h3>\n<blockquote>\n<p>在上一题的程序中，至少有三种创建 <code>pair</code>  的方法。编写此程序的三个版本，分别采用不同的方法创建 <code>pair</code> 。解释你认为哪种形式最易于编写和理解，为什么？</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> str<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用花括号的初始化器最易于理解和编写。</p>\n<h3 id=\"exercise-1114\"><a class=\"anchor\" href=\"#exercise-1114\">#</a> Exercise 11.14</h3>\n<blockquote>\n<p>扩展你在 11.2.1 节练习中编写的孩子姓达到名的 <code>map</code> ，添加一个 <code>pair</code>  的 <code>vector</code> ，保存孩子的名和生日。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_pair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Families</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">using</span> Child <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">using</span> Children <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">using</span> Data <span class=\"token operator\">=</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> Children<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> last_name<span class=\"token punctuation\">,</span> string <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> first_name<span class=\"token punctuation\">,</span> string birthday<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> child <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> birthday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t_data<span class=\"token punctuation\">[</span>last_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> _data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> child <span class=\"token operator\">:</span> pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> child<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> child<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tData _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tFamilies families<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">auto</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Please enter last name, first name and birthday:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string l<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">,</span> cin <span class=\"token operator\">>></span> l <span class=\"token operator\">>></span> f <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span> families<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tfamilies<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"operations-on-associative-containers\"><a class=\"anchor\" href=\"#operations-on-associative-containers\">#</a> Operations on Associative Containers</h2>\n<hr />\n<h3 id=\"关联容器操作\"><a class=\"anchor\" href=\"#关联容器操作\">#</a> 关联容器操作</h3>\n<p><strong>关联容器额外的类型别名</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型别名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>key_type</code></td>\n<td>此容器类型的关键字类型</td>\n</tr>\n<tr>\n<td><code>mapped_type</code></td>\n<td>每个关键字关联的类型，只适用于 <code>map</code></td>\n</tr>\n<tr>\n<td><code>value_type</code></td>\n<td>对于 <code>map</code> ，是 <code>pair&lt;const key_type, mapped_type&gt;</code> ; 对于 <code>set</code> ，和 <code>key_type</code>  相同。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"关联容器迭代器\"><a class=\"anchor\" href=\"#关联容器迭代器\">#</a> 关联容器迭代器</h4>\n<ul>\n<li>解引用一个关联容器迭代器时，会得到一个类型为容器的 <code>value_type</code>  的值的引用。</li>\n<li><code>set</code>  的迭代器是 <code>const</code>  的。</li>\n<li>遍历关联容器：使用 <code>begin</code>  和 <code>end</code> ，遍历 <code>map</code> 、 <code>multimap</code> 、 <code>set</code> 、 <code>multiset</code>  时，迭代器按<strong>关键字升序</strong>遍历元素。</li>\n</ul>\n<h4 id=\"添加元素\"><a class=\"anchor\" href=\"#添加元素\">#</a> 添加元素</h4>\n<p><strong>关联容器 <code>insert</code>  操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><code>insert</code>  操作</th>\n<th>关联容器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c.insert(v)</code>    <code>c.emplace(args)</code></td>\n<td><code>v</code>  是 <code>value_type</code>  类型的对象； <code>args</code>  用来构造一个元素。 对于 <code>map</code>  和 <code>set</code> ，只有元素的关键字不存在 <code>c</code>  中才插入或构造元素。函数返回一个 <code>pair</code> ，包含一个迭代器，指向具有指定关键字的元素，以及一个指示插入是否成功的 <code>bool</code>  值。对于 <code>multimap</code>  和 <code>multiset</code>  则会插入范围中的每个元素。</td>\n</tr>\n<tr>\n<td><code>c.insert(b, e)</code>   <code>c.insert(il)</code></td>\n<td><code>b</code>  和 <code>e</code>  是迭代器，表示一个 <code>c::value_type</code>  类型值的范围； <code>il</code>  是这种值的花括号列表。函数返回 <code>void</code> 。对于  <code>map</code>  和 <code>set</code> ，只插入关键字不在 <code>c</code>  中的元素。</td>\n</tr>\n<tr>\n<td><code>c.insert(p, v)</code>    <code>c.emplace(p, args)</code></td>\n<td>类似 <code>insert(v)</code> ，但将迭代器 <code>p</code>  作为一个提示，指出从哪里开始搜索新元素应该存储的位置。返回一个迭代器，指向具有给定关键字的元素。</td>\n</tr>\n</tbody>\n</table>\n<p>向 <code>map</code>  添加元素：</p>\n<ul>\n<li><code>word_count.insert(&#123;word, 1&#125;);</code></li>\n<li><code>word_count.insert(make_pair(word, 1));</code></li>\n<li><code>word_count.insert(pair&lt;string, size_t&gt;(word, 1));</code></li>\n<li><code>word_count.insert(map&lt;string, size_t&gt;::value_type (word, 1));</code></li>\n</ul>\n<h4 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素</h4>\n<p><strong>从关联容器中删除元素</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c.erase(k)</code></td>\n<td>从 <code>c</code>  中删除每个关键字为 <code>k</code>  的元素。返回一个 <code>size_type</code>  值，指出删除的元素的数量。</td>\n</tr>\n<tr>\n<td><code>c.erase(p)</code></td>\n<td>从 <code>c</code>  中删除迭代器 <code>p</code>  指定的元素。 <code>p</code>  必须指向 <code>c</code>  中一个真实元素，不能等于 <code>c.end()</code> 。返回一个指向 <code>p</code>  之后元素的迭代器，若 <code>p</code>  指向 <code>c</code>  中的尾元素，则返回 <code>c.end()</code></td>\n</tr>\n<tr>\n<td><code>c.erase(b, e)</code></td>\n<td>删除迭代器对 <code>b</code>  和 <code>e</code>  所表示范围中的元素。返回 <code>e</code> 。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"下标操作\"><a class=\"anchor\" href=\"#下标操作\">#</a> 下标操作</h4>\n<p><strong> <code>map</code>  和 <code>unordered_map</code>  的下标操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c[k]</code></td>\n<td>返回关键字为 <code>k</code>  的元素；如果 <code>k</code>  不在 <code>c</code>  中，添加一个关键字为 <code>k</code>  的元素，对其值初始化。</td>\n</tr>\n<tr>\n<td><code>c.at(k)</code></td>\n<td>访问关键字为 <code>k</code>  的元素，带参数检查；若 <code>k</code>  不存在在 <code>c</code>  中，抛出一个 <code>out_of_range</code>  异常。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查找元素\"><a class=\"anchor\" href=\"#查找元素\">#</a> 查找元素</h4>\n<p><strong>在一个关联容器中查找元素</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c.find(k)</code></td>\n<td>返回一个迭代器，指向第一个关键字为 <code>k</code>  的元素，若 <code>k</code>  不在容器中，则返回尾后迭代器</td>\n</tr>\n<tr>\n<td><code>c.count(k)</code></td>\n<td>返回关键字等于 <code>k</code>  的元素的数量。对于不允许重复关键字的容器，返回值永远是 0 或 1。</td>\n</tr>\n<tr>\n<td><code>c.lower_bound(k)</code></td>\n<td>返回一个迭代器，指向第一个关键字<strong>不小于</strong> <code>k</code>  的元素。</td>\n</tr>\n<tr>\n<td><code>c.upper_bound(k)</code></td>\n<td>返回一个迭代器，指向第一个关键字<strong>大于</strong> <code>k</code>  的元素。</td>\n</tr>\n<tr>\n<td><code>c.equal_range(k)</code></td>\n<td>返回一个迭代器 <code>pair</code> ，表示关键字等于 <code>k</code>  的元素的范围。若 <code>k</code>  不存在， <code>pair</code>  的两个成员均等于 <code>c.end()</code> 。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>lower_bound</code>  和 <code>upper_bound</code>  不适用于无序容器。</li>\n<li>下标和 <code>at</code>  操作只适用于非 <code>const</code>  的 <code>map</code>  和 <code>unordered_map</code> 。</li>\n</ul>\n<hr />\n<h3 id=\"exercise-1115\"><a class=\"anchor\" href=\"#exercise-1115\">#</a> Exercise 11.15</h3>\n<blockquote>\n<p>对一个 <code>int</code>  到 <code>vector&lt;int&gt;的map</code> ，其 <code>mapped_type</code> 、 <code>key_type</code>  和  <code>value_type</code>  分别是什么？</p>\n</blockquote>\n<p>解：</p>\n<ul>\n<li><code>mapped_type</code>  :  <code>vector&lt;int&gt;</code></li>\n<li><code>key_type</code>  :  <code>int</code></li>\n<li><code>value_type</code>  :  <code>std::pair&lt;const int,vector &gt;</code></li>\n</ul>\n<h3 id=\"exercise-1116\"><a class=\"anchor\" href=\"#exercise-1116\">#</a> Exercise 11.16</h3>\n<blockquote>\n<p>使用一个 <code>map</code>  迭代器编写一个表达式，将一个值赋予一个元素。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>it<span class=\"token operator\">-></span>second <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1117\"><a class=\"anchor\" href=\"#exercise-1117\">#</a> Exercise 11.17</h3>\n<blockquote>\n<p>假定 <code>c</code>  是一个 <code>string</code>  的 <code>multiset</code> ， <code>v</code>  是一个 <code>string</code>  的 <code>vector</code> ，解释下面的调用。指出每个调用是否合法：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inserter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inserter</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>第二个调用不合法，因为  <code>multiset</code>  没有  <code>push_back</code>  方法。其他调用都合法。</p>\n<h3 id=\"exercise-1118\"><a class=\"anchor\" href=\"#exercise-1118\">#</a> Exercise 11.18</h3>\n<blockquote>\n<p>写出第 382 页循环中 <code>map_it</code>  的类型，不要使用 <code>auto</code>  或  <code>decltype</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator map_it <span class=\"token operator\">=</span> word_count<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1119\"><a class=\"anchor\" href=\"#exercise-1119\">#</a> Exercise 11.19</h3>\n<blockquote>\n<p>定义一个变量，通过对 11.2.2 节中的名为  <code>bookstore</code>  的 <code>multiset</code>  调用 <code>begin()</code>  来初始化这个变量。写出变量的类型，不要使用 <code>auto</code>  或  <code>decltype</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> compareType <span class=\"token operator\">=</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>multiset<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token punctuation\">,</span> compareType<span class=\"token operator\">></span> <span class=\"token function\">bookstore</span><span class=\"token punctuation\">(</span>compareIsbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>multiset<span class=\"token operator\">&lt;</span>Sales_data<span class=\"token punctuation\">,</span> compareType<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator c_it <span class=\"token operator\">=</span> bookstore<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1120\"><a class=\"anchor\" href=\"#exercise-1120\">#</a> Exercise 11.20</h3>\n<blockquote>\n<p>重写 11.1 节练习的单词计数程序，使用 <code>insert</code>  代替下标操作。你认为哪个程序更容易编写和阅读？解释原因。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">></span> counts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">auto</span> result <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> word<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span>result<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> count <span class=\"token operator\">:</span> counts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> count<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> count<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>second <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\" times\\n\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\" time\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>insert</code>  更容易阅读和编写。 <code>insert</code>  有返回值，可以明确的体现出插入操作的结果。</p>\n<h3 id=\"exercise-1121\"><a class=\"anchor\" href=\"#exercise-1121\">#</a> Exercise 11.21</h3>\n<blockquote>\n<p>假定 <code>word_count</code>  是一个 <code>string</code>  到 <code>size_t</code>  的 <code>map</code> ， <code>word</code>  是一个 <code>string</code> ，解释下面循环的作用：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">++</span>word_count<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>这条语句等价于：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">auto</span> result <span class=\"token operator\">=</span> word_count<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">++</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>若 <code>insert</code>  成功：先添加一个元素，然后返回一个  <code>pair</code> ， <code>pair</code>  的  <code>first</code>  元素是一个迭代器。这个迭代器指向刚刚添加的元素，这个元素是 <code>pair</code> ，然后递增 <code>pair</code>  的 <code>second</code>  成员。<br />\n若 <code>insert</code>  失败：递增已有指定关键字的元素的  <code>second</code>  成员。</p>\n<h3 id=\"exercise-1122\"><a class=\"anchor\" href=\"#exercise-1122\">#</a> Exercise 11.22</h3>\n<blockquote>\n<p>给定一个 <code>map&lt;string, vector&lt;int&gt;&gt;</code> ，对此容器的插入一个元素的 <code>insert</code>  版本，写出其参数类型和返回类型。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span>    <span class=\"token comment\">// 参数类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token double-colon punctuation\">::</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token comment\">// 返回类型</span></pre></td></tr></table></figure><h3 id=\"exercise-1123\"><a class=\"anchor\" href=\"#exercise-1123\">#</a> Exercise 11.23</h3>\n<blockquote>\n<p>11.2.1 节练习中的 <code>map</code>  以孩子的姓为关键字，保存他们的名的 <code>vector</code> ，用 <code>multimap</code>  重写此 <code>map</code> 。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>multimap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    multimap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> families<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string lname<span class=\"token punctuation\">,</span> cname<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> cname <span class=\"token operator\">>></span> lname<span class=\"token punctuation\">;</span> families<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>lname<span class=\"token punctuation\">,</span> cname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> family <span class=\"token operator\">:</span> families<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> family<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> family<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1124\"><a class=\"anchor\" href=\"#exercise-1124\">#</a> Exercise 11.24</h3>\n<blockquote>\n<p>下面的程序完成什么功能？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>添加一个元素到 <code>map</code>  中，如果该键存在，则重新赋值。</p>\n<h3 id=\"exercise-1125\"><a class=\"anchor\" href=\"#exercise-1125\">#</a> Exercise 11.25</h3>\n<blockquote>\n<p>对比下面的程序与上一题程序</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>未定义行为， <code>vector</code>  的下标越界访问。</p>\n<h3 id=\"exercise-1126\"><a class=\"anchor\" href=\"#exercise-1126\">#</a> Exercise 11.26</h3>\n<blockquote>\n<p>可以用什么类型来对一个 <code>map</code>  进行下标操作？下标运算符返回的类型是什么？请给出一个具体例子 —— 即，定义一个 <code>map</code> ，然后写出一个可以用来对 <code>map</code>  进行下标操作的类型以及下标运算符将会返会的类型。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ss\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sz\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> KeyType <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>key_type<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> ReturnType <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>mapped_type<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1127\"><a class=\"anchor\" href=\"#exercise-1127\">#</a> Exercise 11.27</h3>\n<blockquote>\n<p>对于什么问题你会使用 <code>count</code>  来解决？什么时候你又会选择 <code>find</code>  呢？</p>\n</blockquote>\n<p>解：</p>\n<p>对于允许重复关键字的容器，应该用  <code>count</code>  ; 对于不允许重复关键字的容器，应该用  <code>find</code>  。</p>\n<h3 id=\"exercise-1128\"><a class=\"anchor\" href=\"#exercise-1128\">#</a> Exercise 11.28</h3>\n<blockquote>\n<p>对一个 <code>string</code>  到 <code>int</code>  的 <code>vector</code>  的 <code>map</code> ，定义并初始化一个变量来保存在其上调用 <code>find</code>  所返回的结果。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"exercise-1129\"><a class=\"anchor\" href=\"#exercise-1129\">#</a> Exercise 11.29</h3>\n<blockquote>\n<p>如果给定的关键字不在容器中， <code>upper_bound</code> 、 <code>lower_bound</code>  和  <code>equal_range</code>  分别会返回什么？</p>\n</blockquote>\n<p>解：</p>\n<p>如果给定的关键字不在容器中，则  <code>lower_bound</code>  和  <code>upper_bound</code>  会返回相等的迭代器，指向一个不影响排序的关键字插入位置。而 <code>equal_range</code>  会返回一个  <code>pair</code> ， <code>pair</code>  中的两个迭代器都指向关键字可以插入的位置。</p>\n<h3 id=\"exercise-1130\"><a class=\"anchor\" href=\"#exercise-1130\">#</a> Exercise 11.30</h3>\n<blockquote>\n<p>对于本节最后一个程序中的输出表达式，解释运算对象 <code>pos.first-&gt;second</code>  的含义。</p>\n</blockquote>\n<p>解：</p>\n<p><code>pos</code>  是一个 <code>pair</code> ， <code>pos.first</code>  是一个迭代器，指向匹配关键字的元素，该元素是一个  <code>pair</code> ，访问该元素的第二个成员。</p>\n<h3 id=\"exercise-1131\"><a class=\"anchor\" href=\"#exercise-1131\">#</a> Exercise 11.31</h3>\n<blockquote>\n<p>编写程序，定义一个作者及其作品的 <code>multimap</code> 。使用 <code>find</code>  在 <code>multimap</code>  中查找一个元素并用 <code>erase</code>  删除它。确保你的程序在元素不在 <code>map</code>  中时也能正常运行。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>multimap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> authors<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DMA\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LeetCode\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CLRS\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FTP\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPP-Concurrency\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstring author <span class=\"token operator\">=</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tstring work <span class=\"token operator\">=</span> <span class=\"token string\">\"CP5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">auto</span> found <span class=\"token operator\">=</span> authors<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">auto</span> count <span class=\"token operator\">=</span> authors<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found<span class=\"token operator\">-></span>second <span class=\"token operator\">==</span> work<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tauthors<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token operator\">++</span>found<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>author <span class=\"token operator\">:</span> authors<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> author<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> author<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1132\"><a class=\"anchor\" href=\"#exercise-1132\">#</a> Exercise 11.32</h3>\n<blockquote>\n<p>使用上一题定义的 <code>multimap</code>  编写一个程序，按字典序打印作者列表和他们的作品。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>multimap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> authors<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DMA\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LeetCode\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CLRS\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FTP\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"pezy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CP5\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPP-Concurrency\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>multiset<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> order_authors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>author <span class=\"token operator\">:</span> authors<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\torder_authors<span class=\"token punctuation\">[</span>author<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>author <span class=\"token operator\">:</span> order_authors<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> author<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>work <span class=\"token operator\">:</span> author<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> work <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1133\"><a class=\"anchor\" href=\"#exercise-1133\">#</a> Exercise 11.33</h3>\n<blockquote>\n<p>实现你自己版本的单词转换程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>ifstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token function\">buildMap</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>map_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> trans_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span> map_file <span class=\"token operator\">>></span> key <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>map_file<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> trans_map<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_not_of</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> trans_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> map_it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> map_it <span class=\"token operator\">==</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> s <span class=\"token operator\">:</span> map_it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">word_transform</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">,</span> ifstream <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">auto</span> trans_map <span class=\"token operator\">=</span> <span class=\"token function\">buildMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string text<span class=\"token punctuation\">;</span> <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>istringstream <span class=\"token function\">iss</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">;</span> iss <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> trans_map<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    ifstream <span class=\"token function\">ifs_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/word_transformation_bad.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ifs_content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/given_to_transform.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ifs_map <span class=\"token operator\">&amp;&amp;</span> ifs_content<span class=\"token punctuation\">)</span> <span class=\"token function\">word_transform</span><span class=\"token punctuation\">(</span>ifs_map<span class=\"token punctuation\">,</span> ifs_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">else</span> std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can't find the documents.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"exercise-1134\"><a class=\"anchor\" href=\"#exercise-1134\">#</a> Exercise 11.34</h3>\n<blockquote>\n<p>如果你将 <code>transform</code>  函数中的 <code>find</code>  替换为下标运算符，会发生什么情况？</p>\n</blockquote>\n<p>解：</p>\n<p>如果使用下标运算符，当关键字未在容器中时，会往容器中添加一个新元素。</p>\n<h3 id=\"exercise-1135\"><a class=\"anchor\" href=\"#exercise-1135\">#</a> Exercise 11.35</h3>\n<blockquote>\n<p>在 <code>buildMap</code>  中，如果进行如下改写，会有什么效果？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>trans_map<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 改为</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>trans_map<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解：</p>\n<p>当一个转换规则的关键字多次出现的时候，使用下标运算符会保留最后一次添加的规则，而用 insert 则保留第一次添加的规则。</p>\n<h3 id=\"exercise-1136\"><a class=\"anchor\" href=\"#exercise-1136\">#</a> Exercise 11.36</h3>\n<blockquote>\n<p>我们的程序并没检查输入文件的合法性。特别是，它假定转换规则文件中的规则都是有意义的。如果文件中的某一行包含一个关键字、一个空格，然后就结束了，会发生什么？预测程序的行为并进行验证，再与你的程序进行比较。</p>\n</blockquote>\n<p>解：</p>\n<p>如果关键字没有对应的规则，那么程序会抛出一个  <code>runtime_error</code> 。</p>\n<h2 id=\"the-unordered-containers\"><a class=\"anchor\" href=\"#the-unordered-containers\">#</a> The Unordered Containers</h2>\n<hr />\n<h3 id=\"无序容器\"><a class=\"anchor\" href=\"#无序容器\">#</a> 无序容器</h3>\n<ul>\n<li>有序容器使用比较运算符来组织元素；无序容器使用哈希函数和关键字类型的 <code>==</code>  运算符。</li>\n<li>理论上哈希技术可以获得更好的性能。</li>\n<li>无序容器在存储上组织为一组桶 (bucket)，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。</li>\n</ul>\n<p><strong>无序容器管理操作</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>桶接口</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><code>c.bucket_count()</code></td>\n<td>正在使用的桶的数目</td>\n</tr>\n<tr>\n<td><code>c.max_bucket_count()</code></td>\n<td>容器能容纳的最多的桶的数目</td>\n</tr>\n<tr>\n<td><code>c.bucket_size(n)</code></td>\n<td>第 <code>n</code>  个桶中有多少个元素</td>\n</tr>\n<tr>\n<td><code>c.bucket(k)</code></td>\n<td>关键字为 <code>k</code>  的元素在哪个桶中</td>\n</tr>\n<tr>\n<td><strong>桶迭代</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><code>local_iterator</code></td>\n<td>可以用来访问桶中元素的迭代器类型</td>\n</tr>\n<tr>\n<td><code>const_local_iterator</code></td>\n<td>桶迭代器的 <code>const</code>  版本</td>\n</tr>\n<tr>\n<td><code>c.begin(n)</code> ， <code>c.end(n)</code></td>\n<td>桶 <code>n</code>  的首元素迭代器</td>\n</tr>\n<tr>\n<td><code>c.cbegin(n)</code> ， <code>c.cend(n)</code></td>\n<td>与前两个函数类似，但返回 <code>const_local_iterator</code> 。</td>\n</tr>\n<tr>\n<td><strong>哈希策略</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><code>c.load_factor()</code></td>\n<td>每个桶的平均元素数量，返回 <code>float</code>  值。</td>\n</tr>\n<tr>\n<td><code>c.max_load_factor()</code></td>\n<td><code>c</code>  试图维护的平均比桶大小，返回 <code>float</code>  值。 <code>c</code>  会在需要时添加新的桶，以使得 <code>load_factor&lt;=max_load_factor</code></td>\n</tr>\n<tr>\n<td><code>c.rehash(n)</code></td>\n<td>重组存储，使得 <code>bucket_count&gt;=n</code> ，且 <code>bucket_count&gt;size/max_load_factor</code></td>\n</tr>\n<tr>\n<td><code>c.reverse(n)</code></td>\n<td>重组存储，使得 <code>c</code>  可以保存 <code>n</code>  个元素且不必 <code>rehash</code> 。</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"exercise-1137\"><a class=\"anchor\" href=\"#exercise-1137\">#</a> Exercise 11.37</h3>\n<blockquote>\n<p>一个无序容器与其有序版本相比有何优势？有序版本有何优势？</p>\n</blockquote>\n<p>无序容器拥有更好的性能，有序容器使得元素始终有序。</p>\n<h3 id=\"exercise-1138\"><a class=\"anchor\" href=\"#exercise-1138\">#</a> Exercise 11.38</h3>\n<blockquote>\n<p>用  <code>unordered_map</code>  重写单词计数程序和单词转换程序。</p>\n</blockquote>\n<p>解：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wordCounting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">></span> word_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">;</span> std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>word_count<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>w <span class=\"token operator\">:</span> word_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> w<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" occurs \"</span> <span class=\"token operator\">&lt;&lt;</span> w<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>second <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"times\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wordTransformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">ifs_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/word_transformation.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ifs_content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/given_to_transform.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs_map <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>ifs_content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can't find the documents.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> trans_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span> ifs_map <span class=\"token operator\">>></span> key <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ifs_map<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> trans_map<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_not_of</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string text<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">;</span> <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ifs_content<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istringstream <span class=\"token function\">iss</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iss <span class=\"token operator\">>></span> word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">auto</span> map_it <span class=\"token operator\">=</span> trans_map<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>map_it <span class=\"token operator\">==</span> trans_map<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> word <span class=\"token operator\">:</span> map_it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//wordCounting();</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">wordTransformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"chapter-summary\"><a class=\"anchor\" href=\"#chapter-summary\">#</a> Chapter Summary</h2>\n<p>🍓：）</p>\n",
            "tags": [
                "Cpp",
                "Cpp-Primer",
                "读书笔记",
                "C++"
            ]
        }
    ]
}